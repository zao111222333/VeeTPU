/* Generated by Yosys 0.8 (git sha1 5706e90) */

module \$paramod\add_tree_16in\WIDTH=53 (mode_sel_pip1, data_in0, data_in1, data_in2, data_in3, data_in4, data_in5, data_in6, data_in7, data_in8, data_in9, data_inA, data_inB, data_inC, data_inD, data_inE, data_inF, i_man_A_53b, i_man_B_53b, sum_out, carry_out, add_result);
  wire [51:0] a4b3210;
  wire a4b4;
  output [108:0] add_result;
  wire [96:0] adr;
  wire [51:0] b4a3210;
  wire [54:0] carry0_0;
  wire [54:0] carry0_1;
  wire [54:0] carry0_2;
  wire [54:0] carry0_3;
  wire [55:0] carry1_0;
  wire [55:0] carry1_1;
  wire [82:0] carry2_0;
  output [108:0] carry_out;
  input [52:0] data_in0;
  input [52:0] data_in1;
  input [52:0] data_in2;
  input [52:0] data_in3;
  input [52:0] data_in4;
  input [52:0] data_in5;
  input [52:0] data_in6;
  input [52:0] data_in7;
  input [52:0] data_in8;
  input [52:0] data_in9;
  input [52:0] data_inA;
  input [52:0] data_inB;
  input [52:0] data_inC;
  input [52:0] data_inD;
  input [52:0] data_inE;
  input [52:0] data_inF;
  input [52:0] i_man_A_53b;
  input [52:0] i_man_B_53b;
  input [1:0] mode_sel_pip1;
  wire [54:0] sum0_0;
  wire [54:0] sum0_1;
  wire [54:0] sum0_2;
  wire [54:0] sum0_3;
  wire [55:0] sum1_0;
  wire [55:0] sum1_1;
  wire [82:0] sum2_0;
  output [108:0] sum_out;
  wire [55:0] u10_cin;
  wire [55:0] u10_din;
  wire [82:0] u20_ain;
  wire [82:0] u20_bin;
  wire [82:0] u20_cin;
  wire [82:0] u20_din;
  assign a4b4 = i_man_A_53b[52] & i_man_B_53b[52];
  assign a4b3210 = i_man_A_53b[52] ? i_man_A_53b[51:0] : 52'h0000000000000;
  assign b4a3210 = i_man_B_53b[52] ? i_man_B_53b[51:0] : 52'h0000000000000;
  assign u10_cin = mode_sel_pip1[1] ? { 3'h0, a4b4, a4b3210 } : { sum0_3[54], sum0_3 };
  assign u10_din = mode_sel_pip1[1] ? { 4'h0, b4a3210 } : { carry0_3, 1'h0 };
  assign u20_ain = mode_sel_pip1[1] ? { sum1_0[55], sum1_0, sum0_3[51:26] } : { sum1_0[55], sum1_0, 26'h0000000 };
  assign u20_bin = mode_sel_pip1[1] ? { carry1_0, 1'h0, carry0_3[50:25] } : { carry1_0, 27'h0000000 };
  assign u20_cin = mode_sel_pip1[1] ? { 26'h0000000, sum1_1[55], sum1_1 } : { sum1_1[55], sum1_1, 26'h0000000 };
  assign u20_din = mode_sel_pip1[1] ? { 26'h0000000, carry1_1, 1'h0 } : { carry1_1, 27'h0000000 };
  \$paramod\pe_CSA4_2\Width=55  U00_CSA4_2 (
    .a({ data_in0[52], data_in0[52], data_in0 }),
    .b({ data_in1[52], data_in1[52], data_in1 }),
    .c({ data_in2[52], data_in2[52], data_in2 }),
    .carry(carry0_0),
    .carry_out(),
    .d({ data_in3[52], data_in3[52], data_in3 }),
    .sum(sum0_0)
  );
  \$paramod\pe_CSA4_2\Width=55  U01_CSA4_2 (
    .a({ data_in4[52], data_in4[52], data_in4 }),
    .b({ data_in5[52], data_in5[52], data_in5 }),
    .c({ data_in6[52], data_in6[52], data_in6 }),
    .carry(carry0_1),
    .carry_out(),
    .d({ data_in7[52], data_in7[52], data_in7 }),
    .sum(sum0_1)
  );
  \$paramod\pe_CSA4_2\Width=55  U02_CSA4_2 (
    .a({ data_in8[52], data_in8[52], data_in8 }),
    .b({ data_in9[52], data_in9[52], data_in9 }),
    .c({ data_inA[52], data_inA[52], data_inA }),
    .carry(carry0_2),
    .carry_out(),
    .d({ data_inB[52], data_inB[52], data_inB }),
    .sum(sum0_2)
  );
  \$paramod\pe_CSA4_2\Width=55  U03_CSA4_2 (
    .a({ data_inC[52], data_inC[52], data_inC }),
    .b({ data_inD[52], data_inD[52], data_inD }),
    .c({ data_inE[52], data_inE[52], data_inE }),
    .carry(carry0_3),
    .carry_out(),
    .d({ data_inF[52], data_inF[52], data_inF }),
    .sum(sum0_3)
  );
  \$paramod\pe_CSA4_2\Width=56  U10_CSA4_2 (
    .a({ sum0_0[54], sum0_0 }),
    .b({ carry0_0, 1'h0 }),
    .c(u10_cin),
    .carry(carry1_0),
    .carry_out(),
    .d(u10_din),
    .sum(sum1_0)
  );
  \$paramod\pe_CSA4_2\Width=56  U11_CSA4_2 (
    .a({ sum0_1[54], sum0_1 }),
    .b({ carry0_1, 1'h0 }),
    .c({ sum0_2[54], sum0_2 }),
    .carry(carry1_1),
    .carry_out(),
    .d({ carry0_2, 1'h0 }),
    .sum(sum1_1)
  );
  \$paramod\pe_CSA4_2\Width=83  U20_CSA4_2 (
    .a(u20_ain),
    .b(u20_bin),
    .c(u20_cin),
    .carry(carry2_0),
    .carry_out(),
    .d(u20_din),
    .sum(sum2_0)
  );
  \$paramod\csla\WIDTH=96\PRE_WIDTH=9\PRE_UNIT_NUM=10\RCA_WIDTH=6  u_csla (
    .in_01({ sum2_0, sum0_3[25:13] }),
    .in_02({ carry2_0[81:0], 1'h0, carry0_3[24:12] }),
    .out(adr)
  );
  assign add_result = { adr[95:0], data_inF[12:0] };
  assign carry_out = { carry2_0[81:0], 1'h0, carry0_3[24:0], 1'h0 };
  assign sum_out = { sum2_0, sum0_3[25:0] };
endmodule

module \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1 (in_01, in_02, out);
  input [25:0] in_01;
  input [25:0] in_02;
  output [26:0] out;
  wire [24:0] out_sel;
  wire [5:0] \sum_0[0] ;
  wire [5:0] \sum_0[1] ;
  wire [5:0] \sum_0[2] ;
  wire [5:0] \sum_0[3] ;
  wire [5:0] \sum_0[4] ;
  wire [5:0] \sum_1[0] ;
  wire [5:0] \sum_1[1] ;
  wire [5:0] \sum_1[2] ;
  wire [5:0] \sum_1[3] ;
  wire [5:0] \sum_1[4] ;
  wire [1:0] sum_rca;
  wire [5:0] \sum_sel[0] ;
  wire [5:0] \sum_sel[1] ;
  wire [5:0] \sum_sel[2] ;
  wire [5:0] \sum_sel[3] ;
  wire [5:0] \sum_sel[4] ;
  assign \sum_sel[0]  = sum_rca[1] ? \sum_1[0]  : \sum_0[0] ;
  assign \sum_sel[1]  = \sum_sel[0] [5] ? \sum_1[1]  : \sum_0[1] ;
  assign \sum_sel[2]  = \sum_sel[1] [5] ? \sum_1[2]  : \sum_0[2] ;
  assign \sum_sel[3]  = \sum_sel[2] [5] ? \sum_1[3]  : \sum_0[3] ;
  assign \sum_sel[4]  = \sum_sel[3] [5] ? \sum_1[4]  : \sum_0[4] ;
  \$paramod\pe_csla_unit\WIDTH=5  \pe_csla_unit[0].u_csla_unit  (
    .in_01(in_01[5:1]),
    .in_02(in_02[5:1]),
    .sum_0(\sum_0[0] ),
    .sum_1(\sum_1[0] )
  );
  \$paramod\pe_csla_unit\WIDTH=5  \pe_csla_unit[1].u_csla_unit  (
    .in_01(in_01[10:6]),
    .in_02(in_02[10:6]),
    .sum_0(\sum_0[1] ),
    .sum_1(\sum_1[1] )
  );
  \$paramod\pe_csla_unit\WIDTH=5  \pe_csla_unit[2].u_csla_unit  (
    .in_01(in_01[15:11]),
    .in_02(in_02[15:11]),
    .sum_0(\sum_0[2] ),
    .sum_1(\sum_1[2] )
  );
  \$paramod\pe_csla_unit\WIDTH=5  \pe_csla_unit[3].u_csla_unit  (
    .in_01(in_01[20:16]),
    .in_02(in_02[20:16]),
    .sum_0(\sum_0[3] ),
    .sum_1(\sum_1[3] )
  );
  \$paramod\pe_csla_unit\WIDTH=5  \pe_csla_unit[4].u_csla_unit  (
    .in_01(in_01[25:21]),
    .in_02(in_02[25:21]),
    .sum_0(\sum_0[4] ),
    .sum_1(\sum_1[4] )
  );
  \$paramod\pe_cpa\WIDTH=1  u_cpa (
    .a(in_01[0]),
    .b(in_02[0]),
    .sum(sum_rca)
  );
  assign out = { \sum_sel[4] , \sum_sel[3] [4:0], \sum_sel[2] [4:0], \sum_sel[1] [4:0], \sum_sel[0] [4:0], sum_rca[0] };
  assign out_sel = { \sum_sel[4] [4:0], \sum_sel[3] [4:0], \sum_sel[2] [4:0], \sum_sel[1] [4:0], \sum_sel[0] [4:0] };
endmodule

module \$paramod\csla\WIDTH=96\PRE_WIDTH=9\PRE_UNIT_NUM=10\RCA_WIDTH=6 (in_01, in_02, out);
  input [95:0] in_01;
  input [95:0] in_02;
  output [96:0] out;
  wire [89:0] out_sel;
  wire [9:0] \sum_0[0] ;
  wire [9:0] \sum_0[1] ;
  wire [9:0] \sum_0[2] ;
  wire [9:0] \sum_0[3] ;
  wire [9:0] \sum_0[4] ;
  wire [9:0] \sum_0[5] ;
  wire [9:0] \sum_0[6] ;
  wire [9:0] \sum_0[7] ;
  wire [9:0] \sum_0[8] ;
  wire [9:0] \sum_0[9] ;
  wire [9:0] \sum_1[0] ;
  wire [9:0] \sum_1[1] ;
  wire [9:0] \sum_1[2] ;
  wire [9:0] \sum_1[3] ;
  wire [9:0] \sum_1[4] ;
  wire [9:0] \sum_1[5] ;
  wire [9:0] \sum_1[6] ;
  wire [9:0] \sum_1[7] ;
  wire [9:0] \sum_1[8] ;
  wire [9:0] \sum_1[9] ;
  wire [6:0] sum_rca;
  wire [9:0] \sum_sel[0] ;
  wire [9:0] \sum_sel[1] ;
  wire [9:0] \sum_sel[2] ;
  wire [9:0] \sum_sel[3] ;
  wire [9:0] \sum_sel[4] ;
  wire [9:0] \sum_sel[5] ;
  wire [9:0] \sum_sel[6] ;
  wire [9:0] \sum_sel[7] ;
  wire [9:0] \sum_sel[8] ;
  wire [9:0] \sum_sel[9] ;
  assign \sum_sel[0]  = sum_rca[6] ? \sum_1[0]  : \sum_0[0] ;
  assign \sum_sel[1]  = \sum_sel[0] [9] ? \sum_1[1]  : \sum_0[1] ;
  assign \sum_sel[2]  = \sum_sel[1] [9] ? \sum_1[2]  : \sum_0[2] ;
  assign \sum_sel[3]  = \sum_sel[2] [9] ? \sum_1[3]  : \sum_0[3] ;
  assign \sum_sel[4]  = \sum_sel[3] [9] ? \sum_1[4]  : \sum_0[4] ;
  assign \sum_sel[5]  = \sum_sel[4] [9] ? \sum_1[5]  : \sum_0[5] ;
  assign \sum_sel[6]  = \sum_sel[5] [9] ? \sum_1[6]  : \sum_0[6] ;
  assign \sum_sel[7]  = \sum_sel[6] [9] ? \sum_1[7]  : \sum_0[7] ;
  assign \sum_sel[8]  = \sum_sel[7] [9] ? \sum_1[8]  : \sum_0[8] ;
  assign \sum_sel[9]  = \sum_sel[8] [9] ? \sum_1[9]  : \sum_0[9] ;
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[0].u_csla_unit  (
    .in_01(in_01[14:6]),
    .in_02(in_02[14:6]),
    .sum_0(\sum_0[0] ),
    .sum_1(\sum_1[0] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[1].u_csla_unit  (
    .in_01(in_01[23:15]),
    .in_02(in_02[23:15]),
    .sum_0(\sum_0[1] ),
    .sum_1(\sum_1[1] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[2].u_csla_unit  (
    .in_01(in_01[32:24]),
    .in_02(in_02[32:24]),
    .sum_0(\sum_0[2] ),
    .sum_1(\sum_1[2] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[3].u_csla_unit  (
    .in_01(in_01[41:33]),
    .in_02(in_02[41:33]),
    .sum_0(\sum_0[3] ),
    .sum_1(\sum_1[3] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[4].u_csla_unit  (
    .in_01(in_01[50:42]),
    .in_02(in_02[50:42]),
    .sum_0(\sum_0[4] ),
    .sum_1(\sum_1[4] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[5].u_csla_unit  (
    .in_01(in_01[59:51]),
    .in_02(in_02[59:51]),
    .sum_0(\sum_0[5] ),
    .sum_1(\sum_1[5] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[6].u_csla_unit  (
    .in_01(in_01[68:60]),
    .in_02(in_02[68:60]),
    .sum_0(\sum_0[6] ),
    .sum_1(\sum_1[6] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[7].u_csla_unit  (
    .in_01(in_01[77:69]),
    .in_02(in_02[77:69]),
    .sum_0(\sum_0[7] ),
    .sum_1(\sum_1[7] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[8].u_csla_unit  (
    .in_01(in_01[86:78]),
    .in_02(in_02[86:78]),
    .sum_0(\sum_0[8] ),
    .sum_1(\sum_1[8] )
  );
  \$paramod\pe_csla_unit\WIDTH=9  \pe_csla_unit[9].u_csla_unit  (
    .in_01(in_01[95:87]),
    .in_02(in_02[95:87]),
    .sum_0(\sum_0[9] ),
    .sum_1(\sum_1[9] )
  );
  \$paramod\pe_cpa\WIDTH=6  u_cpa (
    .a(in_01[5:0]),
    .b(in_02[5:0]),
    .sum(sum_rca)
  );
  assign out = { \sum_sel[9] , \sum_sel[8] [8:0], \sum_sel[7] [8:0], \sum_sel[6] [8:0], \sum_sel[5] [8:0], \sum_sel[4] [8:0], \sum_sel[3] [8:0], \sum_sel[2] [8:0], \sum_sel[1] [8:0], \sum_sel[0] [8:0], sum_rca[5:0] };
  assign out_sel = { \sum_sel[9] [8:0], \sum_sel[8] [8:0], \sum_sel[7] [8:0], \sum_sel[6] [8:0], \sum_sel[5] [8:0], \sum_sel[4] [8:0], \sum_sel[3] [8:0], \sum_sel[2] [8:0], \sum_sel[1] [8:0], \sum_sel[0] [8:0] };
endmodule

module \$paramod\exp_compare_16in\WIDTH=10 (iexp_00, iexp_01, iexp_02, iexp_03, iexp_04, iexp_05, iexp_06, iexp_07, iexp_08, iexp_09, iexp_10, iexp_11, iexp_12, iexp_13, iexp_14, iexp_15, oexp_max, oshift_00, oshift_01, oshift_02, oshift_03, oshift_04, oshift_05, oshift_06, oshift_07, oshift_08, oshift_09, oshift_10, oshift_11, oshift_12, oshift_13, oshift_14, oshift_15);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [9:0] exp_max_0_0;
  wire [9:0] exp_max_0_1;
  wire [9:0] exp_max_0_2;
  wire [9:0] exp_max_1_0;
  wire [9:0] exp_max_1_1;
  wire [9:0] exp_max_1_2;
  wire [9:0] exp_max_2_0;
  wire [9:0] exp_max_2_1;
  wire [9:0] exp_max_3_0;
  wire [9:0] exp_max_3_1;
  wire [9:0] exp_max_4_0;
  wire [9:0] exp_max_5_0;
  wire [9:0] exp_max_6_0;
  wire [9:0] exp_max_7_0;
  input [9:0] iexp_00;
  input [9:0] iexp_01;
  input [9:0] iexp_02;
  input [9:0] iexp_03;
  input [9:0] iexp_04;
  input [9:0] iexp_05;
  input [9:0] iexp_06;
  input [9:0] iexp_07;
  input [9:0] iexp_08;
  input [9:0] iexp_09;
  input [9:0] iexp_10;
  input [9:0] iexp_11;
  input [9:0] iexp_12;
  input [9:0] iexp_13;
  input [9:0] iexp_14;
  input [9:0] iexp_15;
  output [9:0] oexp_max;
  output [9:0] oshift_00;
  output [9:0] oshift_01;
  output [9:0] oshift_02;
  output [9:0] oshift_03;
  output [9:0] oshift_04;
  output [9:0] oshift_05;
  output [9:0] oshift_06;
  output [9:0] oshift_07;
  output [9:0] oshift_08;
  output [9:0] oshift_09;
  output [9:0] oshift_10;
  output [9:0] oshift_11;
  output [9:0] oshift_12;
  output [9:0] oshift_13;
  output [9:0] oshift_14;
  output [9:0] oshift_15;
  assign _00_ = iexp_00 > iexp_01;
  assign _01_ = iexp_02 > iexp_03;
  assign _02_ = iexp_04 > iexp_05;
  assign _03_ = iexp_06 > iexp_07;
  assign _04_ = iexp_08 > iexp_09;
  assign _05_ = iexp_10 > iexp_11;
  assign _06_ = iexp_12 > iexp_13;
  assign _07_ = iexp_14 > iexp_15;
  assign _08_ = exp_max_0_0 > exp_max_1_0;
  assign _09_ = exp_max_2_0 > exp_max_3_0;
  assign _10_ = exp_max_4_0 > exp_max_5_0;
  assign _11_ = exp_max_6_0 > exp_max_7_0;
  assign _12_ = exp_max_0_1 > exp_max_1_1;
  assign _13_ = exp_max_2_1 > exp_max_3_1;
  assign _14_ = exp_max_0_2 > exp_max_1_2;
  assign oshift_00 = oexp_max - iexp_00;
  assign oshift_01 = oexp_max - iexp_01;
  assign oshift_02 = oexp_max - iexp_02;
  assign oshift_03 = oexp_max - iexp_03;
  assign oshift_04 = oexp_max - iexp_04;
  assign oshift_05 = oexp_max - iexp_05;
  assign oshift_06 = oexp_max - iexp_06;
  assign oshift_07 = oexp_max - iexp_07;
  assign oshift_08 = oexp_max - iexp_08;
  assign oshift_09 = oexp_max - iexp_09;
  assign oshift_10 = oexp_max - iexp_10;
  assign oshift_11 = oexp_max - iexp_11;
  assign oshift_12 = oexp_max - iexp_12;
  assign oshift_13 = oexp_max - iexp_13;
  assign oshift_14 = oexp_max - iexp_14;
  assign oshift_15 = oexp_max - iexp_15;
  assign exp_max_0_0 = _00_ ? iexp_00 : iexp_01;
  assign exp_max_1_0 = _01_ ? iexp_02 : iexp_03;
  assign exp_max_2_0 = _02_ ? iexp_04 : iexp_05;
  assign exp_max_3_0 = _03_ ? iexp_06 : iexp_07;
  assign exp_max_4_0 = _04_ ? iexp_08 : iexp_09;
  assign exp_max_5_0 = _05_ ? iexp_10 : iexp_11;
  assign exp_max_6_0 = _06_ ? iexp_12 : iexp_13;
  assign exp_max_7_0 = _07_ ? iexp_14 : iexp_15;
  assign exp_max_0_1 = _08_ ? exp_max_0_0 : exp_max_1_0;
  assign exp_max_1_1 = _09_ ? exp_max_2_0 : exp_max_3_0;
  assign exp_max_2_1 = _10_ ? exp_max_4_0 : exp_max_5_0;
  assign exp_max_3_1 = _11_ ? exp_max_6_0 : exp_max_7_0;
  assign exp_max_0_2 = _12_ ? exp_max_0_1 : exp_max_1_1;
  assign exp_max_1_2 = _13_ ? exp_max_2_1 : exp_max_3_1;
  assign oexp_max = _14_ ? exp_max_0_2 : exp_max_1_2;
endmodule

module \$paramod\lza\WIDTH=107 (in_01, in_02, zero_cnt, invalid);
  wire [15:0] _0000_;
  wire [31:0] _0001_;
  wire [3:0] _0002_;
  wire [63:0] _0003_;
  wire [7:0] _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire _0603_;
  wire _0604_;
  wire _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire _0609_;
  wire _0610_;
  wire _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  wire _0635_;
  wire _0636_;
  wire _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire [106:0] _0642_;
  wire [106:0] _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  wire _0648_;
  wire _0649_;
  wire _0650_;
  wire _0651_;
  wire _0652_;
  wire _0653_;
  wire _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire _0664_;
  wire _0665_;
  wire _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire _0672_;
  wire _0673_;
  wire _0674_;
  wire _0675_;
  wire _0676_;
  wire _0677_;
  wire _0678_;
  wire _0679_;
  wire _0680_;
  wire _0681_;
  wire _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire _0690_;
  wire _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire _0695_;
  wire _0696_;
  wire _0697_;
  wire _0698_;
  wire _0699_;
  wire _0700_;
  wire _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire _0707_;
  wire _0708_;
  wire _0709_;
  wire _0710_;
  wire _0711_;
  wire _0712_;
  wire _0713_;
  wire _0714_;
  wire _0715_;
  wire _0716_;
  wire _0717_;
  wire _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire _0725_;
  wire _0726_;
  wire _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire _0731_;
  wire _0732_;
  wire _0733_;
  wire _0734_;
  wire _0735_;
  wire _0736_;
  wire _0737_;
  wire _0738_;
  wire _0739_;
  wire _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire _0744_;
  wire _0745_;
  wire _0746_;
  wire _0747_;
  wire _0748_;
  wire _0749_;
  wire _0750_;
  wire _0751_;
  wire _0752_;
  wire _0753_;
  wire _0754_;
  wire _0755_;
  wire _0756_;
  wire _0757_;
  wire _0758_;
  wire _0759_;
  wire _0760_;
  wire _0761_;
  wire _0762_;
  wire _0763_;
  wire _0764_;
  wire _0765_;
  wire _0766_;
  wire _0767_;
  wire _0768_;
  wire _0769_;
  wire _0770_;
  wire _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire _0776_;
  wire _0777_;
  wire _0778_;
  wire _0779_;
  wire _0780_;
  wire _0781_;
  wire _0782_;
  wire _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire _0790_;
  wire _0791_;
  wire _0792_;
  wire _0793_;
  wire _0794_;
  wire _0795_;
  wire _0796_;
  wire _0797_;
  wire _0798_;
  wire _0799_;
  wire _0800_;
  wire _0801_;
  wire _0802_;
  wire _0803_;
  wire _0804_;
  wire _0805_;
  wire _0806_;
  wire _0807_;
  wire _0808_;
  wire _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire _0813_;
  wire _0814_;
  wire _0815_;
  wire _0816_;
  wire _0817_;
  wire _0818_;
  wire _0819_;
  wire _0820_;
  wire _0821_;
  wire _0822_;
  wire _0823_;
  wire _0824_;
  wire _0825_;
  wire _0826_;
  wire _0827_;
  wire _0828_;
  wire _0829_;
  wire _0830_;
  wire _0831_;
  wire _0832_;
  wire _0833_;
  wire _0834_;
  wire _0835_;
  wire _0836_;
  wire _0837_;
  wire _0838_;
  wire _0839_;
  wire _0840_;
  wire _0841_;
  wire _0842_;
  wire _0843_;
  wire _0844_;
  wire _0845_;
  wire _0846_;
  wire _0847_;
  wire _0848_;
  wire _0849_;
  wire _0850_;
  wire _0851_;
  wire _0852_;
  wire _0853_;
  wire _0854_;
  wire _0855_;
  wire _0856_;
  wire _0857_;
  wire _0858_;
  wire _0859_;
  wire _0860_;
  wire _0861_;
  wire _0862_;
  wire _0863_;
  wire _0864_;
  wire _0865_;
  wire _0866_;
  wire _0867_;
  wire _0868_;
  wire _0869_;
  wire _0870_;
  wire _0871_;
  wire _0872_;
  wire _0873_;
  wire _0874_;
  wire _0875_;
  wire _0876_;
  wire _0877_;
  wire _0878_;
  wire _0879_;
  wire _0880_;
  wire _0881_;
  wire _0882_;
  wire _0883_;
  wire _0884_;
  wire _0885_;
  wire _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire _0891_;
  wire _0892_;
  wire _0893_;
  wire _0894_;
  wire _0895_;
  wire _0896_;
  wire _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire _0903_;
  wire _0904_;
  wire _0905_;
  wire _0906_;
  wire _0907_;
  wire _0908_;
  wire _0909_;
  wire _0910_;
  wire _0911_;
  wire _0912_;
  wire _0913_;
  wire _0914_;
  wire _0915_;
  wire _0916_;
  wire _0917_;
  wire _0918_;
  wire _0919_;
  wire _0920_;
  wire _0921_;
  wire _0922_;
  wire _0923_;
  wire _0924_;
  wire _0925_;
  wire _0926_;
  wire _0927_;
  wire _0928_;
  wire _0929_;
  wire _0930_;
  wire _0931_;
  wire _0932_;
  wire _0933_;
  wire _0934_;
  wire _0935_;
  wire _0936_;
  wire _0937_;
  wire _0938_;
  wire _0939_;
  wire _0940_;
  wire _0941_;
  wire _0942_;
  wire _0943_;
  wire _0944_;
  wire _0945_;
  wire _0946_;
  wire _0947_;
  wire _0948_;
  wire _0949_;
  wire _0950_;
  wire _0951_;
  wire _0952_;
  wire _0953_;
  wire _0954_;
  wire _0955_;
  wire _0956_;
  wire _0957_;
  wire _0958_;
  wire _0959_;
  wire _0960_;
  wire _0961_;
  wire _0962_;
  wire _0963_;
  wire _0964_;
  wire _0965_;
  wire _0966_;
  wire _0967_;
  wire _0968_;
  wire _0969_;
  wire _0970_;
  wire _0971_;
  wire _0972_;
  wire _0973_;
  wire _0974_;
  wire _0975_;
  wire _0976_;
  wire _0977_;
  wire _0978_;
  wire _0979_;
  wire _0980_;
  wire _0981_;
  wire _0982_;
  wire _0983_;
  wire _0984_;
  wire _0985_;
  wire _0986_;
  wire _0987_;
  wire _0988_;
  wire _0989_;
  wire _0990_;
  wire _0991_;
  wire _0992_;
  wire _0993_;
  wire _0994_;
  wire _0995_;
  wire _0996_;
  wire _0997_;
  wire _0998_;
  wire _0999_;
  wire _1000_;
  wire _1001_;
  wire _1002_;
  wire _1003_;
  wire _1004_;
  wire _1005_;
  wire _1006_;
  wire _1007_;
  wire _1008_;
  wire _1009_;
  wire _1010_;
  wire _1011_;
  wire _1012_;
  wire _1013_;
  wire _1014_;
  wire _1015_;
  wire _1016_;
  wire _1017_;
  wire _1018_;
  wire _1019_;
  wire _1020_;
  wire _1021_;
  wire _1022_;
  wire _1023_;
  wire _1024_;
  wire _1025_;
  wire _1026_;
  wire _1027_;
  wire _1028_;
  wire _1029_;
  wire _1030_;
  wire _1031_;
  wire _1032_;
  wire _1033_;
  wire _1034_;
  wire _1035_;
  wire _1036_;
  wire _1037_;
  wire _1038_;
  wire _1039_;
  wire _1040_;
  wire _1041_;
  wire _1042_;
  wire _1043_;
  wire _1044_;
  wire _1045_;
  wire _1046_;
  wire _1047_;
  wire _1048_;
  wire _1049_;
  wire _1050_;
  wire _1051_;
  wire _1052_;
  wire _1053_;
  wire _1054_;
  wire _1055_;
  wire _1056_;
  wire _1057_;
  wire _1058_;
  wire _1059_;
  wire _1060_;
  wire _1061_;
  wire _1062_;
  wire _1063_;
  wire _1064_;
  wire _1065_;
  wire _1066_;
  wire _1067_;
  wire _1068_;
  wire _1069_;
  wire _1070_;
  wire _1071_;
  wire _1072_;
  wire _1073_;
  wire _1074_;
  wire _1075_;
  wire _1076_;
  wire _1077_;
  wire _1078_;
  wire _1079_;
  wire _1080_;
  wire _1081_;
  wire _1082_;
  wire _1083_;
  wire _1084_;
  wire _1085_;
  wire _1086_;
  wire _1087_;
  wire _1088_;
  wire _1089_;
  wire _1090_;
  wire _1091_;
  wire _1092_;
  wire _1093_;
  wire _1094_;
  wire _1095_;
  wire _1096_;
  wire _1097_;
  wire _1098_;
  wire _1099_;
  wire _1100_;
  wire _1101_;
  wire _1102_;
  wire _1103_;
  wire _1104_;
  wire _1105_;
  wire _1106_;
  wire _1107_;
  wire _1108_;
  wire _1109_;
  wire _1110_;
  wire _1111_;
  wire _1112_;
  wire _1113_;
  wire _1114_;
  wire _1115_;
  wire _1116_;
  wire _1117_;
  wire _1118_;
  wire _1119_;
  wire _1120_;
  wire _1121_;
  wire _1122_;
  wire _1123_;
  wire _1124_;
  wire _1125_;
  wire _1126_;
  wire _1127_;
  wire _1128_;
  wire _1129_;
  wire _1130_;
  wire _1131_;
  wire _1132_;
  wire _1133_;
  wire _1134_;
  wire _1135_;
  wire _1136_;
  wire _1137_;
  wire _1138_;
  wire _1139_;
  wire _1140_;
  wire _1141_;
  wire _1142_;
  wire _1143_;
  wire _1144_;
  wire _1145_;
  wire _1146_;
  wire _1147_;
  wire _1148_;
  wire _1149_;
  wire _1150_;
  wire _1151_;
  wire _1152_;
  wire _1153_;
  wire _1154_;
  wire _1155_;
  wire _1156_;
  wire _1157_;
  wire _1158_;
  wire _1159_;
  wire _1160_;
  wire _1161_;
  wire _1162_;
  wire _1163_;
  wire _1164_;
  wire _1165_;
  wire _1166_;
  wire _1167_;
  wire _1168_;
  wire _1169_;
  wire _1170_;
  wire _1171_;
  wire [106:0] G;
  wire [106:0] T;
  wire [106:0] Z;
  wire [106:0] f_out;
  input [106:0] in_01;
  input [106:0] in_02;
  output invalid;
  output [6:0] zero_cnt;
  assign G = in_01 & in_02;
  assign Z = _0642_ & _0643_;
  assign f_out[106] = _0644_ & T[105];
  assign _0005_ = G[1] & _0645_;
  assign _0006_ = Z[1] & _0646_;
  assign _0007_ = T[2] & _0961_;
  assign _0008_ = Z[1] & _0645_;
  assign _0009_ = G[1] & _0646_;
  assign _0010_ = _0647_ & _0962_;
  assign _0011_ = G[2] & _0648_;
  assign _0012_ = Z[2] & _0649_;
  assign _0013_ = T[3] & _0963_;
  assign _0014_ = Z[2] & _0648_;
  assign _0015_ = G[2] & _0649_;
  assign _0016_ = _0650_ & _0964_;
  assign _0017_ = G[3] & _0651_;
  assign _0018_ = Z[3] & _0652_;
  assign _0019_ = T[4] & _0965_;
  assign _0020_ = Z[3] & _0651_;
  assign _0021_ = G[3] & _0652_;
  assign _0022_ = _0653_ & _0966_;
  assign _0023_ = G[4] & _0654_;
  assign _0024_ = Z[4] & _0655_;
  assign _0025_ = T[5] & _0967_;
  assign _0026_ = Z[4] & _0654_;
  assign _0027_ = G[4] & _0655_;
  assign _0028_ = _0656_ & _0968_;
  assign _0029_ = G[5] & _0657_;
  assign _0030_ = Z[5] & _0658_;
  assign _0031_ = T[6] & _0969_;
  assign _0032_ = Z[5] & _0657_;
  assign _0033_ = G[5] & _0658_;
  assign _0034_ = _0659_ & _0970_;
  assign _0035_ = G[6] & _0660_;
  assign _0036_ = Z[6] & _0661_;
  assign _0037_ = T[7] & _0971_;
  assign _0038_ = Z[6] & _0660_;
  assign _0039_ = G[6] & _0661_;
  assign _0040_ = _0662_ & _0972_;
  assign _0041_ = G[7] & _0663_;
  assign _0042_ = Z[7] & _0664_;
  assign _0043_ = T[8] & _0973_;
  assign _0044_ = Z[7] & _0663_;
  assign _0045_ = G[7] & _0664_;
  assign _0046_ = _0665_ & _0974_;
  assign _0047_ = G[8] & _0666_;
  assign _0048_ = Z[8] & _0667_;
  assign _0049_ = T[9] & _0975_;
  assign _0050_ = Z[8] & _0666_;
  assign _0051_ = G[8] & _0667_;
  assign _0052_ = _0668_ & _0976_;
  assign _0053_ = G[9] & _0669_;
  assign _0054_ = Z[9] & _0670_;
  assign _0055_ = T[10] & _0977_;
  assign _0056_ = Z[9] & _0669_;
  assign _0057_ = G[9] & _0670_;
  assign _0058_ = _0671_ & _0978_;
  assign _0059_ = G[10] & _0672_;
  assign _0060_ = Z[10] & _0673_;
  assign _0061_ = T[11] & _0979_;
  assign _0062_ = Z[10] & _0672_;
  assign _0063_ = G[10] & _0673_;
  assign _0064_ = _0674_ & _0980_;
  assign _0065_ = G[11] & _0675_;
  assign _0066_ = Z[11] & _0676_;
  assign _0067_ = T[12] & _0981_;
  assign _0068_ = Z[11] & _0675_;
  assign _0069_ = G[11] & _0676_;
  assign _0070_ = _0677_ & _0982_;
  assign _0071_ = G[12] & _0678_;
  assign _0072_ = Z[12] & _0679_;
  assign _0073_ = T[13] & _0983_;
  assign _0074_ = Z[12] & _0678_;
  assign _0075_ = G[12] & _0679_;
  assign _0076_ = _0680_ & _0984_;
  assign _0077_ = G[13] & _0681_;
  assign _0078_ = Z[13] & _0682_;
  assign _0079_ = T[14] & _0985_;
  assign _0080_ = Z[13] & _0681_;
  assign _0081_ = G[13] & _0682_;
  assign _0082_ = _0683_ & _0986_;
  assign _0083_ = G[14] & _0684_;
  assign _0084_ = Z[14] & _0685_;
  assign _0085_ = T[15] & _0987_;
  assign _0086_ = Z[14] & _0684_;
  assign _0087_ = G[14] & _0685_;
  assign _0088_ = _0686_ & _0988_;
  assign _0089_ = G[15] & _0687_;
  assign _0090_ = Z[15] & _0688_;
  assign _0091_ = T[16] & _0989_;
  assign _0092_ = Z[15] & _0687_;
  assign _0093_ = G[15] & _0688_;
  assign _0094_ = _0689_ & _0990_;
  assign _0095_ = G[16] & _0690_;
  assign _0096_ = Z[16] & _0691_;
  assign _0097_ = T[17] & _0991_;
  assign _0098_ = Z[16] & _0690_;
  assign _0099_ = G[16] & _0691_;
  assign _0100_ = _0692_ & _0992_;
  assign _0101_ = G[17] & _0693_;
  assign _0102_ = Z[17] & _0694_;
  assign _0103_ = T[18] & _0993_;
  assign _0104_ = Z[17] & _0693_;
  assign _0105_ = G[17] & _0694_;
  assign _0106_ = _0695_ & _0994_;
  assign _0107_ = G[18] & _0696_;
  assign _0108_ = Z[18] & _0697_;
  assign _0109_ = T[19] & _0995_;
  assign _0110_ = Z[18] & _0696_;
  assign _0111_ = G[18] & _0697_;
  assign _0112_ = _0698_ & _0996_;
  assign _0113_ = G[19] & _0699_;
  assign _0114_ = Z[19] & _0700_;
  assign _0115_ = T[20] & _0997_;
  assign _0116_ = Z[19] & _0699_;
  assign _0117_ = G[19] & _0700_;
  assign _0118_ = _0701_ & _0998_;
  assign _0119_ = G[20] & _0702_;
  assign _0120_ = Z[20] & _0703_;
  assign _0121_ = T[21] & _0999_;
  assign _0122_ = Z[20] & _0702_;
  assign _0123_ = G[20] & _0703_;
  assign _0124_ = _0704_ & _1000_;
  assign _0125_ = G[21] & _0705_;
  assign _0126_ = Z[21] & _0706_;
  assign _0127_ = T[22] & _1001_;
  assign _0128_ = Z[21] & _0705_;
  assign _0129_ = G[21] & _0706_;
  assign _0130_ = _0707_ & _1002_;
  assign _0131_ = G[22] & _0708_;
  assign _0132_ = Z[22] & _0709_;
  assign _0133_ = T[23] & _1003_;
  assign _0134_ = Z[22] & _0708_;
  assign _0135_ = G[22] & _0709_;
  assign _0136_ = _0710_ & _1004_;
  assign _0137_ = G[23] & _0711_;
  assign _0138_ = Z[23] & _0712_;
  assign _0139_ = T[24] & _1005_;
  assign _0140_ = Z[23] & _0711_;
  assign _0141_ = G[23] & _0712_;
  assign _0142_ = _0713_ & _1006_;
  assign _0143_ = G[24] & _0714_;
  assign _0144_ = Z[24] & _0715_;
  assign _0145_ = T[25] & _1007_;
  assign _0146_ = Z[24] & _0714_;
  assign _0147_ = G[24] & _0715_;
  assign _0148_ = _0716_ & _1008_;
  assign _0149_ = G[25] & _0717_;
  assign _0150_ = Z[25] & _0718_;
  assign _0151_ = T[26] & _1009_;
  assign _0152_ = Z[25] & _0717_;
  assign _0153_ = G[25] & _0718_;
  assign _0154_ = _0719_ & _1010_;
  assign _0155_ = G[26] & _0720_;
  assign _0156_ = Z[26] & _0721_;
  assign _0157_ = T[27] & _1011_;
  assign _0158_ = Z[26] & _0720_;
  assign _0159_ = G[26] & _0721_;
  assign _0160_ = _0722_ & _1012_;
  assign _0161_ = G[27] & _0723_;
  assign _0162_ = Z[27] & _0724_;
  assign _0163_ = T[28] & _1013_;
  assign _0164_ = Z[27] & _0723_;
  assign _0165_ = G[27] & _0724_;
  assign _0166_ = _0725_ & _1014_;
  assign _0167_ = G[28] & _0726_;
  assign _0168_ = Z[28] & _0727_;
  assign _0169_ = T[29] & _1015_;
  assign _0170_ = Z[28] & _0726_;
  assign _0171_ = G[28] & _0727_;
  assign _0172_ = _0728_ & _1016_;
  assign _0173_ = G[29] & _0729_;
  assign _0174_ = Z[29] & _0730_;
  assign _0175_ = T[30] & _1017_;
  assign _0176_ = Z[29] & _0729_;
  assign _0177_ = G[29] & _0730_;
  assign _0178_ = _0731_ & _1018_;
  assign _0179_ = G[30] & _0732_;
  assign _0180_ = Z[30] & _0733_;
  assign _0181_ = T[31] & _1019_;
  assign _0182_ = Z[30] & _0732_;
  assign _0183_ = G[30] & _0733_;
  assign _0184_ = _0734_ & _1020_;
  assign _0185_ = G[31] & _0735_;
  assign _0186_ = Z[31] & _0736_;
  assign _0187_ = T[32] & _1021_;
  assign _0188_ = Z[31] & _0735_;
  assign _0189_ = G[31] & _0736_;
  assign _0190_ = _0737_ & _1022_;
  assign _0191_ = G[32] & _0738_;
  assign _0192_ = Z[32] & _0739_;
  assign _0193_ = T[33] & _1023_;
  assign _0194_ = Z[32] & _0738_;
  assign _0195_ = G[32] & _0739_;
  assign _0196_ = _0740_ & _1024_;
  assign _0197_ = G[33] & _0741_;
  assign _0198_ = Z[33] & _0742_;
  assign _0199_ = T[34] & _1025_;
  assign _0200_ = Z[33] & _0741_;
  assign _0201_ = G[33] & _0742_;
  assign _0202_ = _0743_ & _1026_;
  assign _0203_ = G[34] & _0744_;
  assign _0204_ = Z[34] & _0745_;
  assign _0205_ = T[35] & _1027_;
  assign _0206_ = Z[34] & _0744_;
  assign _0207_ = G[34] & _0745_;
  assign _0208_ = _0746_ & _1028_;
  assign _0209_ = G[35] & _0747_;
  assign _0210_ = Z[35] & _0748_;
  assign _0211_ = T[36] & _1029_;
  assign _0212_ = Z[35] & _0747_;
  assign _0213_ = G[35] & _0748_;
  assign _0214_ = _0749_ & _1030_;
  assign _0215_ = G[36] & _0750_;
  assign _0216_ = Z[36] & _0751_;
  assign _0217_ = T[37] & _1031_;
  assign _0218_ = Z[36] & _0750_;
  assign _0219_ = G[36] & _0751_;
  assign _0220_ = _0752_ & _1032_;
  assign _0221_ = G[37] & _0753_;
  assign _0222_ = Z[37] & _0754_;
  assign _0223_ = T[38] & _1033_;
  assign _0224_ = Z[37] & _0753_;
  assign _0225_ = G[37] & _0754_;
  assign _0226_ = _0755_ & _1034_;
  assign _0227_ = G[38] & _0756_;
  assign _0228_ = Z[38] & _0757_;
  assign _0229_ = T[39] & _1035_;
  assign _0230_ = Z[38] & _0756_;
  assign _0231_ = G[38] & _0757_;
  assign _0232_ = _0758_ & _1036_;
  assign _0233_ = G[39] & _0759_;
  assign _0234_ = Z[39] & _0760_;
  assign _0235_ = T[40] & _1037_;
  assign _0236_ = Z[39] & _0759_;
  assign _0237_ = G[39] & _0760_;
  assign _0238_ = _0761_ & _1038_;
  assign _0239_ = G[40] & _0762_;
  assign _0240_ = Z[40] & _0763_;
  assign _0241_ = T[41] & _1039_;
  assign _0242_ = Z[40] & _0762_;
  assign _0243_ = G[40] & _0763_;
  assign _0244_ = _0764_ & _1040_;
  assign _0245_ = G[41] & _0765_;
  assign _0246_ = Z[41] & _0766_;
  assign _0247_ = T[42] & _1041_;
  assign _0248_ = Z[41] & _0765_;
  assign _0249_ = G[41] & _0766_;
  assign _0250_ = _0767_ & _1042_;
  assign _0251_ = G[42] & _0768_;
  assign _0252_ = Z[42] & _0769_;
  assign _0253_ = T[43] & _1043_;
  assign _0254_ = Z[42] & _0768_;
  assign _0255_ = G[42] & _0769_;
  assign _0256_ = _0770_ & _1044_;
  assign _0257_ = G[43] & _0771_;
  assign _0258_ = Z[43] & _0772_;
  assign _0259_ = T[44] & _1045_;
  assign _0260_ = Z[43] & _0771_;
  assign _0261_ = G[43] & _0772_;
  assign _0262_ = _0773_ & _1046_;
  assign _0263_ = G[44] & _0774_;
  assign _0264_ = Z[44] & _0775_;
  assign _0265_ = T[45] & _1047_;
  assign _0266_ = Z[44] & _0774_;
  assign _0267_ = G[44] & _0775_;
  assign _0268_ = _0776_ & _1048_;
  assign _0269_ = G[45] & _0777_;
  assign _0270_ = Z[45] & _0778_;
  assign _0271_ = T[46] & _1049_;
  assign _0272_ = Z[45] & _0777_;
  assign _0273_ = G[45] & _0778_;
  assign _0274_ = _0779_ & _1050_;
  assign _0275_ = G[46] & _0780_;
  assign _0276_ = Z[46] & _0781_;
  assign _0277_ = T[47] & _1051_;
  assign _0278_ = Z[46] & _0780_;
  assign _0279_ = G[46] & _0781_;
  assign _0280_ = _0782_ & _1052_;
  assign _0281_ = G[47] & _0783_;
  assign _0282_ = Z[47] & _0784_;
  assign _0283_ = T[48] & _1053_;
  assign _0284_ = Z[47] & _0783_;
  assign _0285_ = G[47] & _0784_;
  assign _0286_ = _0785_ & _1054_;
  assign _0287_ = G[48] & _0786_;
  assign _0288_ = Z[48] & _0787_;
  assign _0289_ = T[49] & _1055_;
  assign _0290_ = Z[48] & _0786_;
  assign _0291_ = G[48] & _0787_;
  assign _0292_ = _0788_ & _1056_;
  assign _0293_ = G[49] & _0789_;
  assign _0294_ = Z[49] & _0790_;
  assign _0295_ = T[50] & _1057_;
  assign _0296_ = Z[49] & _0789_;
  assign _0297_ = G[49] & _0790_;
  assign _0298_ = _0791_ & _1058_;
  assign _0299_ = G[50] & _0792_;
  assign _0300_ = Z[50] & _0793_;
  assign _0301_ = T[51] & _1059_;
  assign _0302_ = Z[50] & _0792_;
  assign _0303_ = G[50] & _0793_;
  assign _0304_ = _0794_ & _1060_;
  assign _0305_ = G[51] & _0795_;
  assign _0306_ = Z[51] & _0796_;
  assign _0307_ = T[52] & _1061_;
  assign _0308_ = Z[51] & _0795_;
  assign _0309_ = G[51] & _0796_;
  assign _0310_ = _0797_ & _1062_;
  assign _0311_ = G[52] & _0798_;
  assign _0312_ = Z[52] & _0799_;
  assign _0313_ = T[53] & _1063_;
  assign _0314_ = Z[52] & _0798_;
  assign _0315_ = G[52] & _0799_;
  assign _0316_ = _0800_ & _1064_;
  assign _0317_ = G[53] & _0801_;
  assign _0318_ = Z[53] & _0802_;
  assign _0319_ = T[54] & _1065_;
  assign _0320_ = Z[53] & _0801_;
  assign _0321_ = G[53] & _0802_;
  assign _0322_ = _0803_ & _1066_;
  assign _0323_ = G[54] & _0804_;
  assign _0324_ = Z[54] & _0805_;
  assign _0325_ = T[55] & _1067_;
  assign _0326_ = Z[54] & _0804_;
  assign _0327_ = G[54] & _0805_;
  assign _0328_ = _0806_ & _1068_;
  assign _0329_ = G[55] & _0807_;
  assign _0330_ = Z[55] & _0808_;
  assign _0331_ = T[56] & _1069_;
  assign _0332_ = Z[55] & _0807_;
  assign _0333_ = G[55] & _0808_;
  assign _0334_ = _0809_ & _1070_;
  assign _0335_ = G[56] & _0810_;
  assign _0336_ = Z[56] & _0811_;
  assign _0337_ = T[57] & _1071_;
  assign _0338_ = Z[56] & _0810_;
  assign _0339_ = G[56] & _0811_;
  assign _0340_ = _0812_ & _1072_;
  assign _0341_ = G[57] & _0813_;
  assign _0342_ = Z[57] & _0814_;
  assign _0343_ = T[58] & _1073_;
  assign _0344_ = Z[57] & _0813_;
  assign _0345_ = G[57] & _0814_;
  assign _0346_ = _0815_ & _1074_;
  assign _0347_ = G[58] & _0816_;
  assign _0348_ = Z[58] & _0817_;
  assign _0349_ = T[59] & _1075_;
  assign _0350_ = Z[58] & _0816_;
  assign _0351_ = G[58] & _0817_;
  assign _0352_ = _0818_ & _1076_;
  assign _0353_ = G[59] & _0819_;
  assign _0354_ = Z[59] & _0820_;
  assign _0355_ = T[60] & _1077_;
  assign _0356_ = Z[59] & _0819_;
  assign _0357_ = G[59] & _0820_;
  assign _0358_ = _0821_ & _1078_;
  assign _0359_ = G[60] & _0822_;
  assign _0360_ = Z[60] & _0823_;
  assign _0361_ = T[61] & _1079_;
  assign _0362_ = Z[60] & _0822_;
  assign _0363_ = G[60] & _0823_;
  assign _0364_ = _0824_ & _1080_;
  assign _0365_ = G[61] & _0825_;
  assign _0366_ = Z[61] & _0826_;
  assign _0367_ = T[62] & _1081_;
  assign _0368_ = Z[61] & _0825_;
  assign _0369_ = G[61] & _0826_;
  assign _0370_ = _0827_ & _1082_;
  assign _0371_ = G[62] & _0828_;
  assign _0372_ = Z[62] & _0829_;
  assign _0373_ = T[63] & _1083_;
  assign _0374_ = Z[62] & _0828_;
  assign _0375_ = G[62] & _0829_;
  assign _0376_ = _0830_ & _1084_;
  assign _0377_ = G[63] & _0831_;
  assign _0378_ = Z[63] & _0832_;
  assign _0379_ = T[64] & _1085_;
  assign _0380_ = Z[63] & _0831_;
  assign _0381_ = G[63] & _0832_;
  assign _0382_ = _0833_ & _1086_;
  assign _0383_ = G[64] & _0834_;
  assign _0384_ = Z[64] & _0835_;
  assign _0385_ = T[65] & _1087_;
  assign _0386_ = Z[64] & _0834_;
  assign _0387_ = G[64] & _0835_;
  assign _0388_ = _0836_ & _1088_;
  assign _0389_ = G[65] & _0837_;
  assign _0390_ = Z[65] & _0838_;
  assign _0391_ = T[66] & _1089_;
  assign _0392_ = Z[65] & _0837_;
  assign _0393_ = G[65] & _0838_;
  assign _0394_ = _0839_ & _1090_;
  assign _0395_ = G[66] & _0840_;
  assign _0396_ = Z[66] & _0841_;
  assign _0397_ = T[67] & _1091_;
  assign _0398_ = Z[66] & _0840_;
  assign _0399_ = G[66] & _0841_;
  assign _0400_ = _0842_ & _1092_;
  assign _0401_ = G[67] & _0843_;
  assign _0402_ = Z[67] & _0844_;
  assign _0403_ = T[68] & _1093_;
  assign _0404_ = Z[67] & _0843_;
  assign _0405_ = G[67] & _0844_;
  assign _0406_ = _0845_ & _1094_;
  assign _0407_ = G[68] & _0846_;
  assign _0408_ = Z[68] & _0847_;
  assign _0409_ = T[69] & _1095_;
  assign _0410_ = Z[68] & _0846_;
  assign _0411_ = G[68] & _0847_;
  assign _0412_ = _0848_ & _1096_;
  assign _0413_ = G[69] & _0849_;
  assign _0414_ = Z[69] & _0850_;
  assign _0415_ = T[70] & _1097_;
  assign _0416_ = Z[69] & _0849_;
  assign _0417_ = G[69] & _0850_;
  assign _0418_ = _0851_ & _1098_;
  assign _0419_ = G[70] & _0852_;
  assign _0420_ = Z[70] & _0853_;
  assign _0421_ = T[71] & _1099_;
  assign _0422_ = Z[70] & _0852_;
  assign _0423_ = G[70] & _0853_;
  assign _0424_ = _0854_ & _1100_;
  assign _0425_ = G[71] & _0855_;
  assign _0426_ = Z[71] & _0856_;
  assign _0427_ = T[72] & _1101_;
  assign _0428_ = Z[71] & _0855_;
  assign _0429_ = G[71] & _0856_;
  assign _0430_ = _0857_ & _1102_;
  assign _0431_ = G[72] & _0858_;
  assign _0432_ = Z[72] & _0859_;
  assign _0433_ = T[73] & _1103_;
  assign _0434_ = Z[72] & _0858_;
  assign _0435_ = G[72] & _0859_;
  assign _0436_ = _0860_ & _1104_;
  assign _0437_ = G[73] & _0861_;
  assign _0438_ = Z[73] & _0862_;
  assign _0439_ = T[74] & _1105_;
  assign _0440_ = Z[73] & _0861_;
  assign _0441_ = G[73] & _0862_;
  assign _0442_ = _0863_ & _1106_;
  assign _0443_ = G[74] & _0864_;
  assign _0444_ = Z[74] & _0865_;
  assign _0445_ = T[75] & _1107_;
  assign _0446_ = Z[74] & _0864_;
  assign _0447_ = G[74] & _0865_;
  assign _0448_ = _0866_ & _1108_;
  assign _0449_ = G[75] & _0867_;
  assign _0450_ = Z[75] & _0868_;
  assign _0451_ = T[76] & _1109_;
  assign _0452_ = Z[75] & _0867_;
  assign _0453_ = G[75] & _0868_;
  assign _0454_ = _0869_ & _1110_;
  assign _0455_ = G[76] & _0870_;
  assign _0456_ = Z[76] & _0871_;
  assign _0457_ = T[77] & _1111_;
  assign _0458_ = Z[76] & _0870_;
  assign _0459_ = G[76] & _0871_;
  assign _0460_ = _0872_ & _1112_;
  assign _0461_ = G[77] & _0873_;
  assign _0462_ = Z[77] & _0874_;
  assign _0463_ = T[78] & _1113_;
  assign _0464_ = Z[77] & _0873_;
  assign _0465_ = G[77] & _0874_;
  assign _0466_ = _0875_ & _1114_;
  assign _0467_ = G[78] & _0876_;
  assign _0468_ = Z[78] & _0877_;
  assign _0469_ = T[79] & _1115_;
  assign _0470_ = Z[78] & _0876_;
  assign _0471_ = G[78] & _0877_;
  assign _0472_ = _0878_ & _1116_;
  assign _0473_ = G[79] & _0879_;
  assign _0474_ = Z[79] & _0880_;
  assign _0475_ = T[80] & _1117_;
  assign _0476_ = Z[79] & _0879_;
  assign _0477_ = G[79] & _0880_;
  assign _0478_ = _0881_ & _1118_;
  assign _0479_ = G[80] & _0882_;
  assign _0480_ = Z[80] & _0883_;
  assign _0481_ = T[81] & _1119_;
  assign _0482_ = Z[80] & _0882_;
  assign _0483_ = G[80] & _0883_;
  assign _0484_ = _0884_ & _1120_;
  assign _0485_ = G[81] & _0885_;
  assign _0486_ = Z[81] & _0886_;
  assign _0487_ = T[82] & _1121_;
  assign _0488_ = Z[81] & _0885_;
  assign _0489_ = G[81] & _0886_;
  assign _0490_ = _0887_ & _1122_;
  assign _0491_ = G[82] & _0888_;
  assign _0492_ = Z[82] & _0889_;
  assign _0493_ = T[83] & _1123_;
  assign _0494_ = Z[82] & _0888_;
  assign _0495_ = G[82] & _0889_;
  assign _0496_ = _0890_ & _1124_;
  assign _0497_ = G[83] & _0891_;
  assign _0498_ = Z[83] & _0892_;
  assign _0499_ = T[84] & _1125_;
  assign _0500_ = Z[83] & _0891_;
  assign _0501_ = G[83] & _0892_;
  assign _0502_ = _0893_ & _1126_;
  assign _0503_ = G[84] & _0894_;
  assign _0504_ = Z[84] & _0895_;
  assign _0505_ = T[85] & _1127_;
  assign _0506_ = Z[84] & _0894_;
  assign _0507_ = G[84] & _0895_;
  assign _0508_ = _0896_ & _1128_;
  assign _0509_ = G[85] & _0897_;
  assign _0510_ = Z[85] & _0898_;
  assign _0511_ = T[86] & _1129_;
  assign _0512_ = Z[85] & _0897_;
  assign _0513_ = G[85] & _0898_;
  assign _0514_ = _0899_ & _1130_;
  assign _0515_ = G[86] & _0900_;
  assign _0516_ = Z[86] & _0901_;
  assign _0517_ = T[87] & _1131_;
  assign _0518_ = Z[86] & _0900_;
  assign _0519_ = G[86] & _0901_;
  assign _0520_ = _0902_ & _1132_;
  assign _0521_ = G[87] & _0903_;
  assign _0522_ = Z[87] & _0904_;
  assign _0523_ = T[88] & _1133_;
  assign _0524_ = Z[87] & _0903_;
  assign _0525_ = G[87] & _0904_;
  assign _0526_ = _0905_ & _1134_;
  assign _0527_ = G[88] & _0906_;
  assign _0528_ = Z[88] & _0907_;
  assign _0529_ = T[89] & _1135_;
  assign _0530_ = Z[88] & _0906_;
  assign _0531_ = G[88] & _0907_;
  assign _0532_ = _0908_ & _1136_;
  assign _0533_ = G[89] & _0909_;
  assign _0534_ = Z[89] & _0910_;
  assign _0535_ = T[90] & _1137_;
  assign _0536_ = Z[89] & _0909_;
  assign _0537_ = G[89] & _0910_;
  assign _0538_ = _0911_ & _1138_;
  assign _0539_ = G[90] & _0912_;
  assign _0540_ = Z[90] & _0913_;
  assign _0541_ = T[91] & _1139_;
  assign _0542_ = Z[90] & _0912_;
  assign _0543_ = G[90] & _0913_;
  assign _0544_ = _0914_ & _1140_;
  assign _0545_ = G[91] & _0915_;
  assign _0546_ = Z[91] & _0916_;
  assign _0547_ = T[92] & _1141_;
  assign _0548_ = Z[91] & _0915_;
  assign _0549_ = G[91] & _0916_;
  assign _0550_ = _0917_ & _1142_;
  assign _0551_ = G[92] & _0918_;
  assign _0552_ = Z[92] & _0919_;
  assign _0553_ = T[93] & _1143_;
  assign _0554_ = Z[92] & _0918_;
  assign _0555_ = G[92] & _0919_;
  assign _0556_ = _0920_ & _1144_;
  assign _0557_ = G[93] & _0921_;
  assign _0558_ = Z[93] & _0922_;
  assign _0559_ = T[94] & _1145_;
  assign _0560_ = Z[93] & _0921_;
  assign _0561_ = G[93] & _0922_;
  assign _0562_ = _0923_ & _1146_;
  assign _0563_ = G[94] & _0924_;
  assign _0564_ = Z[94] & _0925_;
  assign _0565_ = T[95] & _1147_;
  assign _0566_ = Z[94] & _0924_;
  assign _0567_ = G[94] & _0925_;
  assign _0568_ = _0926_ & _1148_;
  assign _0569_ = G[95] & _0927_;
  assign _0570_ = Z[95] & _0928_;
  assign _0571_ = T[96] & _1149_;
  assign _0572_ = Z[95] & _0927_;
  assign _0573_ = G[95] & _0928_;
  assign _0574_ = _0929_ & _1150_;
  assign _0575_ = G[96] & _0930_;
  assign _0576_ = Z[96] & _0931_;
  assign _0577_ = T[97] & _1151_;
  assign _0578_ = Z[96] & _0930_;
  assign _0579_ = G[96] & _0931_;
  assign _0580_ = _0932_ & _1152_;
  assign _0581_ = G[97] & _0933_;
  assign _0582_ = Z[97] & _0934_;
  assign _0583_ = T[98] & _1153_;
  assign _0584_ = Z[97] & _0933_;
  assign _0585_ = G[97] & _0934_;
  assign _0586_ = _0935_ & _1154_;
  assign _0587_ = G[98] & _0936_;
  assign _0588_ = Z[98] & _0937_;
  assign _0589_ = T[99] & _1155_;
  assign _0590_ = Z[98] & _0936_;
  assign _0591_ = G[98] & _0937_;
  assign _0592_ = _0938_ & _1156_;
  assign _0593_ = G[99] & _0939_;
  assign _0594_ = Z[99] & _0940_;
  assign _0595_ = T[100] & _1157_;
  assign _0596_ = Z[99] & _0939_;
  assign _0597_ = G[99] & _0940_;
  assign _0598_ = _0941_ & _1158_;
  assign _0599_ = G[100] & _0942_;
  assign _0600_ = Z[100] & _0943_;
  assign _0601_ = T[101] & _1159_;
  assign _0602_ = Z[100] & _0942_;
  assign _0603_ = G[100] & _0943_;
  assign _0604_ = _0944_ & _1160_;
  assign _0605_ = G[101] & _0945_;
  assign _0606_ = Z[101] & _0946_;
  assign _0607_ = T[102] & _1161_;
  assign _0608_ = Z[101] & _0945_;
  assign _0609_ = G[101] & _0946_;
  assign _0610_ = _0947_ & _1162_;
  assign _0611_ = G[102] & _0948_;
  assign _0612_ = Z[102] & _0949_;
  assign _0613_ = T[103] & _1163_;
  assign _0614_ = Z[102] & _0948_;
  assign _0615_ = G[102] & _0949_;
  assign _0616_ = _0950_ & _1164_;
  assign _0617_ = G[103] & _0951_;
  assign _0618_ = Z[103] & _0952_;
  assign _0619_ = T[104] & _1165_;
  assign _0620_ = Z[103] & _0951_;
  assign _0621_ = G[103] & _0952_;
  assign _0622_ = _0953_ & _1166_;
  assign _0623_ = G[104] & _0954_;
  assign _0624_ = Z[104] & _0955_;
  assign _0625_ = T[105] & _1167_;
  assign _0626_ = Z[104] & _0954_;
  assign _0627_ = G[104] & _0955_;
  assign _0628_ = _0956_ & _1168_;
  assign _0629_ = G[105] & _0957_;
  assign _0630_ = Z[105] & _0958_;
  assign _0631_ = T[106] & _1169_;
  assign _0632_ = Z[105] & _0957_;
  assign _0633_ = G[105] & _0958_;
  assign _0634_ = _0644_ & _1170_;
  assign _0635_ = ! f_out;
  assign _0636_ = ! f_out[106:43];
  assign _0637_ = ! _0003_[63:32];
  assign _0638_ = ! _0001_[31:16];
  assign _0639_ = ! _0000_[15:8];
  assign _0640_ = ! _0004_[7:4];
  assign _0641_ = ! _0002_[3:2];
  assign _0642_ = ~ in_01;
  assign _0643_ = ~ in_02;
  assign _0647_ = ~ T[2];
  assign _0645_ = ~ Z[0];
  assign _0646_ = ~ G[0];
  assign _0650_ = ~ T[3];
  assign _0648_ = ~ Z[1];
  assign _0649_ = ~ G[1];
  assign _0653_ = ~ T[4];
  assign _0651_ = ~ Z[2];
  assign _0652_ = ~ G[2];
  assign _0656_ = ~ T[5];
  assign _0654_ = ~ Z[3];
  assign _0655_ = ~ G[3];
  assign _0659_ = ~ T[6];
  assign _0657_ = ~ Z[4];
  assign _0658_ = ~ G[4];
  assign _0662_ = ~ T[7];
  assign _0660_ = ~ Z[5];
  assign _0661_ = ~ G[5];
  assign _0665_ = ~ T[8];
  assign _0663_ = ~ Z[6];
  assign _0664_ = ~ G[6];
  assign _0668_ = ~ T[9];
  assign _0666_ = ~ Z[7];
  assign _0667_ = ~ G[7];
  assign _0671_ = ~ T[10];
  assign _0669_ = ~ Z[8];
  assign _0670_ = ~ G[8];
  assign _0674_ = ~ T[11];
  assign _0672_ = ~ Z[9];
  assign _0673_ = ~ G[9];
  assign _0677_ = ~ T[12];
  assign _0675_ = ~ Z[10];
  assign _0676_ = ~ G[10];
  assign _0680_ = ~ T[13];
  assign _0678_ = ~ Z[11];
  assign _0679_ = ~ G[11];
  assign _0683_ = ~ T[14];
  assign _0681_ = ~ Z[12];
  assign _0682_ = ~ G[12];
  assign _0686_ = ~ T[15];
  assign _0684_ = ~ Z[13];
  assign _0685_ = ~ G[13];
  assign _0689_ = ~ T[16];
  assign _0687_ = ~ Z[14];
  assign _0688_ = ~ G[14];
  assign _0692_ = ~ T[17];
  assign _0690_ = ~ Z[15];
  assign _0691_ = ~ G[15];
  assign _0695_ = ~ T[18];
  assign _0693_ = ~ Z[16];
  assign _0694_ = ~ G[16];
  assign _0698_ = ~ T[19];
  assign _0696_ = ~ Z[17];
  assign _0697_ = ~ G[17];
  assign _0701_ = ~ T[20];
  assign _0699_ = ~ Z[18];
  assign _0700_ = ~ G[18];
  assign _0704_ = ~ T[21];
  assign _0702_ = ~ Z[19];
  assign _0703_ = ~ G[19];
  assign _0707_ = ~ T[22];
  assign _0705_ = ~ Z[20];
  assign _0706_ = ~ G[20];
  assign _0710_ = ~ T[23];
  assign _0708_ = ~ Z[21];
  assign _0709_ = ~ G[21];
  assign _0713_ = ~ T[24];
  assign _0711_ = ~ Z[22];
  assign _0712_ = ~ G[22];
  assign _0716_ = ~ T[25];
  assign _0714_ = ~ Z[23];
  assign _0715_ = ~ G[23];
  assign _0719_ = ~ T[26];
  assign _0717_ = ~ Z[24];
  assign _0718_ = ~ G[24];
  assign _0722_ = ~ T[27];
  assign _0720_ = ~ Z[25];
  assign _0721_ = ~ G[25];
  assign _0725_ = ~ T[28];
  assign _0723_ = ~ Z[26];
  assign _0724_ = ~ G[26];
  assign _0728_ = ~ T[29];
  assign _0726_ = ~ Z[27];
  assign _0727_ = ~ G[27];
  assign _0731_ = ~ T[30];
  assign _0729_ = ~ Z[28];
  assign _0730_ = ~ G[28];
  assign _0734_ = ~ T[31];
  assign _0732_ = ~ Z[29];
  assign _0733_ = ~ G[29];
  assign _0737_ = ~ T[32];
  assign _0735_ = ~ Z[30];
  assign _0736_ = ~ G[30];
  assign _0740_ = ~ T[33];
  assign _0738_ = ~ Z[31];
  assign _0739_ = ~ G[31];
  assign _0743_ = ~ T[34];
  assign _0741_ = ~ Z[32];
  assign _0742_ = ~ G[32];
  assign _0746_ = ~ T[35];
  assign _0744_ = ~ Z[33];
  assign _0745_ = ~ G[33];
  assign _0749_ = ~ T[36];
  assign _0747_ = ~ Z[34];
  assign _0748_ = ~ G[34];
  assign _0752_ = ~ T[37];
  assign _0750_ = ~ Z[35];
  assign _0751_ = ~ G[35];
  assign _0755_ = ~ T[38];
  assign _0753_ = ~ Z[36];
  assign _0754_ = ~ G[36];
  assign _0758_ = ~ T[39];
  assign _0756_ = ~ Z[37];
  assign _0757_ = ~ G[37];
  assign _0761_ = ~ T[40];
  assign _0759_ = ~ Z[38];
  assign _0760_ = ~ G[38];
  assign _0764_ = ~ T[41];
  assign _0762_ = ~ Z[39];
  assign _0763_ = ~ G[39];
  assign _0767_ = ~ T[42];
  assign _0765_ = ~ Z[40];
  assign _0766_ = ~ G[40];
  assign _0770_ = ~ T[43];
  assign _0768_ = ~ Z[41];
  assign _0769_ = ~ G[41];
  assign _0773_ = ~ T[44];
  assign _0771_ = ~ Z[42];
  assign _0772_ = ~ G[42];
  assign _0776_ = ~ T[45];
  assign _0774_ = ~ Z[43];
  assign _0775_ = ~ G[43];
  assign _0779_ = ~ T[46];
  assign _0777_ = ~ Z[44];
  assign _0778_ = ~ G[44];
  assign _0782_ = ~ T[47];
  assign _0780_ = ~ Z[45];
  assign _0781_ = ~ G[45];
  assign _0785_ = ~ T[48];
  assign _0783_ = ~ Z[46];
  assign _0784_ = ~ G[46];
  assign _0788_ = ~ T[49];
  assign _0786_ = ~ Z[47];
  assign _0787_ = ~ G[47];
  assign _0791_ = ~ T[50];
  assign _0789_ = ~ Z[48];
  assign _0790_ = ~ G[48];
  assign _0794_ = ~ T[51];
  assign _0792_ = ~ Z[49];
  assign _0793_ = ~ G[49];
  assign _0797_ = ~ T[52];
  assign _0795_ = ~ Z[50];
  assign _0796_ = ~ G[50];
  assign _0800_ = ~ T[53];
  assign _0798_ = ~ Z[51];
  assign _0799_ = ~ G[51];
  assign _0803_ = ~ T[54];
  assign _0801_ = ~ Z[52];
  assign _0802_ = ~ G[52];
  assign _0806_ = ~ T[55];
  assign _0804_ = ~ Z[53];
  assign _0805_ = ~ G[53];
  assign _0809_ = ~ T[56];
  assign _0807_ = ~ Z[54];
  assign _0808_ = ~ G[54];
  assign _0812_ = ~ T[57];
  assign _0810_ = ~ Z[55];
  assign _0811_ = ~ G[55];
  assign _0815_ = ~ T[58];
  assign _0813_ = ~ Z[56];
  assign _0814_ = ~ G[56];
  assign _0818_ = ~ T[59];
  assign _0816_ = ~ Z[57];
  assign _0817_ = ~ G[57];
  assign _0821_ = ~ T[60];
  assign _0819_ = ~ Z[58];
  assign _0820_ = ~ G[58];
  assign _0824_ = ~ T[61];
  assign _0822_ = ~ Z[59];
  assign _0823_ = ~ G[59];
  assign _0827_ = ~ T[62];
  assign _0825_ = ~ Z[60];
  assign _0826_ = ~ G[60];
  assign _0830_ = ~ T[63];
  assign _0828_ = ~ Z[61];
  assign _0829_ = ~ G[61];
  assign _0833_ = ~ T[64];
  assign _0831_ = ~ Z[62];
  assign _0832_ = ~ G[62];
  assign _0836_ = ~ T[65];
  assign _0834_ = ~ Z[63];
  assign _0835_ = ~ G[63];
  assign _0839_ = ~ T[66];
  assign _0837_ = ~ Z[64];
  assign _0838_ = ~ G[64];
  assign _0842_ = ~ T[67];
  assign _0840_ = ~ Z[65];
  assign _0841_ = ~ G[65];
  assign _0845_ = ~ T[68];
  assign _0843_ = ~ Z[66];
  assign _0844_ = ~ G[66];
  assign _0848_ = ~ T[69];
  assign _0846_ = ~ Z[67];
  assign _0847_ = ~ G[67];
  assign _0851_ = ~ T[70];
  assign _0849_ = ~ Z[68];
  assign _0850_ = ~ G[68];
  assign _0854_ = ~ T[71];
  assign _0852_ = ~ Z[69];
  assign _0853_ = ~ G[69];
  assign _0857_ = ~ T[72];
  assign _0855_ = ~ Z[70];
  assign _0856_ = ~ G[70];
  assign _0860_ = ~ T[73];
  assign _0858_ = ~ Z[71];
  assign _0859_ = ~ G[71];
  assign _0863_ = ~ T[74];
  assign _0861_ = ~ Z[72];
  assign _0862_ = ~ G[72];
  assign _0866_ = ~ T[75];
  assign _0864_ = ~ Z[73];
  assign _0865_ = ~ G[73];
  assign _0869_ = ~ T[76];
  assign _0867_ = ~ Z[74];
  assign _0868_ = ~ G[74];
  assign _0872_ = ~ T[77];
  assign _0870_ = ~ Z[75];
  assign _0871_ = ~ G[75];
  assign _0875_ = ~ T[78];
  assign _0873_ = ~ Z[76];
  assign _0874_ = ~ G[76];
  assign _0878_ = ~ T[79];
  assign _0876_ = ~ Z[77];
  assign _0877_ = ~ G[77];
  assign _0881_ = ~ T[80];
  assign _0879_ = ~ Z[78];
  assign _0880_ = ~ G[78];
  assign _0884_ = ~ T[81];
  assign _0882_ = ~ Z[79];
  assign _0883_ = ~ G[79];
  assign _0887_ = ~ T[82];
  assign _0885_ = ~ Z[80];
  assign _0886_ = ~ G[80];
  assign _0890_ = ~ T[83];
  assign _0888_ = ~ Z[81];
  assign _0889_ = ~ G[81];
  assign _0893_ = ~ T[84];
  assign _0891_ = ~ Z[82];
  assign _0892_ = ~ G[82];
  assign _0896_ = ~ T[85];
  assign _0894_ = ~ Z[83];
  assign _0895_ = ~ G[83];
  assign _0899_ = ~ T[86];
  assign _0897_ = ~ Z[84];
  assign _0898_ = ~ G[84];
  assign _0902_ = ~ T[87];
  assign _0900_ = ~ Z[85];
  assign _0901_ = ~ G[85];
  assign _0905_ = ~ T[88];
  assign _0903_ = ~ Z[86];
  assign _0904_ = ~ G[86];
  assign _0908_ = ~ T[89];
  assign _0906_ = ~ Z[87];
  assign _0907_ = ~ G[87];
  assign _0911_ = ~ T[90];
  assign _0909_ = ~ Z[88];
  assign _0910_ = ~ G[88];
  assign _0914_ = ~ T[91];
  assign _0912_ = ~ Z[89];
  assign _0913_ = ~ G[89];
  assign _0917_ = ~ T[92];
  assign _0915_ = ~ Z[90];
  assign _0916_ = ~ G[90];
  assign _0920_ = ~ T[93];
  assign _0918_ = ~ Z[91];
  assign _0919_ = ~ G[91];
  assign _0923_ = ~ T[94];
  assign _0921_ = ~ Z[92];
  assign _0922_ = ~ G[92];
  assign _0926_ = ~ T[95];
  assign _0924_ = ~ Z[93];
  assign _0925_ = ~ G[93];
  assign _0929_ = ~ T[96];
  assign _0927_ = ~ Z[94];
  assign _0928_ = ~ G[94];
  assign _0932_ = ~ T[97];
  assign _0930_ = ~ Z[95];
  assign _0931_ = ~ G[95];
  assign _0935_ = ~ T[98];
  assign _0933_ = ~ Z[96];
  assign _0934_ = ~ G[96];
  assign _0938_ = ~ T[99];
  assign _0936_ = ~ Z[97];
  assign _0937_ = ~ G[97];
  assign _0941_ = ~ T[100];
  assign _0939_ = ~ Z[98];
  assign _0940_ = ~ G[98];
  assign _0944_ = ~ T[101];
  assign _0942_ = ~ Z[99];
  assign _0943_ = ~ G[99];
  assign _0947_ = ~ T[102];
  assign _0945_ = ~ Z[100];
  assign _0946_ = ~ G[100];
  assign _0950_ = ~ T[103];
  assign _0948_ = ~ Z[101];
  assign _0949_ = ~ G[101];
  assign _0953_ = ~ T[104];
  assign _0951_ = ~ Z[102];
  assign _0952_ = ~ G[102];
  assign _0956_ = ~ T[105];
  assign _0954_ = ~ Z[103];
  assign _0955_ = ~ G[103];
  assign _0644_ = ~ T[106];
  assign _0957_ = ~ Z[104];
  assign _0958_ = ~ G[104];
  assign _0959_ = ~ _0002_[1];
  assign _0960_ = ~ _0002_[3];
  assign _0961_ = _0005_ | _0006_;
  assign _0962_ = _0008_ | _0009_;
  assign f_out[1] = _0007_ | _0010_;
  assign _0963_ = _0011_ | _0012_;
  assign _0964_ = _0014_ | _0015_;
  assign f_out[2] = _0013_ | _0016_;
  assign _0965_ = _0017_ | _0018_;
  assign _0966_ = _0020_ | _0021_;
  assign f_out[3] = _0019_ | _0022_;
  assign _0967_ = _0023_ | _0024_;
  assign _0968_ = _0026_ | _0027_;
  assign f_out[4] = _0025_ | _0028_;
  assign _0969_ = _0029_ | _0030_;
  assign _0970_ = _0032_ | _0033_;
  assign f_out[5] = _0031_ | _0034_;
  assign _0971_ = _0035_ | _0036_;
  assign _0972_ = _0038_ | _0039_;
  assign f_out[6] = _0037_ | _0040_;
  assign _0973_ = _0041_ | _0042_;
  assign _0974_ = _0044_ | _0045_;
  assign f_out[7] = _0043_ | _0046_;
  assign _0975_ = _0047_ | _0048_;
  assign _0976_ = _0050_ | _0051_;
  assign f_out[8] = _0049_ | _0052_;
  assign _0977_ = _0053_ | _0054_;
  assign _0978_ = _0056_ | _0057_;
  assign f_out[9] = _0055_ | _0058_;
  assign _0979_ = _0059_ | _0060_;
  assign _0980_ = _0062_ | _0063_;
  assign f_out[10] = _0061_ | _0064_;
  assign _0981_ = _0065_ | _0066_;
  assign _0982_ = _0068_ | _0069_;
  assign f_out[11] = _0067_ | _0070_;
  assign _0983_ = _0071_ | _0072_;
  assign _0984_ = _0074_ | _0075_;
  assign f_out[12] = _0073_ | _0076_;
  assign _0985_ = _0077_ | _0078_;
  assign _0986_ = _0080_ | _0081_;
  assign f_out[13] = _0079_ | _0082_;
  assign _0987_ = _0083_ | _0084_;
  assign _0988_ = _0086_ | _0087_;
  assign f_out[14] = _0085_ | _0088_;
  assign _0989_ = _0089_ | _0090_;
  assign _0990_ = _0092_ | _0093_;
  assign f_out[15] = _0091_ | _0094_;
  assign _0991_ = _0095_ | _0096_;
  assign _0992_ = _0098_ | _0099_;
  assign f_out[16] = _0097_ | _0100_;
  assign _0993_ = _0101_ | _0102_;
  assign _0994_ = _0104_ | _0105_;
  assign f_out[17] = _0103_ | _0106_;
  assign _0995_ = _0107_ | _0108_;
  assign _0996_ = _0110_ | _0111_;
  assign f_out[18] = _0109_ | _0112_;
  assign _0997_ = _0113_ | _0114_;
  assign _0998_ = _0116_ | _0117_;
  assign f_out[19] = _0115_ | _0118_;
  assign _0999_ = _0119_ | _0120_;
  assign _1000_ = _0122_ | _0123_;
  assign f_out[20] = _0121_ | _0124_;
  assign _1001_ = _0125_ | _0126_;
  assign _1002_ = _0128_ | _0129_;
  assign f_out[21] = _0127_ | _0130_;
  assign _1003_ = _0131_ | _0132_;
  assign _1004_ = _0134_ | _0135_;
  assign f_out[22] = _0133_ | _0136_;
  assign _1005_ = _0137_ | _0138_;
  assign _1006_ = _0140_ | _0141_;
  assign f_out[23] = _0139_ | _0142_;
  assign _1007_ = _0143_ | _0144_;
  assign _1008_ = _0146_ | _0147_;
  assign f_out[24] = _0145_ | _0148_;
  assign _1009_ = _0149_ | _0150_;
  assign _1010_ = _0152_ | _0153_;
  assign f_out[25] = _0151_ | _0154_;
  assign _1011_ = _0155_ | _0156_;
  assign _1012_ = _0158_ | _0159_;
  assign f_out[26] = _0157_ | _0160_;
  assign _1013_ = _0161_ | _0162_;
  assign _1014_ = _0164_ | _0165_;
  assign f_out[27] = _0163_ | _0166_;
  assign _1015_ = _0167_ | _0168_;
  assign _1016_ = _0170_ | _0171_;
  assign f_out[28] = _0169_ | _0172_;
  assign _1017_ = _0173_ | _0174_;
  assign _1018_ = _0176_ | _0177_;
  assign f_out[29] = _0175_ | _0178_;
  assign _1019_ = _0179_ | _0180_;
  assign _1020_ = _0182_ | _0183_;
  assign f_out[30] = _0181_ | _0184_;
  assign _1021_ = _0185_ | _0186_;
  assign _1022_ = _0188_ | _0189_;
  assign f_out[31] = _0187_ | _0190_;
  assign _1023_ = _0191_ | _0192_;
  assign _1024_ = _0194_ | _0195_;
  assign f_out[32] = _0193_ | _0196_;
  assign _1025_ = _0197_ | _0198_;
  assign _1026_ = _0200_ | _0201_;
  assign f_out[33] = _0199_ | _0202_;
  assign _1027_ = _0203_ | _0204_;
  assign _1028_ = _0206_ | _0207_;
  assign f_out[34] = _0205_ | _0208_;
  assign _1029_ = _0209_ | _0210_;
  assign _1030_ = _0212_ | _0213_;
  assign f_out[35] = _0211_ | _0214_;
  assign _1031_ = _0215_ | _0216_;
  assign _1032_ = _0218_ | _0219_;
  assign f_out[36] = _0217_ | _0220_;
  assign _1033_ = _0221_ | _0222_;
  assign _1034_ = _0224_ | _0225_;
  assign f_out[37] = _0223_ | _0226_;
  assign _1035_ = _0227_ | _0228_;
  assign _1036_ = _0230_ | _0231_;
  assign f_out[38] = _0229_ | _0232_;
  assign _1037_ = _0233_ | _0234_;
  assign _1038_ = _0236_ | _0237_;
  assign f_out[39] = _0235_ | _0238_;
  assign _1039_ = _0239_ | _0240_;
  assign _1040_ = _0242_ | _0243_;
  assign f_out[40] = _0241_ | _0244_;
  assign _1041_ = _0245_ | _0246_;
  assign _1042_ = _0248_ | _0249_;
  assign f_out[41] = _0247_ | _0250_;
  assign _1043_ = _0251_ | _0252_;
  assign _1044_ = _0254_ | _0255_;
  assign f_out[42] = _0253_ | _0256_;
  assign _1045_ = _0257_ | _0258_;
  assign _1046_ = _0260_ | _0261_;
  assign f_out[43] = _0259_ | _0262_;
  assign _1047_ = _0263_ | _0264_;
  assign _1048_ = _0266_ | _0267_;
  assign f_out[44] = _0265_ | _0268_;
  assign _1049_ = _0269_ | _0270_;
  assign _1050_ = _0272_ | _0273_;
  assign f_out[45] = _0271_ | _0274_;
  assign _1051_ = _0275_ | _0276_;
  assign _1052_ = _0278_ | _0279_;
  assign f_out[46] = _0277_ | _0280_;
  assign _1053_ = _0281_ | _0282_;
  assign _1054_ = _0284_ | _0285_;
  assign f_out[47] = _0283_ | _0286_;
  assign _1055_ = _0287_ | _0288_;
  assign _1056_ = _0290_ | _0291_;
  assign f_out[48] = _0289_ | _0292_;
  assign _1057_ = _0293_ | _0294_;
  assign _1058_ = _0296_ | _0297_;
  assign f_out[49] = _0295_ | _0298_;
  assign _1059_ = _0299_ | _0300_;
  assign _1060_ = _0302_ | _0303_;
  assign f_out[50] = _0301_ | _0304_;
  assign _1061_ = _0305_ | _0306_;
  assign _1062_ = _0308_ | _0309_;
  assign f_out[51] = _0307_ | _0310_;
  assign _1063_ = _0311_ | _0312_;
  assign _1064_ = _0314_ | _0315_;
  assign f_out[52] = _0313_ | _0316_;
  assign _1065_ = _0317_ | _0318_;
  assign _1066_ = _0320_ | _0321_;
  assign f_out[53] = _0319_ | _0322_;
  assign _1067_ = _0323_ | _0324_;
  assign _1068_ = _0326_ | _0327_;
  assign f_out[54] = _0325_ | _0328_;
  assign _1069_ = _0329_ | _0330_;
  assign _1070_ = _0332_ | _0333_;
  assign f_out[55] = _0331_ | _0334_;
  assign _1071_ = _0335_ | _0336_;
  assign _1072_ = _0338_ | _0339_;
  assign f_out[56] = _0337_ | _0340_;
  assign _1073_ = _0341_ | _0342_;
  assign _1074_ = _0344_ | _0345_;
  assign f_out[57] = _0343_ | _0346_;
  assign _1075_ = _0347_ | _0348_;
  assign _1076_ = _0350_ | _0351_;
  assign f_out[58] = _0349_ | _0352_;
  assign _1077_ = _0353_ | _0354_;
  assign _1078_ = _0356_ | _0357_;
  assign f_out[59] = _0355_ | _0358_;
  assign _1079_ = _0359_ | _0360_;
  assign _1080_ = _0362_ | _0363_;
  assign f_out[60] = _0361_ | _0364_;
  assign _1081_ = _0365_ | _0366_;
  assign _1082_ = _0368_ | _0369_;
  assign f_out[61] = _0367_ | _0370_;
  assign _1083_ = _0371_ | _0372_;
  assign _1084_ = _0374_ | _0375_;
  assign f_out[62] = _0373_ | _0376_;
  assign _1085_ = _0377_ | _0378_;
  assign _1086_ = _0380_ | _0381_;
  assign f_out[63] = _0379_ | _0382_;
  assign _1087_ = _0383_ | _0384_;
  assign _1088_ = _0386_ | _0387_;
  assign f_out[64] = _0385_ | _0388_;
  assign _1089_ = _0389_ | _0390_;
  assign _1090_ = _0392_ | _0393_;
  assign f_out[65] = _0391_ | _0394_;
  assign _1091_ = _0395_ | _0396_;
  assign _1092_ = _0398_ | _0399_;
  assign f_out[66] = _0397_ | _0400_;
  assign _1093_ = _0401_ | _0402_;
  assign _1094_ = _0404_ | _0405_;
  assign f_out[67] = _0403_ | _0406_;
  assign _1095_ = _0407_ | _0408_;
  assign _1096_ = _0410_ | _0411_;
  assign f_out[68] = _0409_ | _0412_;
  assign _1097_ = _0413_ | _0414_;
  assign _1098_ = _0416_ | _0417_;
  assign f_out[69] = _0415_ | _0418_;
  assign _1099_ = _0419_ | _0420_;
  assign _1100_ = _0422_ | _0423_;
  assign f_out[70] = _0421_ | _0424_;
  assign _1101_ = _0425_ | _0426_;
  assign _1102_ = _0428_ | _0429_;
  assign f_out[71] = _0427_ | _0430_;
  assign _1103_ = _0431_ | _0432_;
  assign _1104_ = _0434_ | _0435_;
  assign f_out[72] = _0433_ | _0436_;
  assign _1105_ = _0437_ | _0438_;
  assign _1106_ = _0440_ | _0441_;
  assign f_out[73] = _0439_ | _0442_;
  assign _1107_ = _0443_ | _0444_;
  assign _1108_ = _0446_ | _0447_;
  assign f_out[74] = _0445_ | _0448_;
  assign _1109_ = _0449_ | _0450_;
  assign _1110_ = _0452_ | _0453_;
  assign f_out[75] = _0451_ | _0454_;
  assign _1111_ = _0455_ | _0456_;
  assign _1112_ = _0458_ | _0459_;
  assign f_out[76] = _0457_ | _0460_;
  assign _1113_ = _0461_ | _0462_;
  assign _1114_ = _0464_ | _0465_;
  assign f_out[77] = _0463_ | _0466_;
  assign _1115_ = _0467_ | _0468_;
  assign _1116_ = _0470_ | _0471_;
  assign f_out[78] = _0469_ | _0472_;
  assign _1117_ = _0473_ | _0474_;
  assign _1118_ = _0476_ | _0477_;
  assign f_out[79] = _0475_ | _0478_;
  assign _1119_ = _0479_ | _0480_;
  assign _1120_ = _0482_ | _0483_;
  assign f_out[80] = _0481_ | _0484_;
  assign _1121_ = _0485_ | _0486_;
  assign _1122_ = _0488_ | _0489_;
  assign f_out[81] = _0487_ | _0490_;
  assign _1123_ = _0491_ | _0492_;
  assign _1124_ = _0494_ | _0495_;
  assign f_out[82] = _0493_ | _0496_;
  assign _1125_ = _0497_ | _0498_;
  assign _1126_ = _0500_ | _0501_;
  assign f_out[83] = _0499_ | _0502_;
  assign _1127_ = _0503_ | _0504_;
  assign _1128_ = _0506_ | _0507_;
  assign f_out[84] = _0505_ | _0508_;
  assign _1129_ = _0509_ | _0510_;
  assign _1130_ = _0512_ | _0513_;
  assign f_out[85] = _0511_ | _0514_;
  assign _1131_ = _0515_ | _0516_;
  assign _1132_ = _0518_ | _0519_;
  assign f_out[86] = _0517_ | _0520_;
  assign _1133_ = _0521_ | _0522_;
  assign _1134_ = _0524_ | _0525_;
  assign f_out[87] = _0523_ | _0526_;
  assign _1135_ = _0527_ | _0528_;
  assign _1136_ = _0530_ | _0531_;
  assign f_out[88] = _0529_ | _0532_;
  assign _1137_ = _0533_ | _0534_;
  assign _1138_ = _0536_ | _0537_;
  assign f_out[89] = _0535_ | _0538_;
  assign _1139_ = _0539_ | _0540_;
  assign _1140_ = _0542_ | _0543_;
  assign f_out[90] = _0541_ | _0544_;
  assign _1141_ = _0545_ | _0546_;
  assign _1142_ = _0548_ | _0549_;
  assign f_out[91] = _0547_ | _0550_;
  assign _1143_ = _0551_ | _0552_;
  assign _1144_ = _0554_ | _0555_;
  assign f_out[92] = _0553_ | _0556_;
  assign _1145_ = _0557_ | _0558_;
  assign _1146_ = _0560_ | _0561_;
  assign f_out[93] = _0559_ | _0562_;
  assign _1147_ = _0563_ | _0564_;
  assign _1148_ = _0566_ | _0567_;
  assign f_out[94] = _0565_ | _0568_;
  assign _1149_ = _0569_ | _0570_;
  assign _1150_ = _0572_ | _0573_;
  assign f_out[95] = _0571_ | _0574_;
  assign _1151_ = _0575_ | _0576_;
  assign _1152_ = _0578_ | _0579_;
  assign f_out[96] = _0577_ | _0580_;
  assign _1153_ = _0581_ | _0582_;
  assign _1154_ = _0584_ | _0585_;
  assign f_out[97] = _0583_ | _0586_;
  assign _1155_ = _0587_ | _0588_;
  assign _1156_ = _0590_ | _0591_;
  assign f_out[98] = _0589_ | _0592_;
  assign _1157_ = _0593_ | _0594_;
  assign _1158_ = _0596_ | _0597_;
  assign f_out[99] = _0595_ | _0598_;
  assign _1159_ = _0599_ | _0600_;
  assign _1160_ = _0602_ | _0603_;
  assign f_out[100] = _0601_ | _0604_;
  assign _1161_ = _0605_ | _0606_;
  assign _1162_ = _0608_ | _0609_;
  assign f_out[101] = _0607_ | _0610_;
  assign _1163_ = _0611_ | _0612_;
  assign _1164_ = _0614_ | _0615_;
  assign f_out[102] = _0613_ | _0616_;
  assign _1165_ = _0617_ | _0618_;
  assign _1166_ = _0620_ | _0621_;
  assign f_out[103] = _0619_ | _0622_;
  assign _1167_ = _0623_ | _0624_;
  assign _1168_ = _0626_ | _0627_;
  assign f_out[104] = _0625_ | _0628_;
  assign _1169_ = _0629_ | _0630_;
  assign _1170_ = _0632_ | _0633_;
  assign f_out[105] = _0631_ | _0634_;
  assign zero_cnt[1] = _0635_ ? 1'h1 : _0641_;
  assign zero_cnt[0] = _0635_ ? 1'h1 : _1171_;
  assign zero_cnt[2] = _0635_ ? 1'h0 : _0640_;
  assign zero_cnt[3] = _0635_ ? 1'h1 : _0639_;
  assign zero_cnt[4] = _0635_ ? 1'h0 : _0638_;
  assign zero_cnt[5] = _0635_ ? 1'h1 : _0637_;
  assign zero_cnt[6] = _0635_ ? 1'h1 : _0636_;
  assign invalid = _0635_ ? 1'h1 : 1'h0;
  assign _0003_ = _0636_ ? { f_out[42:0], 21'h000000 } : f_out[106:43];
  assign _0001_ = _0637_ ? _0003_[31:0] : _0003_[63:32];
  assign _0000_ = _0638_ ? _0001_[15:0] : _0001_[31:16];
  assign _0004_ = _0639_ ? _0000_[7:0] : _0000_[15:8];
  assign _0002_ = _0640_ ? _0004_[3:0] : _0004_[7:4];
  assign _1171_ = _0641_ ? _0959_ : _0960_;
  assign T = in_01 ^ in_02;
endmodule

module \$paramod\mul_array\WIDTH=13 (i_man_A00, i_man_A01, i_man_A02, i_man_A03, i_man_A04, i_man_A05, i_man_A06, i_man_A07, i_man_A08, i_man_A09, i_man_A10, i_man_A11, i_man_A12, i_man_A13, i_man_A14, i_man_A15, i_man_B00, i_man_B01, i_man_B02, i_man_B03, i_man_B04, i_man_B05, i_man_B06, i_man_B07, i_man_B08, i_man_B09, i_man_B10, i_man_B11, i_man_B12, i_man_B13, i_man_B14, i_man_B15, oman_AB00, oman_AB01, oman_AB02, oman_AB03, oman_AB04, oman_AB05, oman_AB06, oman_AB07, oman_AB08, oman_AB09, oman_AB10, oman_AB11, oman_AB12, oman_AB13, oman_AB14, oman_AB15);
  input [12:0] i_man_A00;
  input [12:0] i_man_A01;
  input [12:0] i_man_A02;
  input [12:0] i_man_A03;
  input [12:0] i_man_A04;
  input [12:0] i_man_A05;
  input [12:0] i_man_A06;
  input [12:0] i_man_A07;
  input [12:0] i_man_A08;
  input [12:0] i_man_A09;
  input [12:0] i_man_A10;
  input [12:0] i_man_A11;
  input [12:0] i_man_A12;
  input [12:0] i_man_A13;
  input [12:0] i_man_A14;
  input [12:0] i_man_A15;
  input [12:0] i_man_B00;
  input [12:0] i_man_B01;
  input [12:0] i_man_B02;
  input [12:0] i_man_B03;
  input [12:0] i_man_B04;
  input [12:0] i_man_B05;
  input [12:0] i_man_B06;
  input [12:0] i_man_B07;
  input [12:0] i_man_B08;
  input [12:0] i_man_B09;
  input [12:0] i_man_B10;
  input [12:0] i_man_B11;
  input [12:0] i_man_B12;
  input [12:0] i_man_B13;
  input [12:0] i_man_B14;
  input [12:0] i_man_B15;
  output [25:0] oman_AB00;
  output [25:0] oman_AB01;
  output [25:0] oman_AB02;
  output [25:0] oman_AB03;
  output [25:0] oman_AB04;
  output [25:0] oman_AB05;
  output [25:0] oman_AB06;
  output [25:0] oman_AB07;
  output [25:0] oman_AB08;
  output [25:0] oman_AB09;
  output [25:0] oman_AB10;
  output [25:0] oman_AB11;
  output [25:0] oman_AB12;
  output [25:0] oman_AB13;
  output [25:0] oman_AB14;
  output [25:0] oman_AB15;
  pe_booth_13w u_booth00 (
    .a(i_man_A00),
    .b(i_man_B00),
    .r(oman_AB00)
  );
  pe_booth_13w u_booth01 (
    .a(i_man_A01),
    .b(i_man_B01),
    .r(oman_AB01)
  );
  pe_booth_13w u_booth02 (
    .a(i_man_A02),
    .b(i_man_B02),
    .r(oman_AB02)
  );
  pe_booth_13w u_booth03 (
    .a(i_man_A03),
    .b(i_man_B03),
    .r(oman_AB03)
  );
  pe_booth_13w u_booth04 (
    .a(i_man_A04),
    .b(i_man_B04),
    .r(oman_AB04)
  );
  pe_booth_13w u_booth05 (
    .a(i_man_A05),
    .b(i_man_B05),
    .r(oman_AB05)
  );
  pe_booth_13w u_booth06 (
    .a(i_man_A06),
    .b(i_man_B06),
    .r(oman_AB06)
  );
  pe_booth_13w u_booth07 (
    .a(i_man_A07),
    .b(i_man_B07),
    .r(oman_AB07)
  );
  pe_booth_13w u_booth08 (
    .a(i_man_A08),
    .b(i_man_B08),
    .r(oman_AB08)
  );
  pe_booth_13w u_booth09 (
    .a(i_man_A09),
    .b(i_man_B09),
    .r(oman_AB09)
  );
  pe_booth_13w u_booth10 (
    .a(i_man_A10),
    .b(i_man_B10),
    .r(oman_AB10)
  );
  pe_booth_13w u_booth11 (
    .a(i_man_A11),
    .b(i_man_B11),
    .r(oman_AB11)
  );
  pe_booth_13w u_booth12 (
    .a(i_man_A12),
    .b(i_man_B12),
    .r(oman_AB12)
  );
  pe_booth_13w u_booth13 (
    .a(i_man_A13),
    .b(i_man_B13),
    .r(oman_AB13)
  );
  pe_booth_13w u_booth14 (
    .a(i_man_A14),
    .b(i_man_B14),
    .r(oman_AB14)
  );
  pe_booth_13w u_booth15 (
    .a(i_man_A15),
    .b(i_man_B15),
    .r(oman_AB15)
  );
endmodule

module \$paramod\pe_CSA4_2\Width=55 (a, b, c, d, sum, carry, carry_out);
  wire _0_;
  input [54:0] a;
  wire a0_xor_b0;
  input [54:0] b;
  input [54:0] c;
  wire c0_xor_d0;
  wire [54:0] c_out;
  output [54:0] carry;
  output carry_out;
  input [54:0] d;
  output [54:0] sum;
  assign carry[0] = a[0] & _0_;
  assign _0_ = ~ sum[0];
  assign c_out[0] = c0_xor_d0 ? b[0] : d[0];
  assign a0_xor_b0 = a[0] ^ b[0];
  assign c0_xor_d0 = c[0] ^ d[0];
  assign sum[0] = a0_xor_b0 ^ c0_xor_d0;
  CSA4_2_UNIT \CSA4_2_unit[0].U_CSA4_2_UNIT  (
    .a(a[1]),
    .b(b[1]),
    .c(c[1]),
    .c_in(c_out[0]),
    .c_out(c_out[1]),
    .carry(carry[1]),
    .d(d[1]),
    .sum(sum[1])
  );
  CSA4_2_UNIT \CSA4_2_unit[10].U_CSA4_2_UNIT  (
    .a(a[11]),
    .b(b[11]),
    .c(c[11]),
    .c_in(c_out[10]),
    .c_out(c_out[11]),
    .carry(carry[11]),
    .d(d[11]),
    .sum(sum[11])
  );
  CSA4_2_UNIT \CSA4_2_unit[11].U_CSA4_2_UNIT  (
    .a(a[12]),
    .b(b[12]),
    .c(c[12]),
    .c_in(c_out[11]),
    .c_out(c_out[12]),
    .carry(carry[12]),
    .d(d[12]),
    .sum(sum[12])
  );
  CSA4_2_UNIT \CSA4_2_unit[12].U_CSA4_2_UNIT  (
    .a(a[13]),
    .b(b[13]),
    .c(c[13]),
    .c_in(c_out[12]),
    .c_out(c_out[13]),
    .carry(carry[13]),
    .d(d[13]),
    .sum(sum[13])
  );
  CSA4_2_UNIT \CSA4_2_unit[13].U_CSA4_2_UNIT  (
    .a(a[14]),
    .b(b[14]),
    .c(c[14]),
    .c_in(c_out[13]),
    .c_out(c_out[14]),
    .carry(carry[14]),
    .d(d[14]),
    .sum(sum[14])
  );
  CSA4_2_UNIT \CSA4_2_unit[14].U_CSA4_2_UNIT  (
    .a(a[15]),
    .b(b[15]),
    .c(c[15]),
    .c_in(c_out[14]),
    .c_out(c_out[15]),
    .carry(carry[15]),
    .d(d[15]),
    .sum(sum[15])
  );
  CSA4_2_UNIT \CSA4_2_unit[15].U_CSA4_2_UNIT  (
    .a(a[16]),
    .b(b[16]),
    .c(c[16]),
    .c_in(c_out[15]),
    .c_out(c_out[16]),
    .carry(carry[16]),
    .d(d[16]),
    .sum(sum[16])
  );
  CSA4_2_UNIT \CSA4_2_unit[16].U_CSA4_2_UNIT  (
    .a(a[17]),
    .b(b[17]),
    .c(c[17]),
    .c_in(c_out[16]),
    .c_out(c_out[17]),
    .carry(carry[17]),
    .d(d[17]),
    .sum(sum[17])
  );
  CSA4_2_UNIT \CSA4_2_unit[17].U_CSA4_2_UNIT  (
    .a(a[18]),
    .b(b[18]),
    .c(c[18]),
    .c_in(c_out[17]),
    .c_out(c_out[18]),
    .carry(carry[18]),
    .d(d[18]),
    .sum(sum[18])
  );
  CSA4_2_UNIT \CSA4_2_unit[18].U_CSA4_2_UNIT  (
    .a(a[19]),
    .b(b[19]),
    .c(c[19]),
    .c_in(c_out[18]),
    .c_out(c_out[19]),
    .carry(carry[19]),
    .d(d[19]),
    .sum(sum[19])
  );
  CSA4_2_UNIT \CSA4_2_unit[19].U_CSA4_2_UNIT  (
    .a(a[20]),
    .b(b[20]),
    .c(c[20]),
    .c_in(c_out[19]),
    .c_out(c_out[20]),
    .carry(carry[20]),
    .d(d[20]),
    .sum(sum[20])
  );
  CSA4_2_UNIT \CSA4_2_unit[1].U_CSA4_2_UNIT  (
    .a(a[2]),
    .b(b[2]),
    .c(c[2]),
    .c_in(c_out[1]),
    .c_out(c_out[2]),
    .carry(carry[2]),
    .d(d[2]),
    .sum(sum[2])
  );
  CSA4_2_UNIT \CSA4_2_unit[20].U_CSA4_2_UNIT  (
    .a(a[21]),
    .b(b[21]),
    .c(c[21]),
    .c_in(c_out[20]),
    .c_out(c_out[21]),
    .carry(carry[21]),
    .d(d[21]),
    .sum(sum[21])
  );
  CSA4_2_UNIT \CSA4_2_unit[21].U_CSA4_2_UNIT  (
    .a(a[22]),
    .b(b[22]),
    .c(c[22]),
    .c_in(c_out[21]),
    .c_out(c_out[22]),
    .carry(carry[22]),
    .d(d[22]),
    .sum(sum[22])
  );
  CSA4_2_UNIT \CSA4_2_unit[22].U_CSA4_2_UNIT  (
    .a(a[23]),
    .b(b[23]),
    .c(c[23]),
    .c_in(c_out[22]),
    .c_out(c_out[23]),
    .carry(carry[23]),
    .d(d[23]),
    .sum(sum[23])
  );
  CSA4_2_UNIT \CSA4_2_unit[23].U_CSA4_2_UNIT  (
    .a(a[24]),
    .b(b[24]),
    .c(c[24]),
    .c_in(c_out[23]),
    .c_out(c_out[24]),
    .carry(carry[24]),
    .d(d[24]),
    .sum(sum[24])
  );
  CSA4_2_UNIT \CSA4_2_unit[24].U_CSA4_2_UNIT  (
    .a(a[25]),
    .b(b[25]),
    .c(c[25]),
    .c_in(c_out[24]),
    .c_out(c_out[25]),
    .carry(carry[25]),
    .d(d[25]),
    .sum(sum[25])
  );
  CSA4_2_UNIT \CSA4_2_unit[25].U_CSA4_2_UNIT  (
    .a(a[26]),
    .b(b[26]),
    .c(c[26]),
    .c_in(c_out[25]),
    .c_out(c_out[26]),
    .carry(carry[26]),
    .d(d[26]),
    .sum(sum[26])
  );
  CSA4_2_UNIT \CSA4_2_unit[26].U_CSA4_2_UNIT  (
    .a(a[27]),
    .b(b[27]),
    .c(c[27]),
    .c_in(c_out[26]),
    .c_out(c_out[27]),
    .carry(carry[27]),
    .d(d[27]),
    .sum(sum[27])
  );
  CSA4_2_UNIT \CSA4_2_unit[27].U_CSA4_2_UNIT  (
    .a(a[28]),
    .b(b[28]),
    .c(c[28]),
    .c_in(c_out[27]),
    .c_out(c_out[28]),
    .carry(carry[28]),
    .d(d[28]),
    .sum(sum[28])
  );
  CSA4_2_UNIT \CSA4_2_unit[28].U_CSA4_2_UNIT  (
    .a(a[29]),
    .b(b[29]),
    .c(c[29]),
    .c_in(c_out[28]),
    .c_out(c_out[29]),
    .carry(carry[29]),
    .d(d[29]),
    .sum(sum[29])
  );
  CSA4_2_UNIT \CSA4_2_unit[29].U_CSA4_2_UNIT  (
    .a(a[30]),
    .b(b[30]),
    .c(c[30]),
    .c_in(c_out[29]),
    .c_out(c_out[30]),
    .carry(carry[30]),
    .d(d[30]),
    .sum(sum[30])
  );
  CSA4_2_UNIT \CSA4_2_unit[2].U_CSA4_2_UNIT  (
    .a(a[3]),
    .b(b[3]),
    .c(c[3]),
    .c_in(c_out[2]),
    .c_out(c_out[3]),
    .carry(carry[3]),
    .d(d[3]),
    .sum(sum[3])
  );
  CSA4_2_UNIT \CSA4_2_unit[30].U_CSA4_2_UNIT  (
    .a(a[31]),
    .b(b[31]),
    .c(c[31]),
    .c_in(c_out[30]),
    .c_out(c_out[31]),
    .carry(carry[31]),
    .d(d[31]),
    .sum(sum[31])
  );
  CSA4_2_UNIT \CSA4_2_unit[31].U_CSA4_2_UNIT  (
    .a(a[32]),
    .b(b[32]),
    .c(c[32]),
    .c_in(c_out[31]),
    .c_out(c_out[32]),
    .carry(carry[32]),
    .d(d[32]),
    .sum(sum[32])
  );
  CSA4_2_UNIT \CSA4_2_unit[32].U_CSA4_2_UNIT  (
    .a(a[33]),
    .b(b[33]),
    .c(c[33]),
    .c_in(c_out[32]),
    .c_out(c_out[33]),
    .carry(carry[33]),
    .d(d[33]),
    .sum(sum[33])
  );
  CSA4_2_UNIT \CSA4_2_unit[33].U_CSA4_2_UNIT  (
    .a(a[34]),
    .b(b[34]),
    .c(c[34]),
    .c_in(c_out[33]),
    .c_out(c_out[34]),
    .carry(carry[34]),
    .d(d[34]),
    .sum(sum[34])
  );
  CSA4_2_UNIT \CSA4_2_unit[34].U_CSA4_2_UNIT  (
    .a(a[35]),
    .b(b[35]),
    .c(c[35]),
    .c_in(c_out[34]),
    .c_out(c_out[35]),
    .carry(carry[35]),
    .d(d[35]),
    .sum(sum[35])
  );
  CSA4_2_UNIT \CSA4_2_unit[35].U_CSA4_2_UNIT  (
    .a(a[36]),
    .b(b[36]),
    .c(c[36]),
    .c_in(c_out[35]),
    .c_out(c_out[36]),
    .carry(carry[36]),
    .d(d[36]),
    .sum(sum[36])
  );
  CSA4_2_UNIT \CSA4_2_unit[36].U_CSA4_2_UNIT  (
    .a(a[37]),
    .b(b[37]),
    .c(c[37]),
    .c_in(c_out[36]),
    .c_out(c_out[37]),
    .carry(carry[37]),
    .d(d[37]),
    .sum(sum[37])
  );
  CSA4_2_UNIT \CSA4_2_unit[37].U_CSA4_2_UNIT  (
    .a(a[38]),
    .b(b[38]),
    .c(c[38]),
    .c_in(c_out[37]),
    .c_out(c_out[38]),
    .carry(carry[38]),
    .d(d[38]),
    .sum(sum[38])
  );
  CSA4_2_UNIT \CSA4_2_unit[38].U_CSA4_2_UNIT  (
    .a(a[39]),
    .b(b[39]),
    .c(c[39]),
    .c_in(c_out[38]),
    .c_out(c_out[39]),
    .carry(carry[39]),
    .d(d[39]),
    .sum(sum[39])
  );
  CSA4_2_UNIT \CSA4_2_unit[39].U_CSA4_2_UNIT  (
    .a(a[40]),
    .b(b[40]),
    .c(c[40]),
    .c_in(c_out[39]),
    .c_out(c_out[40]),
    .carry(carry[40]),
    .d(d[40]),
    .sum(sum[40])
  );
  CSA4_2_UNIT \CSA4_2_unit[3].U_CSA4_2_UNIT  (
    .a(a[4]),
    .b(b[4]),
    .c(c[4]),
    .c_in(c_out[3]),
    .c_out(c_out[4]),
    .carry(carry[4]),
    .d(d[4]),
    .sum(sum[4])
  );
  CSA4_2_UNIT \CSA4_2_unit[40].U_CSA4_2_UNIT  (
    .a(a[41]),
    .b(b[41]),
    .c(c[41]),
    .c_in(c_out[40]),
    .c_out(c_out[41]),
    .carry(carry[41]),
    .d(d[41]),
    .sum(sum[41])
  );
  CSA4_2_UNIT \CSA4_2_unit[41].U_CSA4_2_UNIT  (
    .a(a[42]),
    .b(b[42]),
    .c(c[42]),
    .c_in(c_out[41]),
    .c_out(c_out[42]),
    .carry(carry[42]),
    .d(d[42]),
    .sum(sum[42])
  );
  CSA4_2_UNIT \CSA4_2_unit[42].U_CSA4_2_UNIT  (
    .a(a[43]),
    .b(b[43]),
    .c(c[43]),
    .c_in(c_out[42]),
    .c_out(c_out[43]),
    .carry(carry[43]),
    .d(d[43]),
    .sum(sum[43])
  );
  CSA4_2_UNIT \CSA4_2_unit[43].U_CSA4_2_UNIT  (
    .a(a[44]),
    .b(b[44]),
    .c(c[44]),
    .c_in(c_out[43]),
    .c_out(c_out[44]),
    .carry(carry[44]),
    .d(d[44]),
    .sum(sum[44])
  );
  CSA4_2_UNIT \CSA4_2_unit[44].U_CSA4_2_UNIT  (
    .a(a[45]),
    .b(b[45]),
    .c(c[45]),
    .c_in(c_out[44]),
    .c_out(c_out[45]),
    .carry(carry[45]),
    .d(d[45]),
    .sum(sum[45])
  );
  CSA4_2_UNIT \CSA4_2_unit[45].U_CSA4_2_UNIT  (
    .a(a[46]),
    .b(b[46]),
    .c(c[46]),
    .c_in(c_out[45]),
    .c_out(c_out[46]),
    .carry(carry[46]),
    .d(d[46]),
    .sum(sum[46])
  );
  CSA4_2_UNIT \CSA4_2_unit[46].U_CSA4_2_UNIT  (
    .a(a[47]),
    .b(b[47]),
    .c(c[47]),
    .c_in(c_out[46]),
    .c_out(c_out[47]),
    .carry(carry[47]),
    .d(d[47]),
    .sum(sum[47])
  );
  CSA4_2_UNIT \CSA4_2_unit[47].U_CSA4_2_UNIT  (
    .a(a[48]),
    .b(b[48]),
    .c(c[48]),
    .c_in(c_out[47]),
    .c_out(c_out[48]),
    .carry(carry[48]),
    .d(d[48]),
    .sum(sum[48])
  );
  CSA4_2_UNIT \CSA4_2_unit[48].U_CSA4_2_UNIT  (
    .a(a[49]),
    .b(b[49]),
    .c(c[49]),
    .c_in(c_out[48]),
    .c_out(c_out[49]),
    .carry(carry[49]),
    .d(d[49]),
    .sum(sum[49])
  );
  CSA4_2_UNIT \CSA4_2_unit[49].U_CSA4_2_UNIT  (
    .a(a[50]),
    .b(b[50]),
    .c(c[50]),
    .c_in(c_out[49]),
    .c_out(c_out[50]),
    .carry(carry[50]),
    .d(d[50]),
    .sum(sum[50])
  );
  CSA4_2_UNIT \CSA4_2_unit[4].U_CSA4_2_UNIT  (
    .a(a[5]),
    .b(b[5]),
    .c(c[5]),
    .c_in(c_out[4]),
    .c_out(c_out[5]),
    .carry(carry[5]),
    .d(d[5]),
    .sum(sum[5])
  );
  CSA4_2_UNIT \CSA4_2_unit[50].U_CSA4_2_UNIT  (
    .a(a[51]),
    .b(b[51]),
    .c(c[51]),
    .c_in(c_out[50]),
    .c_out(c_out[51]),
    .carry(carry[51]),
    .d(d[51]),
    .sum(sum[51])
  );
  CSA4_2_UNIT \CSA4_2_unit[51].U_CSA4_2_UNIT  (
    .a(a[52]),
    .b(b[52]),
    .c(c[52]),
    .c_in(c_out[51]),
    .c_out(c_out[52]),
    .carry(carry[52]),
    .d(d[52]),
    .sum(sum[52])
  );
  CSA4_2_UNIT \CSA4_2_unit[52].U_CSA4_2_UNIT  (
    .a(a[53]),
    .b(b[53]),
    .c(c[53]),
    .c_in(c_out[52]),
    .c_out(c_out[53]),
    .carry(carry[53]),
    .d(d[53]),
    .sum(sum[53])
  );
  CSA4_2_UNIT \CSA4_2_unit[53].U_CSA4_2_UNIT  (
    .a(a[54]),
    .b(b[54]),
    .c(c[54]),
    .c_in(c_out[53]),
    .c_out(carry_out),
    .carry(carry[54]),
    .d(d[54]),
    .sum(sum[54])
  );
  CSA4_2_UNIT \CSA4_2_unit[5].U_CSA4_2_UNIT  (
    .a(a[6]),
    .b(b[6]),
    .c(c[6]),
    .c_in(c_out[5]),
    .c_out(c_out[6]),
    .carry(carry[6]),
    .d(d[6]),
    .sum(sum[6])
  );
  CSA4_2_UNIT \CSA4_2_unit[6].U_CSA4_2_UNIT  (
    .a(a[7]),
    .b(b[7]),
    .c(c[7]),
    .c_in(c_out[6]),
    .c_out(c_out[7]),
    .carry(carry[7]),
    .d(d[7]),
    .sum(sum[7])
  );
  CSA4_2_UNIT \CSA4_2_unit[7].U_CSA4_2_UNIT  (
    .a(a[8]),
    .b(b[8]),
    .c(c[8]),
    .c_in(c_out[7]),
    .c_out(c_out[8]),
    .carry(carry[8]),
    .d(d[8]),
    .sum(sum[8])
  );
  CSA4_2_UNIT \CSA4_2_unit[8].U_CSA4_2_UNIT  (
    .a(a[9]),
    .b(b[9]),
    .c(c[9]),
    .c_in(c_out[8]),
    .c_out(c_out[9]),
    .carry(carry[9]),
    .d(d[9]),
    .sum(sum[9])
  );
  CSA4_2_UNIT \CSA4_2_unit[9].U_CSA4_2_UNIT  (
    .a(a[10]),
    .b(b[10]),
    .c(c[10]),
    .c_in(c_out[9]),
    .c_out(c_out[10]),
    .carry(carry[10]),
    .d(d[10]),
    .sum(sum[10])
  );
  assign c_out[54] = carry_out;
endmodule

module \$paramod\pe_CSA4_2\Width=56 (a, b, c, d, sum, carry, carry_out);
  wire _0_;
  input [55:0] a;
  wire a0_xor_b0;
  input [55:0] b;
  input [55:0] c;
  wire c0_xor_d0;
  wire [55:0] c_out;
  output [55:0] carry;
  output carry_out;
  input [55:0] d;
  output [55:0] sum;
  assign carry[0] = a[0] & _0_;
  assign _0_ = ~ sum[0];
  assign c_out[0] = c0_xor_d0 ? b[0] : d[0];
  assign a0_xor_b0 = a[0] ^ b[0];
  assign c0_xor_d0 = c[0] ^ d[0];
  assign sum[0] = a0_xor_b0 ^ c0_xor_d0;
  CSA4_2_UNIT \CSA4_2_unit[0].U_CSA4_2_UNIT  (
    .a(a[1]),
    .b(b[1]),
    .c(c[1]),
    .c_in(c_out[0]),
    .c_out(c_out[1]),
    .carry(carry[1]),
    .d(d[1]),
    .sum(sum[1])
  );
  CSA4_2_UNIT \CSA4_2_unit[10].U_CSA4_2_UNIT  (
    .a(a[11]),
    .b(b[11]),
    .c(c[11]),
    .c_in(c_out[10]),
    .c_out(c_out[11]),
    .carry(carry[11]),
    .d(d[11]),
    .sum(sum[11])
  );
  CSA4_2_UNIT \CSA4_2_unit[11].U_CSA4_2_UNIT  (
    .a(a[12]),
    .b(b[12]),
    .c(c[12]),
    .c_in(c_out[11]),
    .c_out(c_out[12]),
    .carry(carry[12]),
    .d(d[12]),
    .sum(sum[12])
  );
  CSA4_2_UNIT \CSA4_2_unit[12].U_CSA4_2_UNIT  (
    .a(a[13]),
    .b(b[13]),
    .c(c[13]),
    .c_in(c_out[12]),
    .c_out(c_out[13]),
    .carry(carry[13]),
    .d(d[13]),
    .sum(sum[13])
  );
  CSA4_2_UNIT \CSA4_2_unit[13].U_CSA4_2_UNIT  (
    .a(a[14]),
    .b(b[14]),
    .c(c[14]),
    .c_in(c_out[13]),
    .c_out(c_out[14]),
    .carry(carry[14]),
    .d(d[14]),
    .sum(sum[14])
  );
  CSA4_2_UNIT \CSA4_2_unit[14].U_CSA4_2_UNIT  (
    .a(a[15]),
    .b(b[15]),
    .c(c[15]),
    .c_in(c_out[14]),
    .c_out(c_out[15]),
    .carry(carry[15]),
    .d(d[15]),
    .sum(sum[15])
  );
  CSA4_2_UNIT \CSA4_2_unit[15].U_CSA4_2_UNIT  (
    .a(a[16]),
    .b(b[16]),
    .c(c[16]),
    .c_in(c_out[15]),
    .c_out(c_out[16]),
    .carry(carry[16]),
    .d(d[16]),
    .sum(sum[16])
  );
  CSA4_2_UNIT \CSA4_2_unit[16].U_CSA4_2_UNIT  (
    .a(a[17]),
    .b(b[17]),
    .c(c[17]),
    .c_in(c_out[16]),
    .c_out(c_out[17]),
    .carry(carry[17]),
    .d(d[17]),
    .sum(sum[17])
  );
  CSA4_2_UNIT \CSA4_2_unit[17].U_CSA4_2_UNIT  (
    .a(a[18]),
    .b(b[18]),
    .c(c[18]),
    .c_in(c_out[17]),
    .c_out(c_out[18]),
    .carry(carry[18]),
    .d(d[18]),
    .sum(sum[18])
  );
  CSA4_2_UNIT \CSA4_2_unit[18].U_CSA4_2_UNIT  (
    .a(a[19]),
    .b(b[19]),
    .c(c[19]),
    .c_in(c_out[18]),
    .c_out(c_out[19]),
    .carry(carry[19]),
    .d(d[19]),
    .sum(sum[19])
  );
  CSA4_2_UNIT \CSA4_2_unit[19].U_CSA4_2_UNIT  (
    .a(a[20]),
    .b(b[20]),
    .c(c[20]),
    .c_in(c_out[19]),
    .c_out(c_out[20]),
    .carry(carry[20]),
    .d(d[20]),
    .sum(sum[20])
  );
  CSA4_2_UNIT \CSA4_2_unit[1].U_CSA4_2_UNIT  (
    .a(a[2]),
    .b(b[2]),
    .c(c[2]),
    .c_in(c_out[1]),
    .c_out(c_out[2]),
    .carry(carry[2]),
    .d(d[2]),
    .sum(sum[2])
  );
  CSA4_2_UNIT \CSA4_2_unit[20].U_CSA4_2_UNIT  (
    .a(a[21]),
    .b(b[21]),
    .c(c[21]),
    .c_in(c_out[20]),
    .c_out(c_out[21]),
    .carry(carry[21]),
    .d(d[21]),
    .sum(sum[21])
  );
  CSA4_2_UNIT \CSA4_2_unit[21].U_CSA4_2_UNIT  (
    .a(a[22]),
    .b(b[22]),
    .c(c[22]),
    .c_in(c_out[21]),
    .c_out(c_out[22]),
    .carry(carry[22]),
    .d(d[22]),
    .sum(sum[22])
  );
  CSA4_2_UNIT \CSA4_2_unit[22].U_CSA4_2_UNIT  (
    .a(a[23]),
    .b(b[23]),
    .c(c[23]),
    .c_in(c_out[22]),
    .c_out(c_out[23]),
    .carry(carry[23]),
    .d(d[23]),
    .sum(sum[23])
  );
  CSA4_2_UNIT \CSA4_2_unit[23].U_CSA4_2_UNIT  (
    .a(a[24]),
    .b(b[24]),
    .c(c[24]),
    .c_in(c_out[23]),
    .c_out(c_out[24]),
    .carry(carry[24]),
    .d(d[24]),
    .sum(sum[24])
  );
  CSA4_2_UNIT \CSA4_2_unit[24].U_CSA4_2_UNIT  (
    .a(a[25]),
    .b(b[25]),
    .c(c[25]),
    .c_in(c_out[24]),
    .c_out(c_out[25]),
    .carry(carry[25]),
    .d(d[25]),
    .sum(sum[25])
  );
  CSA4_2_UNIT \CSA4_2_unit[25].U_CSA4_2_UNIT  (
    .a(a[26]),
    .b(b[26]),
    .c(c[26]),
    .c_in(c_out[25]),
    .c_out(c_out[26]),
    .carry(carry[26]),
    .d(d[26]),
    .sum(sum[26])
  );
  CSA4_2_UNIT \CSA4_2_unit[26].U_CSA4_2_UNIT  (
    .a(a[27]),
    .b(b[27]),
    .c(c[27]),
    .c_in(c_out[26]),
    .c_out(c_out[27]),
    .carry(carry[27]),
    .d(d[27]),
    .sum(sum[27])
  );
  CSA4_2_UNIT \CSA4_2_unit[27].U_CSA4_2_UNIT  (
    .a(a[28]),
    .b(b[28]),
    .c(c[28]),
    .c_in(c_out[27]),
    .c_out(c_out[28]),
    .carry(carry[28]),
    .d(d[28]),
    .sum(sum[28])
  );
  CSA4_2_UNIT \CSA4_2_unit[28].U_CSA4_2_UNIT  (
    .a(a[29]),
    .b(b[29]),
    .c(c[29]),
    .c_in(c_out[28]),
    .c_out(c_out[29]),
    .carry(carry[29]),
    .d(d[29]),
    .sum(sum[29])
  );
  CSA4_2_UNIT \CSA4_2_unit[29].U_CSA4_2_UNIT  (
    .a(a[30]),
    .b(b[30]),
    .c(c[30]),
    .c_in(c_out[29]),
    .c_out(c_out[30]),
    .carry(carry[30]),
    .d(d[30]),
    .sum(sum[30])
  );
  CSA4_2_UNIT \CSA4_2_unit[2].U_CSA4_2_UNIT  (
    .a(a[3]),
    .b(b[3]),
    .c(c[3]),
    .c_in(c_out[2]),
    .c_out(c_out[3]),
    .carry(carry[3]),
    .d(d[3]),
    .sum(sum[3])
  );
  CSA4_2_UNIT \CSA4_2_unit[30].U_CSA4_2_UNIT  (
    .a(a[31]),
    .b(b[31]),
    .c(c[31]),
    .c_in(c_out[30]),
    .c_out(c_out[31]),
    .carry(carry[31]),
    .d(d[31]),
    .sum(sum[31])
  );
  CSA4_2_UNIT \CSA4_2_unit[31].U_CSA4_2_UNIT  (
    .a(a[32]),
    .b(b[32]),
    .c(c[32]),
    .c_in(c_out[31]),
    .c_out(c_out[32]),
    .carry(carry[32]),
    .d(d[32]),
    .sum(sum[32])
  );
  CSA4_2_UNIT \CSA4_2_unit[32].U_CSA4_2_UNIT  (
    .a(a[33]),
    .b(b[33]),
    .c(c[33]),
    .c_in(c_out[32]),
    .c_out(c_out[33]),
    .carry(carry[33]),
    .d(d[33]),
    .sum(sum[33])
  );
  CSA4_2_UNIT \CSA4_2_unit[33].U_CSA4_2_UNIT  (
    .a(a[34]),
    .b(b[34]),
    .c(c[34]),
    .c_in(c_out[33]),
    .c_out(c_out[34]),
    .carry(carry[34]),
    .d(d[34]),
    .sum(sum[34])
  );
  CSA4_2_UNIT \CSA4_2_unit[34].U_CSA4_2_UNIT  (
    .a(a[35]),
    .b(b[35]),
    .c(c[35]),
    .c_in(c_out[34]),
    .c_out(c_out[35]),
    .carry(carry[35]),
    .d(d[35]),
    .sum(sum[35])
  );
  CSA4_2_UNIT \CSA4_2_unit[35].U_CSA4_2_UNIT  (
    .a(a[36]),
    .b(b[36]),
    .c(c[36]),
    .c_in(c_out[35]),
    .c_out(c_out[36]),
    .carry(carry[36]),
    .d(d[36]),
    .sum(sum[36])
  );
  CSA4_2_UNIT \CSA4_2_unit[36].U_CSA4_2_UNIT  (
    .a(a[37]),
    .b(b[37]),
    .c(c[37]),
    .c_in(c_out[36]),
    .c_out(c_out[37]),
    .carry(carry[37]),
    .d(d[37]),
    .sum(sum[37])
  );
  CSA4_2_UNIT \CSA4_2_unit[37].U_CSA4_2_UNIT  (
    .a(a[38]),
    .b(b[38]),
    .c(c[38]),
    .c_in(c_out[37]),
    .c_out(c_out[38]),
    .carry(carry[38]),
    .d(d[38]),
    .sum(sum[38])
  );
  CSA4_2_UNIT \CSA4_2_unit[38].U_CSA4_2_UNIT  (
    .a(a[39]),
    .b(b[39]),
    .c(c[39]),
    .c_in(c_out[38]),
    .c_out(c_out[39]),
    .carry(carry[39]),
    .d(d[39]),
    .sum(sum[39])
  );
  CSA4_2_UNIT \CSA4_2_unit[39].U_CSA4_2_UNIT  (
    .a(a[40]),
    .b(b[40]),
    .c(c[40]),
    .c_in(c_out[39]),
    .c_out(c_out[40]),
    .carry(carry[40]),
    .d(d[40]),
    .sum(sum[40])
  );
  CSA4_2_UNIT \CSA4_2_unit[3].U_CSA4_2_UNIT  (
    .a(a[4]),
    .b(b[4]),
    .c(c[4]),
    .c_in(c_out[3]),
    .c_out(c_out[4]),
    .carry(carry[4]),
    .d(d[4]),
    .sum(sum[4])
  );
  CSA4_2_UNIT \CSA4_2_unit[40].U_CSA4_2_UNIT  (
    .a(a[41]),
    .b(b[41]),
    .c(c[41]),
    .c_in(c_out[40]),
    .c_out(c_out[41]),
    .carry(carry[41]),
    .d(d[41]),
    .sum(sum[41])
  );
  CSA4_2_UNIT \CSA4_2_unit[41].U_CSA4_2_UNIT  (
    .a(a[42]),
    .b(b[42]),
    .c(c[42]),
    .c_in(c_out[41]),
    .c_out(c_out[42]),
    .carry(carry[42]),
    .d(d[42]),
    .sum(sum[42])
  );
  CSA4_2_UNIT \CSA4_2_unit[42].U_CSA4_2_UNIT  (
    .a(a[43]),
    .b(b[43]),
    .c(c[43]),
    .c_in(c_out[42]),
    .c_out(c_out[43]),
    .carry(carry[43]),
    .d(d[43]),
    .sum(sum[43])
  );
  CSA4_2_UNIT \CSA4_2_unit[43].U_CSA4_2_UNIT  (
    .a(a[44]),
    .b(b[44]),
    .c(c[44]),
    .c_in(c_out[43]),
    .c_out(c_out[44]),
    .carry(carry[44]),
    .d(d[44]),
    .sum(sum[44])
  );
  CSA4_2_UNIT \CSA4_2_unit[44].U_CSA4_2_UNIT  (
    .a(a[45]),
    .b(b[45]),
    .c(c[45]),
    .c_in(c_out[44]),
    .c_out(c_out[45]),
    .carry(carry[45]),
    .d(d[45]),
    .sum(sum[45])
  );
  CSA4_2_UNIT \CSA4_2_unit[45].U_CSA4_2_UNIT  (
    .a(a[46]),
    .b(b[46]),
    .c(c[46]),
    .c_in(c_out[45]),
    .c_out(c_out[46]),
    .carry(carry[46]),
    .d(d[46]),
    .sum(sum[46])
  );
  CSA4_2_UNIT \CSA4_2_unit[46].U_CSA4_2_UNIT  (
    .a(a[47]),
    .b(b[47]),
    .c(c[47]),
    .c_in(c_out[46]),
    .c_out(c_out[47]),
    .carry(carry[47]),
    .d(d[47]),
    .sum(sum[47])
  );
  CSA4_2_UNIT \CSA4_2_unit[47].U_CSA4_2_UNIT  (
    .a(a[48]),
    .b(b[48]),
    .c(c[48]),
    .c_in(c_out[47]),
    .c_out(c_out[48]),
    .carry(carry[48]),
    .d(d[48]),
    .sum(sum[48])
  );
  CSA4_2_UNIT \CSA4_2_unit[48].U_CSA4_2_UNIT  (
    .a(a[49]),
    .b(b[49]),
    .c(c[49]),
    .c_in(c_out[48]),
    .c_out(c_out[49]),
    .carry(carry[49]),
    .d(d[49]),
    .sum(sum[49])
  );
  CSA4_2_UNIT \CSA4_2_unit[49].U_CSA4_2_UNIT  (
    .a(a[50]),
    .b(b[50]),
    .c(c[50]),
    .c_in(c_out[49]),
    .c_out(c_out[50]),
    .carry(carry[50]),
    .d(d[50]),
    .sum(sum[50])
  );
  CSA4_2_UNIT \CSA4_2_unit[4].U_CSA4_2_UNIT  (
    .a(a[5]),
    .b(b[5]),
    .c(c[5]),
    .c_in(c_out[4]),
    .c_out(c_out[5]),
    .carry(carry[5]),
    .d(d[5]),
    .sum(sum[5])
  );
  CSA4_2_UNIT \CSA4_2_unit[50].U_CSA4_2_UNIT  (
    .a(a[51]),
    .b(b[51]),
    .c(c[51]),
    .c_in(c_out[50]),
    .c_out(c_out[51]),
    .carry(carry[51]),
    .d(d[51]),
    .sum(sum[51])
  );
  CSA4_2_UNIT \CSA4_2_unit[51].U_CSA4_2_UNIT  (
    .a(a[52]),
    .b(b[52]),
    .c(c[52]),
    .c_in(c_out[51]),
    .c_out(c_out[52]),
    .carry(carry[52]),
    .d(d[52]),
    .sum(sum[52])
  );
  CSA4_2_UNIT \CSA4_2_unit[52].U_CSA4_2_UNIT  (
    .a(a[53]),
    .b(b[53]),
    .c(c[53]),
    .c_in(c_out[52]),
    .c_out(c_out[53]),
    .carry(carry[53]),
    .d(d[53]),
    .sum(sum[53])
  );
  CSA4_2_UNIT \CSA4_2_unit[53].U_CSA4_2_UNIT  (
    .a(a[54]),
    .b(b[54]),
    .c(c[54]),
    .c_in(c_out[53]),
    .c_out(c_out[54]),
    .carry(carry[54]),
    .d(d[54]),
    .sum(sum[54])
  );
  CSA4_2_UNIT \CSA4_2_unit[54].U_CSA4_2_UNIT  (
    .a(a[55]),
    .b(b[55]),
    .c(c[55]),
    .c_in(c_out[54]),
    .c_out(carry_out),
    .carry(carry[55]),
    .d(d[55]),
    .sum(sum[55])
  );
  CSA4_2_UNIT \CSA4_2_unit[5].U_CSA4_2_UNIT  (
    .a(a[6]),
    .b(b[6]),
    .c(c[6]),
    .c_in(c_out[5]),
    .c_out(c_out[6]),
    .carry(carry[6]),
    .d(d[6]),
    .sum(sum[6])
  );
  CSA4_2_UNIT \CSA4_2_unit[6].U_CSA4_2_UNIT  (
    .a(a[7]),
    .b(b[7]),
    .c(c[7]),
    .c_in(c_out[6]),
    .c_out(c_out[7]),
    .carry(carry[7]),
    .d(d[7]),
    .sum(sum[7])
  );
  CSA4_2_UNIT \CSA4_2_unit[7].U_CSA4_2_UNIT  (
    .a(a[8]),
    .b(b[8]),
    .c(c[8]),
    .c_in(c_out[7]),
    .c_out(c_out[8]),
    .carry(carry[8]),
    .d(d[8]),
    .sum(sum[8])
  );
  CSA4_2_UNIT \CSA4_2_unit[8].U_CSA4_2_UNIT  (
    .a(a[9]),
    .b(b[9]),
    .c(c[9]),
    .c_in(c_out[8]),
    .c_out(c_out[9]),
    .carry(carry[9]),
    .d(d[9]),
    .sum(sum[9])
  );
  CSA4_2_UNIT \CSA4_2_unit[9].U_CSA4_2_UNIT  (
    .a(a[10]),
    .b(b[10]),
    .c(c[10]),
    .c_in(c_out[9]),
    .c_out(c_out[10]),
    .carry(carry[10]),
    .d(d[10]),
    .sum(sum[10])
  );
  assign c_out[55] = carry_out;
endmodule

module \$paramod\pe_CSA4_2\Width=83 (a, b, c, d, sum, carry, carry_out);
  wire _0_;
  input [82:0] a;
  wire a0_xor_b0;
  input [82:0] b;
  input [82:0] c;
  wire c0_xor_d0;
  wire [82:0] c_out;
  output [82:0] carry;
  output carry_out;
  input [82:0] d;
  output [82:0] sum;
  assign carry[0] = a[0] & _0_;
  assign _0_ = ~ sum[0];
  assign c_out[0] = c0_xor_d0 ? b[0] : d[0];
  assign a0_xor_b0 = a[0] ^ b[0];
  assign c0_xor_d0 = c[0] ^ d[0];
  assign sum[0] = a0_xor_b0 ^ c0_xor_d0;
  CSA4_2_UNIT \CSA4_2_unit[0].U_CSA4_2_UNIT  (
    .a(a[1]),
    .b(b[1]),
    .c(c[1]),
    .c_in(c_out[0]),
    .c_out(c_out[1]),
    .carry(carry[1]),
    .d(d[1]),
    .sum(sum[1])
  );
  CSA4_2_UNIT \CSA4_2_unit[10].U_CSA4_2_UNIT  (
    .a(a[11]),
    .b(b[11]),
    .c(c[11]),
    .c_in(c_out[10]),
    .c_out(c_out[11]),
    .carry(carry[11]),
    .d(d[11]),
    .sum(sum[11])
  );
  CSA4_2_UNIT \CSA4_2_unit[11].U_CSA4_2_UNIT  (
    .a(a[12]),
    .b(b[12]),
    .c(c[12]),
    .c_in(c_out[11]),
    .c_out(c_out[12]),
    .carry(carry[12]),
    .d(d[12]),
    .sum(sum[12])
  );
  CSA4_2_UNIT \CSA4_2_unit[12].U_CSA4_2_UNIT  (
    .a(a[13]),
    .b(b[13]),
    .c(c[13]),
    .c_in(c_out[12]),
    .c_out(c_out[13]),
    .carry(carry[13]),
    .d(d[13]),
    .sum(sum[13])
  );
  CSA4_2_UNIT \CSA4_2_unit[13].U_CSA4_2_UNIT  (
    .a(a[14]),
    .b(b[14]),
    .c(c[14]),
    .c_in(c_out[13]),
    .c_out(c_out[14]),
    .carry(carry[14]),
    .d(d[14]),
    .sum(sum[14])
  );
  CSA4_2_UNIT \CSA4_2_unit[14].U_CSA4_2_UNIT  (
    .a(a[15]),
    .b(b[15]),
    .c(c[15]),
    .c_in(c_out[14]),
    .c_out(c_out[15]),
    .carry(carry[15]),
    .d(d[15]),
    .sum(sum[15])
  );
  CSA4_2_UNIT \CSA4_2_unit[15].U_CSA4_2_UNIT  (
    .a(a[16]),
    .b(b[16]),
    .c(c[16]),
    .c_in(c_out[15]),
    .c_out(c_out[16]),
    .carry(carry[16]),
    .d(d[16]),
    .sum(sum[16])
  );
  CSA4_2_UNIT \CSA4_2_unit[16].U_CSA4_2_UNIT  (
    .a(a[17]),
    .b(b[17]),
    .c(c[17]),
    .c_in(c_out[16]),
    .c_out(c_out[17]),
    .carry(carry[17]),
    .d(d[17]),
    .sum(sum[17])
  );
  CSA4_2_UNIT \CSA4_2_unit[17].U_CSA4_2_UNIT  (
    .a(a[18]),
    .b(b[18]),
    .c(c[18]),
    .c_in(c_out[17]),
    .c_out(c_out[18]),
    .carry(carry[18]),
    .d(d[18]),
    .sum(sum[18])
  );
  CSA4_2_UNIT \CSA4_2_unit[18].U_CSA4_2_UNIT  (
    .a(a[19]),
    .b(b[19]),
    .c(c[19]),
    .c_in(c_out[18]),
    .c_out(c_out[19]),
    .carry(carry[19]),
    .d(d[19]),
    .sum(sum[19])
  );
  CSA4_2_UNIT \CSA4_2_unit[19].U_CSA4_2_UNIT  (
    .a(a[20]),
    .b(b[20]),
    .c(c[20]),
    .c_in(c_out[19]),
    .c_out(c_out[20]),
    .carry(carry[20]),
    .d(d[20]),
    .sum(sum[20])
  );
  CSA4_2_UNIT \CSA4_2_unit[1].U_CSA4_2_UNIT  (
    .a(a[2]),
    .b(b[2]),
    .c(c[2]),
    .c_in(c_out[1]),
    .c_out(c_out[2]),
    .carry(carry[2]),
    .d(d[2]),
    .sum(sum[2])
  );
  CSA4_2_UNIT \CSA4_2_unit[20].U_CSA4_2_UNIT  (
    .a(a[21]),
    .b(b[21]),
    .c(c[21]),
    .c_in(c_out[20]),
    .c_out(c_out[21]),
    .carry(carry[21]),
    .d(d[21]),
    .sum(sum[21])
  );
  CSA4_2_UNIT \CSA4_2_unit[21].U_CSA4_2_UNIT  (
    .a(a[22]),
    .b(b[22]),
    .c(c[22]),
    .c_in(c_out[21]),
    .c_out(c_out[22]),
    .carry(carry[22]),
    .d(d[22]),
    .sum(sum[22])
  );
  CSA4_2_UNIT \CSA4_2_unit[22].U_CSA4_2_UNIT  (
    .a(a[23]),
    .b(b[23]),
    .c(c[23]),
    .c_in(c_out[22]),
    .c_out(c_out[23]),
    .carry(carry[23]),
    .d(d[23]),
    .sum(sum[23])
  );
  CSA4_2_UNIT \CSA4_2_unit[23].U_CSA4_2_UNIT  (
    .a(a[24]),
    .b(b[24]),
    .c(c[24]),
    .c_in(c_out[23]),
    .c_out(c_out[24]),
    .carry(carry[24]),
    .d(d[24]),
    .sum(sum[24])
  );
  CSA4_2_UNIT \CSA4_2_unit[24].U_CSA4_2_UNIT  (
    .a(a[25]),
    .b(b[25]),
    .c(c[25]),
    .c_in(c_out[24]),
    .c_out(c_out[25]),
    .carry(carry[25]),
    .d(d[25]),
    .sum(sum[25])
  );
  CSA4_2_UNIT \CSA4_2_unit[25].U_CSA4_2_UNIT  (
    .a(a[26]),
    .b(b[26]),
    .c(c[26]),
    .c_in(c_out[25]),
    .c_out(c_out[26]),
    .carry(carry[26]),
    .d(d[26]),
    .sum(sum[26])
  );
  CSA4_2_UNIT \CSA4_2_unit[26].U_CSA4_2_UNIT  (
    .a(a[27]),
    .b(b[27]),
    .c(c[27]),
    .c_in(c_out[26]),
    .c_out(c_out[27]),
    .carry(carry[27]),
    .d(d[27]),
    .sum(sum[27])
  );
  CSA4_2_UNIT \CSA4_2_unit[27].U_CSA4_2_UNIT  (
    .a(a[28]),
    .b(b[28]),
    .c(c[28]),
    .c_in(c_out[27]),
    .c_out(c_out[28]),
    .carry(carry[28]),
    .d(d[28]),
    .sum(sum[28])
  );
  CSA4_2_UNIT \CSA4_2_unit[28].U_CSA4_2_UNIT  (
    .a(a[29]),
    .b(b[29]),
    .c(c[29]),
    .c_in(c_out[28]),
    .c_out(c_out[29]),
    .carry(carry[29]),
    .d(d[29]),
    .sum(sum[29])
  );
  CSA4_2_UNIT \CSA4_2_unit[29].U_CSA4_2_UNIT  (
    .a(a[30]),
    .b(b[30]),
    .c(c[30]),
    .c_in(c_out[29]),
    .c_out(c_out[30]),
    .carry(carry[30]),
    .d(d[30]),
    .sum(sum[30])
  );
  CSA4_2_UNIT \CSA4_2_unit[2].U_CSA4_2_UNIT  (
    .a(a[3]),
    .b(b[3]),
    .c(c[3]),
    .c_in(c_out[2]),
    .c_out(c_out[3]),
    .carry(carry[3]),
    .d(d[3]),
    .sum(sum[3])
  );
  CSA4_2_UNIT \CSA4_2_unit[30].U_CSA4_2_UNIT  (
    .a(a[31]),
    .b(b[31]),
    .c(c[31]),
    .c_in(c_out[30]),
    .c_out(c_out[31]),
    .carry(carry[31]),
    .d(d[31]),
    .sum(sum[31])
  );
  CSA4_2_UNIT \CSA4_2_unit[31].U_CSA4_2_UNIT  (
    .a(a[32]),
    .b(b[32]),
    .c(c[32]),
    .c_in(c_out[31]),
    .c_out(c_out[32]),
    .carry(carry[32]),
    .d(d[32]),
    .sum(sum[32])
  );
  CSA4_2_UNIT \CSA4_2_unit[32].U_CSA4_2_UNIT  (
    .a(a[33]),
    .b(b[33]),
    .c(c[33]),
    .c_in(c_out[32]),
    .c_out(c_out[33]),
    .carry(carry[33]),
    .d(d[33]),
    .sum(sum[33])
  );
  CSA4_2_UNIT \CSA4_2_unit[33].U_CSA4_2_UNIT  (
    .a(a[34]),
    .b(b[34]),
    .c(c[34]),
    .c_in(c_out[33]),
    .c_out(c_out[34]),
    .carry(carry[34]),
    .d(d[34]),
    .sum(sum[34])
  );
  CSA4_2_UNIT \CSA4_2_unit[34].U_CSA4_2_UNIT  (
    .a(a[35]),
    .b(b[35]),
    .c(c[35]),
    .c_in(c_out[34]),
    .c_out(c_out[35]),
    .carry(carry[35]),
    .d(d[35]),
    .sum(sum[35])
  );
  CSA4_2_UNIT \CSA4_2_unit[35].U_CSA4_2_UNIT  (
    .a(a[36]),
    .b(b[36]),
    .c(c[36]),
    .c_in(c_out[35]),
    .c_out(c_out[36]),
    .carry(carry[36]),
    .d(d[36]),
    .sum(sum[36])
  );
  CSA4_2_UNIT \CSA4_2_unit[36].U_CSA4_2_UNIT  (
    .a(a[37]),
    .b(b[37]),
    .c(c[37]),
    .c_in(c_out[36]),
    .c_out(c_out[37]),
    .carry(carry[37]),
    .d(d[37]),
    .sum(sum[37])
  );
  CSA4_2_UNIT \CSA4_2_unit[37].U_CSA4_2_UNIT  (
    .a(a[38]),
    .b(b[38]),
    .c(c[38]),
    .c_in(c_out[37]),
    .c_out(c_out[38]),
    .carry(carry[38]),
    .d(d[38]),
    .sum(sum[38])
  );
  CSA4_2_UNIT \CSA4_2_unit[38].U_CSA4_2_UNIT  (
    .a(a[39]),
    .b(b[39]),
    .c(c[39]),
    .c_in(c_out[38]),
    .c_out(c_out[39]),
    .carry(carry[39]),
    .d(d[39]),
    .sum(sum[39])
  );
  CSA4_2_UNIT \CSA4_2_unit[39].U_CSA4_2_UNIT  (
    .a(a[40]),
    .b(b[40]),
    .c(c[40]),
    .c_in(c_out[39]),
    .c_out(c_out[40]),
    .carry(carry[40]),
    .d(d[40]),
    .sum(sum[40])
  );
  CSA4_2_UNIT \CSA4_2_unit[3].U_CSA4_2_UNIT  (
    .a(a[4]),
    .b(b[4]),
    .c(c[4]),
    .c_in(c_out[3]),
    .c_out(c_out[4]),
    .carry(carry[4]),
    .d(d[4]),
    .sum(sum[4])
  );
  CSA4_2_UNIT \CSA4_2_unit[40].U_CSA4_2_UNIT  (
    .a(a[41]),
    .b(b[41]),
    .c(c[41]),
    .c_in(c_out[40]),
    .c_out(c_out[41]),
    .carry(carry[41]),
    .d(d[41]),
    .sum(sum[41])
  );
  CSA4_2_UNIT \CSA4_2_unit[41].U_CSA4_2_UNIT  (
    .a(a[42]),
    .b(b[42]),
    .c(c[42]),
    .c_in(c_out[41]),
    .c_out(c_out[42]),
    .carry(carry[42]),
    .d(d[42]),
    .sum(sum[42])
  );
  CSA4_2_UNIT \CSA4_2_unit[42].U_CSA4_2_UNIT  (
    .a(a[43]),
    .b(b[43]),
    .c(c[43]),
    .c_in(c_out[42]),
    .c_out(c_out[43]),
    .carry(carry[43]),
    .d(d[43]),
    .sum(sum[43])
  );
  CSA4_2_UNIT \CSA4_2_unit[43].U_CSA4_2_UNIT  (
    .a(a[44]),
    .b(b[44]),
    .c(c[44]),
    .c_in(c_out[43]),
    .c_out(c_out[44]),
    .carry(carry[44]),
    .d(d[44]),
    .sum(sum[44])
  );
  CSA4_2_UNIT \CSA4_2_unit[44].U_CSA4_2_UNIT  (
    .a(a[45]),
    .b(b[45]),
    .c(c[45]),
    .c_in(c_out[44]),
    .c_out(c_out[45]),
    .carry(carry[45]),
    .d(d[45]),
    .sum(sum[45])
  );
  CSA4_2_UNIT \CSA4_2_unit[45].U_CSA4_2_UNIT  (
    .a(a[46]),
    .b(b[46]),
    .c(c[46]),
    .c_in(c_out[45]),
    .c_out(c_out[46]),
    .carry(carry[46]),
    .d(d[46]),
    .sum(sum[46])
  );
  CSA4_2_UNIT \CSA4_2_unit[46].U_CSA4_2_UNIT  (
    .a(a[47]),
    .b(b[47]),
    .c(c[47]),
    .c_in(c_out[46]),
    .c_out(c_out[47]),
    .carry(carry[47]),
    .d(d[47]),
    .sum(sum[47])
  );
  CSA4_2_UNIT \CSA4_2_unit[47].U_CSA4_2_UNIT  (
    .a(a[48]),
    .b(b[48]),
    .c(c[48]),
    .c_in(c_out[47]),
    .c_out(c_out[48]),
    .carry(carry[48]),
    .d(d[48]),
    .sum(sum[48])
  );
  CSA4_2_UNIT \CSA4_2_unit[48].U_CSA4_2_UNIT  (
    .a(a[49]),
    .b(b[49]),
    .c(c[49]),
    .c_in(c_out[48]),
    .c_out(c_out[49]),
    .carry(carry[49]),
    .d(d[49]),
    .sum(sum[49])
  );
  CSA4_2_UNIT \CSA4_2_unit[49].U_CSA4_2_UNIT  (
    .a(a[50]),
    .b(b[50]),
    .c(c[50]),
    .c_in(c_out[49]),
    .c_out(c_out[50]),
    .carry(carry[50]),
    .d(d[50]),
    .sum(sum[50])
  );
  CSA4_2_UNIT \CSA4_2_unit[4].U_CSA4_2_UNIT  (
    .a(a[5]),
    .b(b[5]),
    .c(c[5]),
    .c_in(c_out[4]),
    .c_out(c_out[5]),
    .carry(carry[5]),
    .d(d[5]),
    .sum(sum[5])
  );
  CSA4_2_UNIT \CSA4_2_unit[50].U_CSA4_2_UNIT  (
    .a(a[51]),
    .b(b[51]),
    .c(c[51]),
    .c_in(c_out[50]),
    .c_out(c_out[51]),
    .carry(carry[51]),
    .d(d[51]),
    .sum(sum[51])
  );
  CSA4_2_UNIT \CSA4_2_unit[51].U_CSA4_2_UNIT  (
    .a(a[52]),
    .b(b[52]),
    .c(c[52]),
    .c_in(c_out[51]),
    .c_out(c_out[52]),
    .carry(carry[52]),
    .d(d[52]),
    .sum(sum[52])
  );
  CSA4_2_UNIT \CSA4_2_unit[52].U_CSA4_2_UNIT  (
    .a(a[53]),
    .b(b[53]),
    .c(c[53]),
    .c_in(c_out[52]),
    .c_out(c_out[53]),
    .carry(carry[53]),
    .d(d[53]),
    .sum(sum[53])
  );
  CSA4_2_UNIT \CSA4_2_unit[53].U_CSA4_2_UNIT  (
    .a(a[54]),
    .b(b[54]),
    .c(c[54]),
    .c_in(c_out[53]),
    .c_out(c_out[54]),
    .carry(carry[54]),
    .d(d[54]),
    .sum(sum[54])
  );
  CSA4_2_UNIT \CSA4_2_unit[54].U_CSA4_2_UNIT  (
    .a(a[55]),
    .b(b[55]),
    .c(c[55]),
    .c_in(c_out[54]),
    .c_out(c_out[55]),
    .carry(carry[55]),
    .d(d[55]),
    .sum(sum[55])
  );
  CSA4_2_UNIT \CSA4_2_unit[55].U_CSA4_2_UNIT  (
    .a(a[56]),
    .b(b[56]),
    .c(c[56]),
    .c_in(c_out[55]),
    .c_out(c_out[56]),
    .carry(carry[56]),
    .d(d[56]),
    .sum(sum[56])
  );
  CSA4_2_UNIT \CSA4_2_unit[56].U_CSA4_2_UNIT  (
    .a(a[57]),
    .b(b[57]),
    .c(c[57]),
    .c_in(c_out[56]),
    .c_out(c_out[57]),
    .carry(carry[57]),
    .d(d[57]),
    .sum(sum[57])
  );
  CSA4_2_UNIT \CSA4_2_unit[57].U_CSA4_2_UNIT  (
    .a(a[58]),
    .b(b[58]),
    .c(c[58]),
    .c_in(c_out[57]),
    .c_out(c_out[58]),
    .carry(carry[58]),
    .d(d[58]),
    .sum(sum[58])
  );
  CSA4_2_UNIT \CSA4_2_unit[58].U_CSA4_2_UNIT  (
    .a(a[59]),
    .b(b[59]),
    .c(c[59]),
    .c_in(c_out[58]),
    .c_out(c_out[59]),
    .carry(carry[59]),
    .d(d[59]),
    .sum(sum[59])
  );
  CSA4_2_UNIT \CSA4_2_unit[59].U_CSA4_2_UNIT  (
    .a(a[60]),
    .b(b[60]),
    .c(c[60]),
    .c_in(c_out[59]),
    .c_out(c_out[60]),
    .carry(carry[60]),
    .d(d[60]),
    .sum(sum[60])
  );
  CSA4_2_UNIT \CSA4_2_unit[5].U_CSA4_2_UNIT  (
    .a(a[6]),
    .b(b[6]),
    .c(c[6]),
    .c_in(c_out[5]),
    .c_out(c_out[6]),
    .carry(carry[6]),
    .d(d[6]),
    .sum(sum[6])
  );
  CSA4_2_UNIT \CSA4_2_unit[60].U_CSA4_2_UNIT  (
    .a(a[61]),
    .b(b[61]),
    .c(c[61]),
    .c_in(c_out[60]),
    .c_out(c_out[61]),
    .carry(carry[61]),
    .d(d[61]),
    .sum(sum[61])
  );
  CSA4_2_UNIT \CSA4_2_unit[61].U_CSA4_2_UNIT  (
    .a(a[62]),
    .b(b[62]),
    .c(c[62]),
    .c_in(c_out[61]),
    .c_out(c_out[62]),
    .carry(carry[62]),
    .d(d[62]),
    .sum(sum[62])
  );
  CSA4_2_UNIT \CSA4_2_unit[62].U_CSA4_2_UNIT  (
    .a(a[63]),
    .b(b[63]),
    .c(c[63]),
    .c_in(c_out[62]),
    .c_out(c_out[63]),
    .carry(carry[63]),
    .d(d[63]),
    .sum(sum[63])
  );
  CSA4_2_UNIT \CSA4_2_unit[63].U_CSA4_2_UNIT  (
    .a(a[64]),
    .b(b[64]),
    .c(c[64]),
    .c_in(c_out[63]),
    .c_out(c_out[64]),
    .carry(carry[64]),
    .d(d[64]),
    .sum(sum[64])
  );
  CSA4_2_UNIT \CSA4_2_unit[64].U_CSA4_2_UNIT  (
    .a(a[65]),
    .b(b[65]),
    .c(c[65]),
    .c_in(c_out[64]),
    .c_out(c_out[65]),
    .carry(carry[65]),
    .d(d[65]),
    .sum(sum[65])
  );
  CSA4_2_UNIT \CSA4_2_unit[65].U_CSA4_2_UNIT  (
    .a(a[66]),
    .b(b[66]),
    .c(c[66]),
    .c_in(c_out[65]),
    .c_out(c_out[66]),
    .carry(carry[66]),
    .d(d[66]),
    .sum(sum[66])
  );
  CSA4_2_UNIT \CSA4_2_unit[66].U_CSA4_2_UNIT  (
    .a(a[67]),
    .b(b[67]),
    .c(c[67]),
    .c_in(c_out[66]),
    .c_out(c_out[67]),
    .carry(carry[67]),
    .d(d[67]),
    .sum(sum[67])
  );
  CSA4_2_UNIT \CSA4_2_unit[67].U_CSA4_2_UNIT  (
    .a(a[68]),
    .b(b[68]),
    .c(c[68]),
    .c_in(c_out[67]),
    .c_out(c_out[68]),
    .carry(carry[68]),
    .d(d[68]),
    .sum(sum[68])
  );
  CSA4_2_UNIT \CSA4_2_unit[68].U_CSA4_2_UNIT  (
    .a(a[69]),
    .b(b[69]),
    .c(c[69]),
    .c_in(c_out[68]),
    .c_out(c_out[69]),
    .carry(carry[69]),
    .d(d[69]),
    .sum(sum[69])
  );
  CSA4_2_UNIT \CSA4_2_unit[69].U_CSA4_2_UNIT  (
    .a(a[70]),
    .b(b[70]),
    .c(c[70]),
    .c_in(c_out[69]),
    .c_out(c_out[70]),
    .carry(carry[70]),
    .d(d[70]),
    .sum(sum[70])
  );
  CSA4_2_UNIT \CSA4_2_unit[6].U_CSA4_2_UNIT  (
    .a(a[7]),
    .b(b[7]),
    .c(c[7]),
    .c_in(c_out[6]),
    .c_out(c_out[7]),
    .carry(carry[7]),
    .d(d[7]),
    .sum(sum[7])
  );
  CSA4_2_UNIT \CSA4_2_unit[70].U_CSA4_2_UNIT  (
    .a(a[71]),
    .b(b[71]),
    .c(c[71]),
    .c_in(c_out[70]),
    .c_out(c_out[71]),
    .carry(carry[71]),
    .d(d[71]),
    .sum(sum[71])
  );
  CSA4_2_UNIT \CSA4_2_unit[71].U_CSA4_2_UNIT  (
    .a(a[72]),
    .b(b[72]),
    .c(c[72]),
    .c_in(c_out[71]),
    .c_out(c_out[72]),
    .carry(carry[72]),
    .d(d[72]),
    .sum(sum[72])
  );
  CSA4_2_UNIT \CSA4_2_unit[72].U_CSA4_2_UNIT  (
    .a(a[73]),
    .b(b[73]),
    .c(c[73]),
    .c_in(c_out[72]),
    .c_out(c_out[73]),
    .carry(carry[73]),
    .d(d[73]),
    .sum(sum[73])
  );
  CSA4_2_UNIT \CSA4_2_unit[73].U_CSA4_2_UNIT  (
    .a(a[74]),
    .b(b[74]),
    .c(c[74]),
    .c_in(c_out[73]),
    .c_out(c_out[74]),
    .carry(carry[74]),
    .d(d[74]),
    .sum(sum[74])
  );
  CSA4_2_UNIT \CSA4_2_unit[74].U_CSA4_2_UNIT  (
    .a(a[75]),
    .b(b[75]),
    .c(c[75]),
    .c_in(c_out[74]),
    .c_out(c_out[75]),
    .carry(carry[75]),
    .d(d[75]),
    .sum(sum[75])
  );
  CSA4_2_UNIT \CSA4_2_unit[75].U_CSA4_2_UNIT  (
    .a(a[76]),
    .b(b[76]),
    .c(c[76]),
    .c_in(c_out[75]),
    .c_out(c_out[76]),
    .carry(carry[76]),
    .d(d[76]),
    .sum(sum[76])
  );
  CSA4_2_UNIT \CSA4_2_unit[76].U_CSA4_2_UNIT  (
    .a(a[77]),
    .b(b[77]),
    .c(c[77]),
    .c_in(c_out[76]),
    .c_out(c_out[77]),
    .carry(carry[77]),
    .d(d[77]),
    .sum(sum[77])
  );
  CSA4_2_UNIT \CSA4_2_unit[77].U_CSA4_2_UNIT  (
    .a(a[78]),
    .b(b[78]),
    .c(c[78]),
    .c_in(c_out[77]),
    .c_out(c_out[78]),
    .carry(carry[78]),
    .d(d[78]),
    .sum(sum[78])
  );
  CSA4_2_UNIT \CSA4_2_unit[78].U_CSA4_2_UNIT  (
    .a(a[79]),
    .b(b[79]),
    .c(c[79]),
    .c_in(c_out[78]),
    .c_out(c_out[79]),
    .carry(carry[79]),
    .d(d[79]),
    .sum(sum[79])
  );
  CSA4_2_UNIT \CSA4_2_unit[79].U_CSA4_2_UNIT  (
    .a(a[80]),
    .b(b[80]),
    .c(c[80]),
    .c_in(c_out[79]),
    .c_out(c_out[80]),
    .carry(carry[80]),
    .d(d[80]),
    .sum(sum[80])
  );
  CSA4_2_UNIT \CSA4_2_unit[7].U_CSA4_2_UNIT  (
    .a(a[8]),
    .b(b[8]),
    .c(c[8]),
    .c_in(c_out[7]),
    .c_out(c_out[8]),
    .carry(carry[8]),
    .d(d[8]),
    .sum(sum[8])
  );
  CSA4_2_UNIT \CSA4_2_unit[80].U_CSA4_2_UNIT  (
    .a(a[81]),
    .b(b[81]),
    .c(c[81]),
    .c_in(c_out[80]),
    .c_out(c_out[81]),
    .carry(carry[81]),
    .d(d[81]),
    .sum(sum[81])
  );
  CSA4_2_UNIT \CSA4_2_unit[81].U_CSA4_2_UNIT  (
    .a(a[82]),
    .b(b[82]),
    .c(c[82]),
    .c_in(c_out[81]),
    .c_out(carry_out),
    .carry(carry[82]),
    .d(d[82]),
    .sum(sum[82])
  );
  CSA4_2_UNIT \CSA4_2_unit[8].U_CSA4_2_UNIT  (
    .a(a[9]),
    .b(b[9]),
    .c(c[9]),
    .c_in(c_out[8]),
    .c_out(c_out[9]),
    .carry(carry[9]),
    .d(d[9]),
    .sum(sum[9])
  );
  CSA4_2_UNIT \CSA4_2_unit[9].U_CSA4_2_UNIT  (
    .a(a[10]),
    .b(b[10]),
    .c(c[10]),
    .c_in(c_out[9]),
    .c_out(c_out[10]),
    .carry(carry[10]),
    .d(d[10]),
    .sum(sum[10])
  );
  assign c_out[82] = carry_out;
endmodule

module \$paramod\pe_alignment\WIDTH=52\EXP_W=10 (idata0, idata1, idata2, idata3, idata4, idata5, idata6, idata7, idata8, idata9, idataA, idataB, idataC, idataD, idataE, idataF, ishift0, ishift1, ishift2, ishift3, ishift4, ishift5, ishift6, ishift7, ishift8, ishift9, ishiftA, ishiftB, ishiftC, ishiftD, ishiftE, ishiftF, odata0, odata1, odata2, odata3, odata4, odata5, odata6, odata7, odata8, odata9, odataA, odataB, odataC, odataD, odataE, odataF);
  input [52:0] idata0;
  input [52:0] idata1;
  input [52:0] idata2;
  input [52:0] idata3;
  input [52:0] idata4;
  input [52:0] idata5;
  input [52:0] idata6;
  input [52:0] idata7;
  input [52:0] idata8;
  input [52:0] idata9;
  input [52:0] idataA;
  input [52:0] idataB;
  input [52:0] idataC;
  input [52:0] idataD;
  input [52:0] idataE;
  input [52:0] idataF;
  input [9:0] ishift0;
  input [9:0] ishift1;
  input [9:0] ishift2;
  input [9:0] ishift3;
  input [9:0] ishift4;
  input [9:0] ishift5;
  input [9:0] ishift6;
  input [9:0] ishift7;
  input [9:0] ishift8;
  input [9:0] ishift9;
  input [9:0] ishiftA;
  input [9:0] ishiftB;
  input [9:0] ishiftC;
  input [9:0] ishiftD;
  input [9:0] ishiftE;
  input [9:0] ishiftF;
  output [52:0] odata0;
  output [52:0] odata1;
  output [52:0] odata2;
  output [52:0] odata3;
  output [52:0] odata4;
  output [52:0] odata5;
  output [52:0] odata6;
  output [52:0] odata7;
  output [52:0] odata8;
  output [52:0] odata9;
  output [52:0] odataA;
  output [52:0] odataB;
  output [52:0] odataC;
  output [52:0] odataD;
  output [52:0] odataE;
  output [52:0] odataF;
  assign odata0 = idata0 >>> ishift0;
  assign odata1 = idata1 >>> ishift1;
  assign odata2 = idata2 >>> ishift2;
  assign odata3 = idata3 >>> ishift3;
  assign odata4 = idata4 >>> ishift4;
  assign odata5 = idata5 >>> ishift5;
  assign odata6 = idata6 >>> ishift6;
  assign odata7 = idata7 >>> ishift7;
  assign odata8 = idata8 >>> ishift8;
  assign odata9 = idata9 >>> ishift9;
  assign odataA = idataA >>> ishiftA;
  assign odataB = idataB >>> ishiftB;
  assign odataC = idataC >>> ishiftC;
  assign odataD = idataD >>> ishiftD;
  assign odataE = idataE >>> ishiftE;
  assign odataF = idataF >>> ishiftF;
endmodule

module \$paramod\pe_cpa\WIDTH=1 (a, b, sum);
  input a;
  input b;
  wire carry_pord;
  output [1:0] sum;
  wire sum_pord;
  pe_Hadd Hadd_1 (
    .a(a),
    .b(b),
    .carry(carry_pord),
    .sum(sum_pord)
  );
  assign sum = { carry_pord, sum_pord };
endmodule

module \$paramod\pe_cpa\WIDTH=6 (a, b, sum);
  input [5:0] a;
  input [5:0] b;
  wire [5:0] carry_pord;
  output [6:0] sum;
  wire [5:0] sum_pord;
  pe_Fadd \FullAdd[1].Fadd_1  (
    .Cin(carry_pord[0]),
    .Cout(carry_pord[1]),
    .Sum(sum_pord[1]),
    .x(a[1]),
    .y(b[1])
  );
  pe_Fadd \FullAdd[2].Fadd_1  (
    .Cin(carry_pord[1]),
    .Cout(carry_pord[2]),
    .Sum(sum_pord[2]),
    .x(a[2]),
    .y(b[2])
  );
  pe_Fadd \FullAdd[3].Fadd_1  (
    .Cin(carry_pord[2]),
    .Cout(carry_pord[3]),
    .Sum(sum_pord[3]),
    .x(a[3]),
    .y(b[3])
  );
  pe_Fadd \FullAdd[4].Fadd_1  (
    .Cin(carry_pord[3]),
    .Cout(carry_pord[4]),
    .Sum(sum_pord[4]),
    .x(a[4]),
    .y(b[4])
  );
  pe_Fadd \FullAdd[5].Fadd_1  (
    .Cin(carry_pord[4]),
    .Cout(carry_pord[5]),
    .Sum(sum_pord[5]),
    .x(a[5]),
    .y(b[5])
  );
  pe_Hadd Hadd_1 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry_pord[0]),
    .sum(sum_pord[0])
  );
  assign sum = { carry_pord[5], sum_pord };
endmodule

module \$paramod\pe_csla_unit\WIDTH=5 (in_01, in_02, sum_0, sum_1);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire [4:0] carry_0;
  wire [4:0] carry_1;
  input [4:0] in_01;
  wire [4:0] in_01_and_in_02;
  wire [4:0] in_01_or_in_02;
  wire [4:0] in_01_xor_in_02;
  input [4:0] in_02;
  output [5:0] sum_0;
  output [5:0] sum_1;
  assign in_01_and_in_02 = in_01 & in_02;
  assign sum_1[0] = ~ in_01_xor_in_02[0];
  assign _00_ = ~ in_01_xor_in_02[1];
  assign _01_ = ~ in_01_xor_in_02[2];
  assign _02_ = ~ in_01_xor_in_02[3];
  assign _03_ = ~ in_01_xor_in_02[4];
  assign in_01_or_in_02 = in_01 | in_02;
  assign sum_0[1] = in_01_and_in_02[0] ? _00_ : in_01_xor_in_02[1];
  assign sum_0[2] = carry_0[1] ? _01_ : in_01_xor_in_02[2];
  assign sum_0[3] = carry_0[2] ? _02_ : in_01_xor_in_02[3];
  assign sum_0[4] = carry_0[3] ? _03_ : in_01_xor_in_02[4];
  assign sum_1[1] = in_01_or_in_02[0] ? _00_ : in_01_xor_in_02[1];
  assign sum_1[2] = carry_1[1] ? _01_ : in_01_xor_in_02[2];
  assign sum_1[3] = carry_1[2] ? _02_ : in_01_xor_in_02[3];
  assign sum_1[4] = carry_1[3] ? _03_ : in_01_xor_in_02[4];
  assign carry_0[1] = in_01_and_in_02[0] ? in_01_or_in_02[1] : in_01_and_in_02[1];
  assign carry_0[2] = carry_0[1] ? in_01_or_in_02[2] : in_01_and_in_02[2];
  assign carry_0[3] = carry_0[2] ? in_01_or_in_02[3] : in_01_and_in_02[3];
  assign sum_0[5] = carry_0[3] ? in_01_or_in_02[4] : in_01_and_in_02[4];
  assign carry_1[1] = in_01_or_in_02[0] ? in_01_or_in_02[1] : in_01_and_in_02[1];
  assign carry_1[2] = carry_1[1] ? in_01_or_in_02[2] : in_01_and_in_02[2];
  assign carry_1[3] = carry_1[2] ? in_01_or_in_02[3] : in_01_and_in_02[3];
  assign sum_1[5] = carry_1[3] ? in_01_or_in_02[4] : in_01_and_in_02[4];
  assign in_01_xor_in_02 = in_01 ^ in_02;
  assign { carry_0[4], carry_0[0] } = { sum_0[5], in_01_and_in_02[0] };
  assign { carry_1[4], carry_1[0] } = { sum_1[5], in_01_or_in_02[0] };
  assign sum_0[0] = in_01_xor_in_02[0];
endmodule

module \$paramod\pe_csla_unit\WIDTH=9 (in_01, in_02, sum_0, sum_1);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [8:0] carry_0;
  wire [8:0] carry_1;
  input [8:0] in_01;
  wire [8:0] in_01_and_in_02;
  wire [8:0] in_01_or_in_02;
  wire [8:0] in_01_xor_in_02;
  input [8:0] in_02;
  output [9:0] sum_0;
  output [9:0] sum_1;
  assign in_01_and_in_02 = in_01 & in_02;
  assign sum_1[0] = ~ in_01_xor_in_02[0];
  assign _00_ = ~ in_01_xor_in_02[1];
  assign _01_ = ~ in_01_xor_in_02[2];
  assign _02_ = ~ in_01_xor_in_02[3];
  assign _03_ = ~ in_01_xor_in_02[4];
  assign _04_ = ~ in_01_xor_in_02[5];
  assign _05_ = ~ in_01_xor_in_02[6];
  assign _06_ = ~ in_01_xor_in_02[7];
  assign _07_ = ~ in_01_xor_in_02[8];
  assign in_01_or_in_02 = in_01 | in_02;
  assign sum_0[1] = in_01_and_in_02[0] ? _00_ : in_01_xor_in_02[1];
  assign sum_0[2] = carry_0[1] ? _01_ : in_01_xor_in_02[2];
  assign sum_0[3] = carry_0[2] ? _02_ : in_01_xor_in_02[3];
  assign sum_0[4] = carry_0[3] ? _03_ : in_01_xor_in_02[4];
  assign sum_0[5] = carry_0[4] ? _04_ : in_01_xor_in_02[5];
  assign sum_0[6] = carry_0[5] ? _05_ : in_01_xor_in_02[6];
  assign sum_0[7] = carry_0[6] ? _06_ : in_01_xor_in_02[7];
  assign sum_0[8] = carry_0[7] ? _07_ : in_01_xor_in_02[8];
  assign sum_1[1] = in_01_or_in_02[0] ? _00_ : in_01_xor_in_02[1];
  assign sum_1[2] = carry_1[1] ? _01_ : in_01_xor_in_02[2];
  assign sum_1[3] = carry_1[2] ? _02_ : in_01_xor_in_02[3];
  assign sum_1[4] = carry_1[3] ? _03_ : in_01_xor_in_02[4];
  assign sum_1[5] = carry_1[4] ? _04_ : in_01_xor_in_02[5];
  assign sum_1[6] = carry_1[5] ? _05_ : in_01_xor_in_02[6];
  assign sum_1[7] = carry_1[6] ? _06_ : in_01_xor_in_02[7];
  assign sum_1[8] = carry_1[7] ? _07_ : in_01_xor_in_02[8];
  assign carry_0[1] = in_01_and_in_02[0] ? in_01_or_in_02[1] : in_01_and_in_02[1];
  assign carry_0[2] = carry_0[1] ? in_01_or_in_02[2] : in_01_and_in_02[2];
  assign carry_0[3] = carry_0[2] ? in_01_or_in_02[3] : in_01_and_in_02[3];
  assign carry_0[4] = carry_0[3] ? in_01_or_in_02[4] : in_01_and_in_02[4];
  assign carry_0[5] = carry_0[4] ? in_01_or_in_02[5] : in_01_and_in_02[5];
  assign carry_0[6] = carry_0[5] ? in_01_or_in_02[6] : in_01_and_in_02[6];
  assign carry_0[7] = carry_0[6] ? in_01_or_in_02[7] : in_01_and_in_02[7];
  assign sum_0[9] = carry_0[7] ? in_01_or_in_02[8] : in_01_and_in_02[8];
  assign carry_1[1] = in_01_or_in_02[0] ? in_01_or_in_02[1] : in_01_and_in_02[1];
  assign carry_1[2] = carry_1[1] ? in_01_or_in_02[2] : in_01_and_in_02[2];
  assign carry_1[3] = carry_1[2] ? in_01_or_in_02[3] : in_01_and_in_02[3];
  assign carry_1[4] = carry_1[3] ? in_01_or_in_02[4] : in_01_and_in_02[4];
  assign carry_1[5] = carry_1[4] ? in_01_or_in_02[5] : in_01_and_in_02[5];
  assign carry_1[6] = carry_1[5] ? in_01_or_in_02[6] : in_01_and_in_02[6];
  assign carry_1[7] = carry_1[6] ? in_01_or_in_02[7] : in_01_and_in_02[7];
  assign sum_1[9] = carry_1[7] ? in_01_or_in_02[8] : in_01_and_in_02[8];
  assign in_01_xor_in_02 = in_01 ^ in_02;
  assign { carry_0[8], carry_0[0] } = { sum_0[9], in_01_and_in_02[0] };
  assign { carry_1[8], carry_1[0] } = { sum_1[9], in_01_or_in_02[0] };
  assign sum_0[0] = in_01_xor_in_02[0];
endmodule

module \$paramod\pe_round\WIDTH=106 (data_in, precision, norm_out, exp_delta);
  wire [10:0] _00_;
  wire [23:0] _01_;
  wire [52:0] _02_;
  wire [52:0] _03_;
  wire [52:0] _04_;
  wire [23:0] _05_;
  wire [23:0] _06_;
  wire [10:0] _07_;
  wire [10:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire [51:0] _17_;
  wire [51:0] _18_;
  wire [51:0] _19_;
  input [105:0] data_in;
  output [1:0] exp_delta;
  wire [23:0] man_16;
  wire [47:0] man_32;
  wire [105:0] man_64;
  wire [10:0] norm_16;
  wire [23:0] norm_32;
  wire [52:0] norm_64;
  output [51:0] norm_out;
  input [1:0] precision;
  assign _03_ = data_in[104:53] + data_in[52];
  assign _04_ = data_in[103:52] + data_in[51];
  assign _05_ = data_in[104:82] + data_in[81];
  assign _06_ = data_in[103:81] + data_in[80];
  assign _07_ = data_in[104:95] + data_in[94];
  assign _08_ = data_in[103:94] + data_in[93];
  assign _09_ = data_in[105] & norm_64[52];
  assign _10_ = data_in[105] & norm_32[23];
  assign _11_ = data_in[105] & norm_16[10];
  assign _12_ = data_in[105] | norm_64[52];
  assign _13_ = data_in[105] | norm_32[23];
  assign _14_ = data_in[105] | norm_16[10];
  function [1:0] _32_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _32_ = b[1:0];
      2'b1?:
        _32_ = b[3:2];
      default:
        _32_ = a;
    endcase
  endfunction
  assign exp_delta = _32_({ _11_, _14_ }, { _09_, _12_, _10_, _13_ }, { _16_, _15_ });
  function [51:0] _33_;
    input [51:0] a;
    input [103:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _33_ = b[51:0];
      2'b1?:
        _33_ = b[103:52];
      default:
        _33_ = a;
    endcase
  endfunction
  assign norm_out = _33_(_19_, { _17_, _18_ }, { _16_, _15_ });
  assign _15_ = precision == 2'h1;
  assign _16_ = precision == 2'h2;
  assign _00_ = data_in[104] ? _08_ : 11'h000;
  assign norm_16 = data_in[105] ? _07_ : _00_;
  assign _01_ = data_in[104] ? _06_ : 24'h000000;
  assign norm_32 = data_in[105] ? _05_ : _01_;
  assign _02_ = data_in[104] ? _04_ : 53'h00000000000000;
  assign norm_64 = data_in[105] ? _03_ : _02_;
  assign _17_ = norm_64[52] ? { 1'h1, norm_64[51:1] } : norm_64[51:0];
  assign _18_ = norm_32[23] ? { 30'h00000001, norm_32[22:1] } : { 29'h00000000, norm_32[22:0] };
  assign _19_ = norm_16[10] ? { 43'h00000000001, norm_16[9:1] } : { 42'h00000000000, norm_16[9:0] };
  assign man_16 = data_in[105:82];
  assign man_32 = data_in[105:58];
  assign man_64 = data_in;
endmodule

module CSA4_2_UNIT(a, b, c, d, c_in, c_out, carry, sum);
  input a;
  wire a_xor_b;
  wire ab_xor_cd;
  input b;
  input c;
  input c_in;
  output c_out;
  wire c_xor_d;
  output carry;
  input d;
  output sum;
  assign c_out = c_xor_d ? b : d;
  assign carry = ab_xor_cd ? c_in : a;
  assign a_xor_b = a ^ b;
  assign c_xor_d = c ^ d;
  assign ab_xor_cd = a_xor_b ^ c_xor_d;
  assign sum = ab_xor_cd ^ c_in;
endmodule

module PE_16in_top(clk, rstn, mode_sel, A, B, result, mode_out);
  input [255:0] A;
  input [255:0] B;
  input clk;
  output [1:0] mode_out;
  input [1:0] mode_sel;
  wire [1:0] mode_sel_pip0;
  wire [1:0] mode_sel_pip1;
  wire [1:0] mode_sel_pip2;
  wire [1:0] mode_sel_pip3;
  wire [9:0] o_exp_AB0;
  wire [9:0] o_exp_AB1;
  wire [9:0] o_exp_AB2;
  wire [9:0] o_exp_AB3;
  wire [9:0] o_exp_AB4;
  wire [9:0] o_exp_AB5;
  wire [9:0] o_exp_AB6;
  wire [9:0] o_exp_AB7;
  wire [9:0] o_exp_AB8;
  wire [9:0] o_exp_AB9;
  wire [9:0] o_exp_ABA;
  wire [9:0] o_exp_ABB;
  wire [9:0] o_exp_ABC;
  wire [9:0] o_exp_ABD;
  wire [9:0] o_exp_ABE;
  wire [9:0] o_exp_ABF;
  wire [11:0] o_exp_AB_fp64;
  wire [11:0] o_exp_AB_fp64_pip1;
  wire [11:0] o_exp_AB_fp64_pip2;
  wire [9:0] o_exp_max;
  wire [9:0] o_exp_max_pip2;
  wire o_fp64_imbitA;
  wire o_fp64_imbitB;
  wire [6:0] o_lza_cnt;
  wire o_lza_invalid;
  wire [12:0] o_man_A0;
  wire [12:0] o_man_A1;
  wire [12:0] o_man_A2;
  wire [12:0] o_man_A3;
  wire [12:0] o_man_A4;
  wire [12:0] o_man_A5;
  wire [12:0] o_man_A6;
  wire [12:0] o_man_A7;
  wire [12:0] o_man_A8;
  wire [12:0] o_man_A9;
  wire [12:0] o_man_AA;
  wire [12:0] o_man_AB;
  wire [25:0] o_man_AB0;
  wire [25:0] o_man_AB1;
  wire [25:0] o_man_AB2;
  wire [25:0] o_man_AB3;
  wire [25:0] o_man_AB4;
  wire [25:0] o_man_AB5;
  wire [25:0] o_man_AB6;
  wire [25:0] o_man_AB7;
  wire [25:0] o_man_AB8;
  wire [25:0] o_man_AB9;
  wire [25:0] o_man_ABA;
  wire [25:0] o_man_ABB;
  wire [25:0] o_man_ABC;
  wire [25:0] o_man_ABD;
  wire [25:0] o_man_ABE;
  wire [25:0] o_man_ABF;
  wire [12:0] o_man_AC;
  wire [12:0] o_man_AD;
  wire [12:0] o_man_AE;
  wire [12:0] o_man_AF;
  wire [52:0] o_man_A_53b;
  wire [12:0] o_man_B0;
  wire [12:0] o_man_B1;
  wire [12:0] o_man_B2;
  wire [12:0] o_man_B3;
  wire [12:0] o_man_B4;
  wire [12:0] o_man_B5;
  wire [12:0] o_man_B6;
  wire [12:0] o_man_B7;
  wire [12:0] o_man_B8;
  wire [12:0] o_man_B9;
  wire [12:0] o_man_BA;
  wire [12:0] o_man_BB;
  wire [12:0] o_man_BC;
  wire [12:0] o_man_BD;
  wire [12:0] o_man_BE;
  wire [12:0] o_man_BF;
  wire [52:0] o_man_B_53b;
  wire [63:0] o_norm_result;
  wire [106:0] o_result_pip2;
  wire [9:0] o_shift0;
  wire [9:0] o_shift1;
  wire [9:0] o_shift2;
  wire [9:0] o_shift3;
  wire [9:0] o_shift4;
  wire [9:0] o_shift5;
  wire [9:0] o_shift6;
  wire [9:0] o_shift7;
  wire [9:0] o_shift8;
  wire [9:0] o_shift9;
  wire [9:0] o_shiftA;
  wire [9:0] o_shiftB;
  wire [9:0] o_shiftC;
  wire [9:0] o_shiftD;
  wire [9:0] o_shiftE;
  wire [9:0] o_shiftF;
  wire [15:0] o_sign_AB;
  wire o_sign_AB_fp64;
  wire o_sign_AB_fp64_pip1;
  wire o_sign_AB_fp64_pip2;
  wire [15:0] o_sign_AB_pip1;
  wire o_sign_pip2;
  output [63:0] result;
  input rstn;
  input_processing U_input_processing (
    .A(A),
    .B(B),
    .clk(clk),
    .mode_sel(mode_sel),
    .mode_sel_pip0(mode_sel_pip0),
    .o_exp_AB0(o_exp_AB0),
    .o_exp_AB1(o_exp_AB1),
    .o_exp_AB2(o_exp_AB2),
    .o_exp_AB3(o_exp_AB3),
    .o_exp_AB4(o_exp_AB4),
    .o_exp_AB5(o_exp_AB5),
    .o_exp_AB6(o_exp_AB6),
    .o_exp_AB7(o_exp_AB7),
    .o_exp_AB8(o_exp_AB8),
    .o_exp_AB9(o_exp_AB9),
    .o_exp_ABA(o_exp_ABA),
    .o_exp_ABB(o_exp_ABB),
    .o_exp_ABC(o_exp_ABC),
    .o_exp_ABD(o_exp_ABD),
    .o_exp_ABE(o_exp_ABE),
    .o_exp_ABF(o_exp_ABF),
    .o_exp_AB_fp64(o_exp_AB_fp64),
    .o_fp64_imbitA(o_fp64_imbitA),
    .o_fp64_imbitB(o_fp64_imbitB),
    .o_man_A0(o_man_A0),
    .o_man_A1(o_man_A1),
    .o_man_A2(o_man_A2),
    .o_man_A3(o_man_A3),
    .o_man_A4(o_man_A4),
    .o_man_A5(o_man_A5),
    .o_man_A6(o_man_A6),
    .o_man_A7(o_man_A7),
    .o_man_A8(o_man_A8),
    .o_man_A9(o_man_A9),
    .o_man_AA(o_man_AA),
    .o_man_AB(o_man_AB),
    .o_man_AC(o_man_AC),
    .o_man_AD(o_man_AD),
    .o_man_AE(o_man_AE),
    .o_man_AF(o_man_AF),
    .o_man_B0(o_man_B0),
    .o_man_B1(o_man_B1),
    .o_man_B2(o_man_B2),
    .o_man_B3(o_man_B3),
    .o_man_B4(o_man_B4),
    .o_man_B5(o_man_B5),
    .o_man_B6(o_man_B6),
    .o_man_B7(o_man_B7),
    .o_man_B8(o_man_B8),
    .o_man_B9(o_man_B9),
    .o_man_BA(o_man_BA),
    .o_man_BB(o_man_BB),
    .o_man_BC(o_man_BC),
    .o_man_BD(o_man_BD),
    .o_man_BE(o_man_BE),
    .o_man_BF(o_man_BF),
    .o_sign_AB(o_sign_AB),
    .o_sign_AB_fp64(o_sign_AB_fp64),
    .rstn(rstn)
  );
  pip1_processing U_pip1_processing (
    .clk(clk),
    .i_exp_AB0(o_exp_AB0),
    .i_exp_AB1(o_exp_AB1),
    .i_exp_AB2(o_exp_AB2),
    .i_exp_AB3(o_exp_AB3),
    .i_exp_AB4(o_exp_AB4),
    .i_exp_AB5(o_exp_AB5),
    .i_exp_AB6(o_exp_AB6),
    .i_exp_AB7(o_exp_AB7),
    .i_exp_AB8(o_exp_AB8),
    .i_exp_AB9(o_exp_AB9),
    .i_exp_ABA(o_exp_ABA),
    .i_exp_ABB(o_exp_ABB),
    .i_exp_ABC(o_exp_ABC),
    .i_exp_ABD(o_exp_ABD),
    .i_exp_ABE(o_exp_ABE),
    .i_exp_ABF(o_exp_ABF),
    .i_exp_AB_fp64(o_exp_AB_fp64),
    .i_fp64_imbitA(o_fp64_imbitA),
    .i_fp64_imbitB(o_fp64_imbitB),
    .i_man_A0(o_man_A0),
    .i_man_A1(o_man_A1),
    .i_man_A2(o_man_A2),
    .i_man_A3(o_man_A3),
    .i_man_A4(o_man_A4),
    .i_man_A5(o_man_A5),
    .i_man_A6(o_man_A6),
    .i_man_A7(o_man_A7),
    .i_man_A8(o_man_A8),
    .i_man_A9(o_man_A9),
    .i_man_AA(o_man_AA),
    .i_man_AB(o_man_AB),
    .i_man_AC(o_man_AC),
    .i_man_AD(o_man_AD),
    .i_man_AE(o_man_AE),
    .i_man_AF(o_man_AF),
    .i_man_B0(o_man_B0),
    .i_man_B1(o_man_B1),
    .i_man_B2(o_man_B2),
    .i_man_B3(o_man_B3),
    .i_man_B4(o_man_B4),
    .i_man_B5(o_man_B5),
    .i_man_B6(o_man_B6),
    .i_man_B7(o_man_B7),
    .i_man_B8(o_man_B8),
    .i_man_B9(o_man_B9),
    .i_man_BA(o_man_BA),
    .i_man_BB(o_man_BB),
    .i_man_BC(o_man_BC),
    .i_man_BD(o_man_BD),
    .i_man_BE(o_man_BE),
    .i_man_BF(o_man_BF),
    .i_sign_AB(o_sign_AB),
    .i_sign_AB_fp64(o_sign_AB_fp64),
    .mode_sel_pip0(mode_sel_pip0),
    .mode_sel_pip1(mode_sel_pip1),
    .o_exp_AB_fp64(o_exp_AB_fp64_pip1),
    .o_exp_max(o_exp_max),
    .o_man_AB0(o_man_AB0),
    .o_man_AB1(o_man_AB1),
    .o_man_AB2(o_man_AB2),
    .o_man_AB3(o_man_AB3),
    .o_man_AB4(o_man_AB4),
    .o_man_AB5(o_man_AB5),
    .o_man_AB6(o_man_AB6),
    .o_man_AB7(o_man_AB7),
    .o_man_AB8(o_man_AB8),
    .o_man_AB9(o_man_AB9),
    .o_man_ABA(o_man_ABA),
    .o_man_ABB(o_man_ABB),
    .o_man_ABC(o_man_ABC),
    .o_man_ABD(o_man_ABD),
    .o_man_ABE(o_man_ABE),
    .o_man_ABF(o_man_ABF),
    .o_man_A_53b(o_man_A_53b),
    .o_man_B_53b(o_man_B_53b),
    .o_shift0(o_shift0),
    .o_shift1(o_shift1),
    .o_shift2(o_shift2),
    .o_shift3(o_shift3),
    .o_shift4(o_shift4),
    .o_shift5(o_shift5),
    .o_shift6(o_shift6),
    .o_shift7(o_shift7),
    .o_shift8(o_shift8),
    .o_shift9(o_shift9),
    .o_shiftA(o_shiftA),
    .o_shiftB(o_shiftB),
    .o_shiftC(o_shiftC),
    .o_shiftD(o_shiftD),
    .o_shiftE(o_shiftE),
    .o_shiftF(o_shiftF),
    .o_sign_AB(o_sign_AB_pip1),
    .o_sign_AB_fp64(o_sign_AB_fp64_pip1),
    .rstn(rstn)
  );
  pip2_processing U_pip2_processing (
    .clk(clk),
    .i_exp_AB_fp64_pip1(o_exp_AB_fp64_pip1),
    .i_exp_max(o_exp_max),
    .i_man_AB0(o_man_AB0),
    .i_man_AB1(o_man_AB1),
    .i_man_AB2(o_man_AB2),
    .i_man_AB3(o_man_AB3),
    .i_man_AB4(o_man_AB4),
    .i_man_AB5(o_man_AB5),
    .i_man_AB6(o_man_AB6),
    .i_man_AB7(o_man_AB7),
    .i_man_AB8(o_man_AB8),
    .i_man_AB9(o_man_AB9),
    .i_man_ABA(o_man_ABA),
    .i_man_ABB(o_man_ABB),
    .i_man_ABC(o_man_ABC),
    .i_man_ABD(o_man_ABD),
    .i_man_ABE(o_man_ABE),
    .i_man_ABF(o_man_ABF),
    .i_man_A_53b(o_man_A_53b),
    .i_man_B_53b(o_man_B_53b),
    .i_shift0(o_shift0),
    .i_shift1(o_shift1),
    .i_shift2(o_shift2),
    .i_shift3(o_shift3),
    .i_shift4(o_shift4),
    .i_shift5(o_shift5),
    .i_shift6(o_shift6),
    .i_shift7(o_shift7),
    .i_shift8(o_shift8),
    .i_shift9(o_shift9),
    .i_shiftA(o_shiftA),
    .i_shiftB(o_shiftB),
    .i_shiftC(o_shiftC),
    .i_shiftD(o_shiftD),
    .i_shiftE(o_shiftE),
    .i_shiftF(o_shiftF),
    .i_sign_AB_fp64_pip1(o_sign_AB_fp64_pip1),
    .i_sign_AB_pip1(o_sign_AB_pip1),
    .mode_sel_pip1(mode_sel_pip1),
    .mode_sel_pip2(mode_sel_pip2),
    .o_exp_AB_fp64_pip2(o_exp_AB_fp64_pip2),
    .o_exp_max_pip2(o_exp_max_pip2),
    .o_lza_cnt(o_lza_cnt),
    .o_lza_invalid(o_lza_invalid),
    .o_result_pip2(o_result_pip2),
    .o_sign_AB_fp64_pip2(o_sign_AB_fp64_pip2),
    .o_sign_pip2(o_sign_pip2),
    .rstn(rstn)
  );
  pip3_processing U_pip3_processing (
    .clk(clk),
    .i_exp_AB_fp64_pip2(o_exp_AB_fp64_pip2),
    .i_exp_max_pip2(o_exp_max_pip2),
    .i_lza_cnt(o_lza_cnt),
    .i_result_pip2(o_result_pip2),
    .i_sign_AB_fp64_pip2(o_sign_AB_fp64_pip2),
    .i_sign_pip2(o_sign_pip2),
    .mode_sel_pip2(mode_sel_pip2),
    .mode_sel_pip3(mode_sel_pip3),
    .o_norm_result(o_norm_result),
    .rstn(rstn)
  );
  assign mode_out = mode_sel_pip3;
  assign result = o_norm_result;
endmodule

module input_processing(clk, rstn, A, B, mode_sel, o_sign_AB, o_sign_AB_fp64, o_exp_AB_fp64, o_exp_AB0, o_exp_AB1, o_exp_AB2, o_exp_AB3, o_exp_AB4, o_exp_AB5, o_exp_AB6, o_exp_AB7, o_exp_AB8, o_exp_AB9, o_exp_ABA, o_exp_ABB, o_exp_ABC, o_exp_ABD, o_exp_ABE, o_exp_ABF, o_man_A0, o_man_A1, o_man_A2, o_man_A3, o_man_A4, o_man_A5, o_man_A6, o_man_A7, o_man_A8, o_man_A9, o_man_AA, o_man_AB, o_man_AC, o_man_AD, o_man_AE, o_man_AF, o_fp64_imbitA, o_man_B0, o_man_B1, o_man_B2, o_man_B3, o_man_B4, o_man_B5, o_man_B6, o_man_B7, o_man_B8, o_man_B9, o_man_BA, o_man_BB, o_man_BC, o_man_BD, o_man_BE, o_man_BF, o_fp64_imbitB, mode_sel_pip0);
  wire [9:0] _000_;
  wire [9:0] _001_;
  wire [9:0] _002_;
  wire [9:0] _003_;
  wire [9:0] _004_;
  wire [9:0] _005_;
  wire [9:0] _006_;
  wire [9:0] _007_;
  wire [9:0] _008_;
  wire [9:0] _009_;
  wire [9:0] _010_;
  wire [9:0] _011_;
  wire [9:0] _012_;
  wire [9:0] _013_;
  wire [9:0] _014_;
  wire [9:0] _015_;
  wire [11:0] _016_;
  wire _017_;
  wire _018_;
  wire [12:0] _019_;
  wire [12:0] _020_;
  wire [12:0] _021_;
  wire [12:0] _022_;
  wire [12:0] _023_;
  wire [12:0] _024_;
  wire [12:0] _025_;
  wire [12:0] _026_;
  wire [12:0] _027_;
  wire [12:0] _028_;
  wire [12:0] _029_;
  wire [12:0] _030_;
  wire [12:0] _031_;
  wire [12:0] _032_;
  wire [12:0] _033_;
  wire [12:0] _034_;
  wire [12:0] _035_;
  wire [12:0] _036_;
  wire [12:0] _037_;
  wire [12:0] _038_;
  wire [12:0] _039_;
  wire [12:0] _040_;
  wire [12:0] _041_;
  wire [12:0] _042_;
  wire [12:0] _043_;
  wire [12:0] _044_;
  wire [12:0] _045_;
  wire [12:0] _046_;
  wire [12:0] _047_;
  wire [12:0] _048_;
  wire [12:0] _049_;
  wire [12:0] _050_;
  wire [15:0] _051_;
  wire _052_;
  wire [9:0] _053_;
  wire [9:0] _054_;
  wire [9:0] _055_;
  wire [9:0] _056_;
  wire [9:0] _057_;
  wire [9:0] _058_;
  wire [9:0] _059_;
  wire [9:0] _060_;
  wire [9:0] _061_;
  wire [9:0] _062_;
  wire [9:0] _063_;
  wire [9:0] _064_;
  wire [9:0] _065_;
  wire [9:0] _066_;
  wire [9:0] _067_;
  wire [9:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  wire [31:0] _074_;
  wire [31:0] _075_;
  wire [31:0] _076_;
  wire [31:0] _077_;
  wire [31:0] _078_;
  wire [31:0] _079_;
  wire [31:0] _080_;
  wire [11:0] _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire [9:0] _128_;
  wire [9:0] _129_;
  wire [9:0] _130_;
  wire [9:0] _131_;
  wire [9:0] _132_;
  wire [9:0] _133_;
  wire [9:0] _134_;
  wire [9:0] _135_;
  wire [9:0] _136_;
  wire [9:0] _137_;
  wire [9:0] _138_;
  wire [9:0] _139_;
  wire [9:0] _140_;
  wire [9:0] _141_;
  wire [9:0] _142_;
  wire [9:0] _143_;
  wire [31:0] _144_;
  wire [31:0] _145_;
  wire [31:0] _146_;
  wire [31:0] _147_;
  wire [31:0] _148_;
  wire [31:0] _149_;
  wire [31:0] _150_;
  wire [31:0] _151_;
  wire [31:0] _152_;
  wire [31:0] _153_;
  wire [31:0] _154_;
  wire [31:0] _155_;
  wire [11:0] _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  input [255:0] A;
  input [255:0] B;
  input clk;
  wire [15:0] fp16Aiszero;
  wire [15:0] fp16Biszero;
  wire fp16_imbitA0;
  wire fp16_imbitA1;
  wire fp16_imbitA2;
  wire fp16_imbitA3;
  wire fp16_imbitA4;
  wire fp16_imbitA5;
  wire fp16_imbitA6;
  wire fp16_imbitA7;
  wire fp16_imbitA8;
  wire fp16_imbitA9;
  wire fp16_imbitAA;
  wire fp16_imbitAB;
  wire fp16_imbitAC;
  wire fp16_imbitAD;
  wire fp16_imbitAE;
  wire fp16_imbitAF;
  wire fp16_imbitB0;
  wire fp16_imbitB1;
  wire fp16_imbitB2;
  wire fp16_imbitB3;
  wire fp16_imbitB4;
  wire fp16_imbitB5;
  wire fp16_imbitB6;
  wire fp16_imbitB7;
  wire fp16_imbitB8;
  wire fp16_imbitB9;
  wire fp16_imbitBA;
  wire fp16_imbitBB;
  wire fp16_imbitBC;
  wire fp16_imbitBD;
  wire fp16_imbitBE;
  wire fp16_imbitBF;
  wire [3:0] fp32Aiszero;
  wire [3:0] fp32Biszero;
  wire fp32_imbitA0;
  wire fp32_imbitA1;
  wire fp32_imbitA2;
  wire fp32_imbitA3;
  wire fp32_imbitB0;
  wire fp32_imbitB1;
  wire fp32_imbitB2;
  wire fp32_imbitB3;
  wire fp64Aiszero;
  wire fp64Biszero;
  wire fp64_imbitA;
  wire fp64_imbitB;
  input [1:0] mode_sel;
  output [1:0] mode_sel_pip0;
  reg [1:0] mode_sel_pip0;
  output [9:0] o_exp_AB0;
  reg [9:0] o_exp_AB0;
  output [9:0] o_exp_AB1;
  reg [9:0] o_exp_AB1;
  output [9:0] o_exp_AB2;
  reg [9:0] o_exp_AB2;
  output [9:0] o_exp_AB3;
  reg [9:0] o_exp_AB3;
  output [9:0] o_exp_AB4;
  reg [9:0] o_exp_AB4;
  output [9:0] o_exp_AB5;
  reg [9:0] o_exp_AB5;
  output [9:0] o_exp_AB6;
  reg [9:0] o_exp_AB6;
  output [9:0] o_exp_AB7;
  reg [9:0] o_exp_AB7;
  output [9:0] o_exp_AB8;
  reg [9:0] o_exp_AB8;
  output [9:0] o_exp_AB9;
  reg [9:0] o_exp_AB9;
  output [9:0] o_exp_ABA;
  reg [9:0] o_exp_ABA;
  output [9:0] o_exp_ABB;
  reg [9:0] o_exp_ABB;
  output [9:0] o_exp_ABC;
  reg [9:0] o_exp_ABC;
  output [9:0] o_exp_ABD;
  reg [9:0] o_exp_ABD;
  output [9:0] o_exp_ABE;
  reg [9:0] o_exp_ABE;
  output [9:0] o_exp_ABF;
  reg [9:0] o_exp_ABF;
  output [11:0] o_exp_AB_fp64;
  reg [11:0] o_exp_AB_fp64;
  output o_fp64_imbitA;
  reg o_fp64_imbitA;
  output o_fp64_imbitB;
  reg o_fp64_imbitB;
  output [12:0] o_man_A0;
  reg [12:0] o_man_A0;
  output [12:0] o_man_A1;
  reg [12:0] o_man_A1;
  output [12:0] o_man_A2;
  reg [12:0] o_man_A2;
  output [12:0] o_man_A3;
  reg [12:0] o_man_A3;
  output [12:0] o_man_A4;
  reg [12:0] o_man_A4;
  output [12:0] o_man_A5;
  reg [12:0] o_man_A5;
  output [12:0] o_man_A6;
  reg [12:0] o_man_A6;
  output [12:0] o_man_A7;
  reg [12:0] o_man_A7;
  output [12:0] o_man_A8;
  reg [12:0] o_man_A8;
  output [12:0] o_man_A9;
  reg [12:0] o_man_A9;
  output [12:0] o_man_AA;
  reg [12:0] o_man_AA;
  output [12:0] o_man_AB;
  reg [12:0] o_man_AB;
  output [12:0] o_man_AC;
  reg [12:0] o_man_AC;
  output [12:0] o_man_AD;
  reg [12:0] o_man_AD;
  output [12:0] o_man_AE;
  reg [12:0] o_man_AE;
  output [12:0] o_man_AF;
  reg [12:0] o_man_AF;
  output [12:0] o_man_B0;
  reg [12:0] o_man_B0;
  output [12:0] o_man_B1;
  reg [12:0] o_man_B1;
  output [12:0] o_man_B2;
  reg [12:0] o_man_B2;
  output [12:0] o_man_B3;
  reg [12:0] o_man_B3;
  output [12:0] o_man_B4;
  reg [12:0] o_man_B4;
  output [12:0] o_man_B5;
  reg [12:0] o_man_B5;
  output [12:0] o_man_B6;
  reg [12:0] o_man_B6;
  output [12:0] o_man_B7;
  reg [12:0] o_man_B7;
  output [12:0] o_man_B8;
  reg [12:0] o_man_B8;
  output [12:0] o_man_B9;
  reg [12:0] o_man_B9;
  output [12:0] o_man_BA;
  reg [12:0] o_man_BA;
  output [12:0] o_man_BB;
  reg [12:0] o_man_BB;
  output [12:0] o_man_BC;
  reg [12:0] o_man_BC;
  output [12:0] o_man_BD;
  reg [12:0] o_man_BD;
  output [12:0] o_man_BE;
  reg [12:0] o_man_BE;
  output [12:0] o_man_BF;
  reg [12:0] o_man_BF;
  output [15:0] o_sign_AB;
  reg [15:0] o_sign_AB;
  output o_sign_AB_fp64;
  reg o_sign_AB_fp64;
  input rstn;
  assign _053_ = A[14:10] + B[14:10];
  assign _054_ = A[30:26] + B[30:26];
  assign _055_ = A[46:42] + B[46:42];
  assign _056_ = A[62:58] + B[62:58];
  assign _057_ = A[78:74] + B[78:74];
  assign _058_ = A[94:90] + B[94:90];
  assign _059_ = A[110:106] + B[110:106];
  assign _060_ = A[126:122] + B[126:122];
  assign _061_ = A[142:138] + B[142:138];
  assign _062_ = A[158:154] + B[158:154];
  assign _063_ = A[174:170] + B[174:170];
  assign _064_ = A[190:186] + B[190:186];
  assign _065_ = A[206:202] + B[206:202];
  assign _066_ = A[222:218] + B[222:218];
  assign _067_ = A[238:234] + B[238:234];
  assign _068_ = A[254:250] + B[254:250];
  assign _070_ = _069_ + 32'd26;
  assign _071_ = _069_ + 32'd13;
  assign _069_ = A[30:23] + B[30:23];
  assign _073_ = _072_ + 32'd26;
  assign _074_ = _072_ + 32'd13;
  assign _072_ = A[62:55] + B[62:55];
  assign _076_ = _075_ + 32'd26;
  assign _077_ = _075_ + 32'd13;
  assign _075_ = A[94:87] + B[94:87];
  assign _079_ = _078_ + 32'd26;
  assign _080_ = _078_ + 32'd13;
  assign _078_ = A[126:119] + B[126:119];
  assign _081_ = A[62:52] + B[62:52];
  assign _082_ = | { _106_, _105_ };
  assign fp16Aiszero[0] = ! { fp16_imbitA0, A[9:0] };
  assign fp16Aiszero[1] = ! { fp16_imbitA1, A[25:16] };
  assign fp16Aiszero[2] = ! { fp16_imbitA2, A[41:32] };
  assign fp16Aiszero[3] = ! { fp16_imbitA3, A[57:48] };
  assign fp16Aiszero[4] = ! { fp16_imbitA4, A[73:64] };
  assign fp16Aiszero[5] = ! { fp16_imbitA5, A[89:80] };
  assign fp16Aiszero[6] = ! { fp16_imbitA6, A[105:96] };
  assign fp16Aiszero[7] = ! { fp16_imbitA7, A[121:112] };
  assign fp16Aiszero[8] = ! { fp16_imbitA8, A[137:128] };
  assign fp16Aiszero[9] = ! { fp16_imbitA9, A[153:144] };
  assign fp16Aiszero[10] = ! { fp16_imbitAA, A[169:160] };
  assign fp16Aiszero[11] = ! { fp16_imbitAB, A[185:176] };
  assign fp16Aiszero[12] = ! { fp16_imbitAC, A[201:192] };
  assign fp16Aiszero[13] = ! { fp16_imbitAD, A[217:208] };
  assign fp16Aiszero[14] = ! { fp16_imbitAE, A[233:224] };
  assign fp16Aiszero[15] = ! { fp16_imbitAF, A[249:240] };
  assign fp16Biszero[0] = ! { fp16_imbitB0, B[9:0] };
  assign fp16Biszero[1] = ! { fp16_imbitB1, B[25:16] };
  assign fp16Biszero[2] = ! { fp16_imbitB2, B[41:32] };
  assign fp16Biszero[3] = ! { fp16_imbitB3, B[57:48] };
  assign fp16Biszero[4] = ! { fp16_imbitB4, B[73:64] };
  assign fp16Biszero[5] = ! { fp16_imbitB5, B[89:80] };
  assign fp16Biszero[6] = ! { fp16_imbitB6, B[105:96] };
  assign fp16Biszero[7] = ! { fp16_imbitB7, B[121:112] };
  assign fp16Biszero[8] = ! { fp16_imbitB8, B[137:128] };
  assign fp16Biszero[9] = ! { fp16_imbitB9, B[153:144] };
  assign fp16Biszero[10] = ! { fp16_imbitBA, B[169:160] };
  assign fp16Biszero[11] = ! { fp16_imbitBB, B[185:176] };
  assign fp16Biszero[12] = ! { fp16_imbitBC, B[201:192] };
  assign fp16Biszero[13] = ! { fp16_imbitBD, B[217:208] };
  assign fp16Biszero[14] = ! { fp16_imbitBE, B[233:224] };
  assign fp16Biszero[15] = ! { fp16_imbitBF, B[249:240] };
  assign fp32Aiszero[0] = ! { fp32_imbitA0, A[22:0] };
  assign fp32Aiszero[1] = ! { fp32_imbitA1, A[54:32] };
  assign fp32Aiszero[2] = ! { fp32_imbitA2, A[86:64] };
  assign fp32Aiszero[3] = ! { fp32_imbitA3, A[118:96] };
  assign fp32Biszero[0] = ! { fp32_imbitB0, B[22:0] };
  assign fp32Biszero[1] = ! { fp32_imbitB1, B[54:32] };
  assign fp32Biszero[2] = ! { fp32_imbitB2, B[86:64] };
  assign fp32Biszero[3] = ! { fp32_imbitB3, B[118:96] };
  assign fp64Aiszero = ! { fp64_imbitA, A[51:0] };
  assign fp64Biszero = ! { fp64_imbitB, B[51:0] };
  assign _083_ = fp16Biszero[0] | fp16Aiszero[0];
  assign _084_ = fp16Biszero[1] | fp16Aiszero[1];
  assign _085_ = fp16Biszero[2] | fp16Aiszero[2];
  assign _086_ = fp16Biszero[3] | fp16Aiszero[3];
  assign _087_ = fp16Biszero[4] | fp16Aiszero[4];
  assign _088_ = fp16Biszero[5] | fp16Aiszero[5];
  assign _089_ = fp16Biszero[6] | fp16Aiszero[6];
  assign _090_ = fp16Biszero[7] | fp16Aiszero[7];
  assign _091_ = fp16Biszero[8] | fp16Aiszero[8];
  assign _092_ = fp16Biszero[9] | fp16Aiszero[9];
  assign _093_ = fp16Biszero[10] | fp16Aiszero[10];
  assign _094_ = fp16Biszero[11] | fp16Aiszero[11];
  assign _095_ = fp16Biszero[12] | fp16Aiszero[12];
  assign _096_ = fp16Biszero[13] | fp16Aiszero[13];
  assign _097_ = fp16Biszero[14] | fp16Aiszero[14];
  assign _098_ = fp16Biszero[15] | fp16Aiszero[15];
  assign _099_ = fp32Biszero[0] | fp32Aiszero[0];
  assign _100_ = fp32Biszero[1] | fp32Aiszero[1];
  assign _101_ = fp32Biszero[2] | fp32Aiszero[2];
  assign _102_ = fp32Biszero[3] | fp32Aiszero[3];
  assign _103_ = fp64Biszero | fp64Aiszero;
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mode_sel_pip0 <= 2'h3;
    else
      mode_sel_pip0 <= mode_sel;
  always @(posedge clk)
      o_man_A0 <= _019_;
  always @(posedge clk)
      o_man_A1 <= _020_;
  always @(posedge clk)
      o_man_A2 <= _021_;
  always @(posedge clk)
      o_man_A3 <= _022_;
  always @(posedge clk)
      o_man_A4 <= _023_;
  always @(posedge clk)
      o_man_A5 <= _024_;
  always @(posedge clk)
      o_man_A6 <= _025_;
  always @(posedge clk)
      o_man_A7 <= _026_;
  always @(posedge clk)
      o_man_A8 <= _027_;
  always @(posedge clk)
      o_man_A9 <= _028_;
  always @(posedge clk)
      o_man_AA <= _029_;
  always @(posedge clk)
      o_man_AB <= _030_;
  always @(posedge clk)
      o_man_AC <= _031_;
  always @(posedge clk)
      o_man_AD <= _032_;
  always @(posedge clk)
      o_man_AE <= _033_;
  always @(posedge clk)
      o_man_AF <= _034_;
  always @(posedge clk)
      o_fp64_imbitA <= _017_;
  always @(posedge clk)
      o_man_B0 <= _035_;
  always @(posedge clk)
      o_man_B1 <= _036_;
  always @(posedge clk)
      o_man_B2 <= _037_;
  always @(posedge clk)
      o_man_B3 <= _038_;
  always @(posedge clk)
      o_man_B4 <= _039_;
  always @(posedge clk)
      o_man_B5 <= _040_;
  always @(posedge clk)
      o_man_B6 <= _041_;
  always @(posedge clk)
      o_man_B7 <= _042_;
  always @(posedge clk)
      o_man_B8 <= _043_;
  always @(posedge clk)
      o_man_B9 <= _044_;
  always @(posedge clk)
      o_man_BA <= _045_;
  always @(posedge clk)
      o_man_BB <= _046_;
  always @(posedge clk)
      o_man_BC <= _047_;
  always @(posedge clk)
      o_man_BD <= _048_;
  always @(posedge clk)
      o_man_BE <= _049_;
  always @(posedge clk)
      o_man_BF <= _050_;
  always @(posedge clk)
      o_fp64_imbitB <= _018_;
  always @(posedge clk)
      o_exp_AB_fp64 <= _016_;
  always @(posedge clk)
      o_exp_AB0 <= _000_;
  always @(posedge clk)
      o_exp_AB1 <= _001_;
  always @(posedge clk)
      o_exp_AB2 <= _002_;
  always @(posedge clk)
      o_exp_AB3 <= _003_;
  always @(posedge clk)
      o_exp_AB4 <= _004_;
  always @(posedge clk)
      o_exp_AB5 <= _005_;
  always @(posedge clk)
      o_exp_AB6 <= _006_;
  always @(posedge clk)
      o_exp_AB7 <= _007_;
  always @(posedge clk)
      o_exp_AB8 <= _008_;
  always @(posedge clk)
      o_exp_AB9 <= _009_;
  always @(posedge clk)
      o_exp_ABA <= _010_;
  always @(posedge clk)
      o_exp_ABB <= _011_;
  always @(posedge clk)
      o_exp_ABC <= _012_;
  always @(posedge clk)
      o_exp_ABD <= _013_;
  always @(posedge clk)
      o_exp_ABE <= _014_;
  always @(posedge clk)
      o_exp_ABF <= _015_;
  always @(posedge clk)
      o_sign_AB <= _051_;
  always @(posedge clk)
      o_sign_AB_fp64 <= _052_;
  function [0:0] _320_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _320_ = b[0:0];
      2'b1?:
        _320_ = b[1:1];
      default:
        _320_ = a;
    endcase
  endfunction
  assign _018_ = _320_(o_fp64_imbitB, { 1'h0, fp64_imbitB }, { _082_, _104_ });
  function [12:0] _321_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _321_ = b[12:0];
      3'b?1?:
        _321_ = b[25:13];
      3'b1??:
        _321_ = b[38:26];
      default:
        _321_ = a;
    endcase
  endfunction
  assign _050_ = _321_(13'h0000, { 2'h0, fp16_imbitB9, B[249:240], B[108:96], B[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _322_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _322_ = b[12:0];
      3'b?1?:
        _322_ = b[25:13];
      3'b1??:
        _322_ = b[38:26];
      default:
        _322_ = a;
    endcase
  endfunction
  assign _049_ = _322_(13'h0000, { 2'h0, fp16_imbitB9, B[233:224], 2'h0, fp32_imbitB3, B[118:109], B[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _323_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _323_ = b[12:0];
      3'b?1?:
        _323_ = b[25:13];
      3'b1??:
        _323_ = b[38:26];
      default:
        _323_ = a;
    endcase
  endfunction
  assign _048_ = _323_(13'h0000, { 2'h0, fp16_imbitB9, B[217:208], B[108:96], B[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _324_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _324_ = b[12:0];
      3'b?1?:
        _324_ = b[25:13];
      3'b1??:
        _324_ = b[38:26];
      default:
        _324_ = a;
    endcase
  endfunction
  assign _047_ = _324_(13'h0000, { 2'h0, fp16_imbitB9, B[201:192], 2'h0, fp32_imbitB3, B[118:109], B[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _325_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _325_ = b[12:0];
      3'b?1?:
        _325_ = b[25:13];
      3'b1??:
        _325_ = b[38:26];
      default:
        _325_ = a;
    endcase
  endfunction
  assign _046_ = _325_(13'h0000, { 2'h0, fp16_imbitB9, B[185:176], B[76:64], B[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _326_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _326_ = b[12:0];
      3'b?1?:
        _326_ = b[25:13];
      3'b1??:
        _326_ = b[38:26];
      default:
        _326_ = a;
    endcase
  endfunction
  assign _045_ = _326_(13'h0000, { 2'h0, fp16_imbitB9, B[169:160], 2'h0, fp32_imbitB2, B[86:77], B[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _327_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _327_ = b[12:0];
      3'b?1?:
        _327_ = b[25:13];
      3'b1??:
        _327_ = b[38:26];
      default:
        _327_ = a;
    endcase
  endfunction
  assign _044_ = _327_(13'h0000, { 2'h0, fp16_imbitB9, B[153:144], B[76:64], B[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _328_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _328_ = b[12:0];
      3'b?1?:
        _328_ = b[25:13];
      3'b1??:
        _328_ = b[38:26];
      default:
        _328_ = a;
    endcase
  endfunction
  assign _043_ = _328_(13'h0000, { 2'h0, fp16_imbitB8, B[137:128], 2'h0, fp32_imbitB2, B[86:77], B[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _329_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _329_ = b[12:0];
      3'b?1?:
        _329_ = b[25:13];
      3'b1??:
        _329_ = b[38:26];
      default:
        _329_ = a;
    endcase
  endfunction
  assign _042_ = _329_(13'h0000, { 2'h0, fp16_imbitB7, B[121:112], B[44:32], B[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _330_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _330_ = b[12:0];
      3'b?1?:
        _330_ = b[25:13];
      3'b1??:
        _330_ = b[38:26];
      default:
        _330_ = a;
    endcase
  endfunction
  assign _041_ = _330_(13'h0000, { 2'h0, fp16_imbitB6, B[105:96], 2'h0, fp32_imbitB1, B[54:45], B[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _331_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _331_ = b[12:0];
      3'b?1?:
        _331_ = b[25:13];
      3'b1??:
        _331_ = b[38:26];
      default:
        _331_ = a;
    endcase
  endfunction
  assign _040_ = _331_(13'h0000, { 2'h0, fp16_imbitB5, B[89:80], B[44:32], B[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _332_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _332_ = b[12:0];
      3'b?1?:
        _332_ = b[25:13];
      3'b1??:
        _332_ = b[38:26];
      default:
        _332_ = a;
    endcase
  endfunction
  assign _039_ = _332_(13'h0000, { 2'h0, fp16_imbitB4, B[73:64], 2'h0, fp32_imbitB1, B[54:45], B[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _333_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _333_ = b[12:0];
      3'b?1?:
        _333_ = b[25:13];
      3'b1??:
        _333_ = b[38:26];
      default:
        _333_ = a;
    endcase
  endfunction
  assign _038_ = _333_(13'h0000, { 2'h0, fp16_imbitB3, B[57:48], B[12:0], B[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _334_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _334_ = b[12:0];
      3'b?1?:
        _334_ = b[25:13];
      3'b1??:
        _334_ = b[38:26];
      default:
        _334_ = a;
    endcase
  endfunction
  assign _037_ = _334_(13'h0000, { 2'h0, fp16_imbitB2, B[41:32], 2'h0, fp32_imbitB0, B[22:13], B[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _335_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _335_ = b[12:0];
      3'b?1?:
        _335_ = b[25:13];
      3'b1??:
        _335_ = b[38:26];
      default:
        _335_ = a;
    endcase
  endfunction
  assign _036_ = _335_(13'h0000, { 2'h0, fp16_imbitB1, B[25:16], B[12:0], B[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _336_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _336_ = b[12:0];
      3'b?1?:
        _336_ = b[25:13];
      3'b1??:
        _336_ = b[38:26];
      default:
        _336_ = a;
    endcase
  endfunction
  assign _035_ = _336_(13'h0000, { 2'h0, fp16_imbitB0, B[9:0], 2'h0, fp32_imbitB0, B[22:13], B[51:39] }, { _106_, _105_, _104_ });
  function [0:0] _337_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _337_ = b[0:0];
      2'b1?:
        _337_ = b[1:1];
      default:
        _337_ = a;
    endcase
  endfunction
  assign _017_ = _337_(o_fp64_imbitA, { 1'h0, fp64_imbitA }, { _082_, _104_ });
  function [12:0] _338_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _338_ = b[12:0];
      3'b?1?:
        _338_ = b[25:13];
      3'b1??:
        _338_ = b[38:26];
      default:
        _338_ = a;
    endcase
  endfunction
  assign _034_ = _338_(13'h0000, { 2'h0, fp16_imbitA9, A[249:240], A[108:96], A[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _339_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _339_ = b[12:0];
      3'b?1?:
        _339_ = b[25:13];
      3'b1??:
        _339_ = b[38:26];
      default:
        _339_ = a;
    endcase
  endfunction
  assign _033_ = _339_(13'h0000, { 2'h0, fp16_imbitA9, A[233:224], A[108:96], A[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _340_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _340_ = b[12:0];
      3'b?1?:
        _340_ = b[25:13];
      3'b1??:
        _340_ = b[38:26];
      default:
        _340_ = a;
    endcase
  endfunction
  assign _032_ = _340_(13'h0000, { 2'h0, fp16_imbitA9, A[217:208], 2'h0, fp32_imbitA3, A[118:109], A[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _341_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _341_ = b[12:0];
      3'b?1?:
        _341_ = b[25:13];
      3'b1??:
        _341_ = b[38:26];
      default:
        _341_ = a;
    endcase
  endfunction
  assign _031_ = _341_(13'h0000, { 2'h0, fp16_imbitA9, A[201:192], 2'h0, fp32_imbitA3, A[118:109], A[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _342_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _342_ = b[12:0];
      3'b?1?:
        _342_ = b[25:13];
      3'b1??:
        _342_ = b[38:26];
      default:
        _342_ = a;
    endcase
  endfunction
  assign _030_ = _342_(13'h0000, { 2'h0, fp16_imbitA9, A[185:176], A[76:64], A[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _343_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _343_ = b[12:0];
      3'b?1?:
        _343_ = b[25:13];
      3'b1??:
        _343_ = b[38:26];
      default:
        _343_ = a;
    endcase
  endfunction
  assign _029_ = _343_(13'h0000, { 2'h0, fp16_imbitA9, A[169:160], A[76:64], A[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _344_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _344_ = b[12:0];
      3'b?1?:
        _344_ = b[25:13];
      3'b1??:
        _344_ = b[38:26];
      default:
        _344_ = a;
    endcase
  endfunction
  assign _028_ = _344_(13'h0000, { 2'h0, fp16_imbitA9, A[153:144], 2'h0, fp32_imbitA2, A[86:77], A[12:0] }, { _106_, _105_, _104_ });
  function [12:0] _345_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _345_ = b[12:0];
      3'b?1?:
        _345_ = b[25:13];
      3'b1??:
        _345_ = b[38:26];
      default:
        _345_ = a;
    endcase
  endfunction
  assign _027_ = _345_(13'h0000, { 2'h0, fp16_imbitA8, A[137:128], 2'h0, fp32_imbitA2, A[86:77], A[25:13] }, { _106_, _105_, _104_ });
  function [12:0] _346_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _346_ = b[12:0];
      3'b?1?:
        _346_ = b[25:13];
      3'b1??:
        _346_ = b[38:26];
      default:
        _346_ = a;
    endcase
  endfunction
  assign _026_ = _346_(13'h0000, { 2'h0, fp16_imbitA7, A[121:112], A[44:32], A[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _347_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _347_ = b[12:0];
      3'b?1?:
        _347_ = b[25:13];
      3'b1??:
        _347_ = b[38:26];
      default:
        _347_ = a;
    endcase
  endfunction
  assign _025_ = _347_(13'h0000, { 2'h0, fp16_imbitA6, A[105:96], A[44:32], A[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _348_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _348_ = b[12:0];
      3'b?1?:
        _348_ = b[25:13];
      3'b1??:
        _348_ = b[38:26];
      default:
        _348_ = a;
    endcase
  endfunction
  assign _024_ = _348_(13'h0000, { 2'h0, fp16_imbitA5, A[89:80], 2'h0, fp32_imbitA1, A[54:45], A[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _349_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _349_ = b[12:0];
      3'b?1?:
        _349_ = b[25:13];
      3'b1??:
        _349_ = b[38:26];
      default:
        _349_ = a;
    endcase
  endfunction
  assign _023_ = _349_(13'h0000, { 2'h0, fp16_imbitA4, A[73:64], 2'h0, fp32_imbitA1, A[54:45], A[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _350_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _350_ = b[12:0];
      3'b?1?:
        _350_ = b[25:13];
      3'b1??:
        _350_ = b[38:26];
      default:
        _350_ = a;
    endcase
  endfunction
  assign _022_ = _350_(13'h0000, { 2'h0, fp16_imbitA3, A[57:48], A[12:0], A[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _351_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _351_ = b[12:0];
      3'b?1?:
        _351_ = b[25:13];
      3'b1??:
        _351_ = b[38:26];
      default:
        _351_ = a;
    endcase
  endfunction
  assign _021_ = _351_(13'h0000, { 2'h0, fp16_imbitA2, A[41:32], A[12:0], A[38:26] }, { _106_, _105_, _104_ });
  function [12:0] _352_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _352_ = b[12:0];
      3'b?1?:
        _352_ = b[25:13];
      3'b1??:
        _352_ = b[38:26];
      default:
        _352_ = a;
    endcase
  endfunction
  assign _020_ = _352_(13'h0000, { 2'h0, fp16_imbitA1, A[25:16], 2'h0, fp32_imbitA0, A[22:13], A[51:39] }, { _106_, _105_, _104_ });
  function [12:0] _353_;
    input [12:0] a;
    input [38:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _353_ = b[12:0];
      3'b?1?:
        _353_ = b[25:13];
      3'b1??:
        _353_ = b[38:26];
      default:
        _353_ = a;
    endcase
  endfunction
  assign _019_ = _353_(13'h0000, { 2'h0, fp16_imbitA0, A[9:0], 2'h0, fp32_imbitA0, A[22:13], A[51:39] }, { _106_, _105_, _104_ });
  function [9:0] _354_;
    input [9:0] a;
    input [19:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _354_ = b[9:0];
      2'b1?:
        _354_ = b[19:10];
      default:
        _354_ = a;
    endcase
  endfunction
  assign _015_ = _354_(10'h000, { _143_, _155_[9:0] }, { _106_, _105_ });
  function [9:0] _355_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _355_ = b[9:0];
      3'b?1?:
        _355_ = b[19:10];
      3'b1??:
        _355_ = b[29:20];
      default:
        _355_ = a;
    endcase
  endfunction
  assign _014_ = _355_(10'h000, { _142_, _154_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _356_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _356_ = b[9:0];
      3'b?1?:
        _356_ = b[19:10];
      3'b1??:
        _356_ = b[29:20];
      default:
        _356_ = a;
    endcase
  endfunction
  assign _013_ = _356_(10'h000, { _141_, _154_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _357_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _357_ = b[9:0];
      3'b?1?:
        _357_ = b[19:10];
      3'b1??:
        _357_ = b[29:20];
      default:
        _357_ = a;
    endcase
  endfunction
  assign _012_ = _357_(10'h000, { _140_, _153_[9:0], 10'h01a }, { _106_, _105_, _104_ });
  function [9:0] _358_;
    input [9:0] a;
    input [19:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _358_ = b[9:0];
      2'b1?:
        _358_ = b[19:10];
      default:
        _358_ = a;
    endcase
  endfunction
  assign _011_ = _358_(10'h000, { _139_, _152_[9:0] }, { _106_, _105_ });
  function [9:0] _359_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _359_ = b[9:0];
      3'b?1?:
        _359_ = b[19:10];
      3'b1??:
        _359_ = b[29:20];
      default:
        _359_ = a;
    endcase
  endfunction
  assign _010_ = _359_(10'h000, { _138_, _151_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _360_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _360_ = b[9:0];
      3'b?1?:
        _360_ = b[19:10];
      3'b1??:
        _360_ = b[29:20];
      default:
        _360_ = a;
    endcase
  endfunction
  assign _009_ = _360_(10'h000, { _137_, _151_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _361_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _361_ = b[9:0];
      3'b?1?:
        _361_ = b[19:10];
      3'b1??:
        _361_ = b[29:20];
      default:
        _361_ = a;
    endcase
  endfunction
  assign _008_ = _361_(10'h000, { _136_, _150_[9:0], 10'h01a }, { _106_, _105_, _104_ });
  function [9:0] _362_;
    input [9:0] a;
    input [19:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _362_ = b[9:0];
      2'b1?:
        _362_ = b[19:10];
      default:
        _362_ = a;
    endcase
  endfunction
  assign _007_ = _362_(10'h000, { _135_, _149_[9:0] }, { _106_, _105_ });
  function [9:0] _363_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _363_ = b[9:0];
      3'b?1?:
        _363_ = b[19:10];
      3'b1??:
        _363_ = b[29:20];
      default:
        _363_ = a;
    endcase
  endfunction
  assign _006_ = _363_(10'h000, { _134_, _148_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _364_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _364_ = b[9:0];
      3'b?1?:
        _364_ = b[19:10];
      3'b1??:
        _364_ = b[29:20];
      default:
        _364_ = a;
    endcase
  endfunction
  assign _005_ = _364_(10'h000, { _133_, _148_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _365_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _365_ = b[9:0];
      3'b?1?:
        _365_ = b[19:10];
      3'b1??:
        _365_ = b[29:20];
      default:
        _365_ = a;
    endcase
  endfunction
  assign _004_ = _365_(10'h000, { _132_, _147_[9:0], 10'h01a }, { _106_, _105_, _104_ });
  function [9:0] _366_;
    input [9:0] a;
    input [19:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _366_ = b[9:0];
      2'b1?:
        _366_ = b[19:10];
      default:
        _366_ = a;
    endcase
  endfunction
  assign _003_ = _366_(10'h000, { _131_, _146_[9:0] }, { _106_, _105_ });
  function [9:0] _367_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _367_ = b[9:0];
      3'b?1?:
        _367_ = b[19:10];
      3'b1??:
        _367_ = b[29:20];
      default:
        _367_ = a;
    endcase
  endfunction
  assign _002_ = _367_(10'h000, { _130_, _145_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _368_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _368_ = b[9:0];
      3'b?1?:
        _368_ = b[19:10];
      3'b1??:
        _368_ = b[29:20];
      default:
        _368_ = a;
    endcase
  endfunction
  assign _001_ = _368_(10'h000, { _129_, _145_[9:0], 10'h00d }, { _106_, _105_, _104_ });
  function [9:0] _369_;
    input [9:0] a;
    input [29:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _369_ = b[9:0];
      3'b?1?:
        _369_ = b[19:10];
      3'b1??:
        _369_ = b[29:20];
      default:
        _369_ = a;
    endcase
  endfunction
  assign _000_ = _369_(10'h000, { _128_, _144_[9:0], 10'h01a }, { _106_, _105_, _104_ });
  assign _016_ = _104_ ? _156_ : 12'h000;
  function [0:0] _371_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _371_ = b[0:0];
      2'b1?:
        _371_ = b[1:1];
      default:
        _371_ = a;
    endcase
  endfunction
  assign _051_[15] = _371_(1'h0, { _122_, _126_ }, { _106_, _105_ });
  function [0:0] _372_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _372_ = b[0:0];
      2'b1?:
        _372_ = b[1:1];
      default:
        _372_ = a;
    endcase
  endfunction
  assign _051_[12] = _372_(1'h0, { _119_, _126_ }, { _106_, _105_ });
  function [0:0] _373_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _373_ = b[0:0];
      2'b1?:
        _373_ = b[1:1];
      default:
        _373_ = a;
    endcase
  endfunction
  assign _051_[11] = _373_(1'h0, { _118_, _125_ }, { _106_, _105_ });
  function [0:0] _374_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _374_ = b[0:0];
      2'b1?:
        _374_ = b[1:1];
      default:
        _374_ = a;
    endcase
  endfunction
  assign _051_[10] = _374_(1'h0, { _117_, _125_ }, { _106_, _105_ });
  function [0:0] _375_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _375_ = b[0:0];
      2'b1?:
        _375_ = b[1:1];
      default:
        _375_ = a;
    endcase
  endfunction
  assign _051_[9] = _375_(1'h0, { _116_, _125_ }, { _106_, _105_ });
  function [0:0] _376_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _376_ = b[0:0];
      2'b1?:
        _376_ = b[1:1];
      default:
        _376_ = a;
    endcase
  endfunction
  assign _051_[8] = _376_(1'h0, { _115_, _125_ }, { _106_, _105_ });
  function [0:0] _377_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _377_ = b[0:0];
      2'b1?:
        _377_ = b[1:1];
      default:
        _377_ = a;
    endcase
  endfunction
  assign _051_[7] = _377_(1'h0, { _114_, _124_ }, { _106_, _105_ });
  function [0:0] _378_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _378_ = b[0:0];
      2'b1?:
        _378_ = b[1:1];
      default:
        _378_ = a;
    endcase
  endfunction
  assign _051_[6] = _378_(1'h0, { _113_, _124_ }, { _106_, _105_ });
  function [0:0] _379_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _379_ = b[0:0];
      2'b1?:
        _379_ = b[1:1];
      default:
        _379_ = a;
    endcase
  endfunction
  assign _051_[5] = _379_(1'h0, { _112_, _124_ }, { _106_, _105_ });
  function [0:0] _380_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _380_ = b[0:0];
      2'b1?:
        _380_ = b[1:1];
      default:
        _380_ = a;
    endcase
  endfunction
  assign _051_[4] = _380_(1'h0, { _111_, _124_ }, { _106_, _105_ });
  function [0:0] _381_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _381_ = b[0:0];
      2'b1?:
        _381_ = b[1:1];
      default:
        _381_ = a;
    endcase
  endfunction
  assign _051_[3] = _381_(1'h0, { _110_, _123_ }, { _106_, _105_ });
  function [0:0] _382_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _382_ = b[0:0];
      2'b1?:
        _382_ = b[1:1];
      default:
        _382_ = a;
    endcase
  endfunction
  assign _051_[2] = _382_(1'h0, { _109_, _123_ }, { _106_, _105_ });
  function [0:0] _383_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _383_ = b[0:0];
      2'b1?:
        _383_ = b[1:1];
      default:
        _383_ = a;
    endcase
  endfunction
  assign _051_[1] = _383_(1'h0, { _108_, _123_ }, { _106_, _105_ });
  function [0:0] _384_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _384_ = b[0:0];
      2'b1?:
        _384_ = b[1:1];
      default:
        _384_ = a;
    endcase
  endfunction
  assign _051_[0] = _384_(1'h0, { _107_, _123_ }, { _106_, _105_ });
  function [0:0] _385_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _385_ = b[0:0];
      2'b1?:
        _385_ = b[1:1];
      default:
        _385_ = a;
    endcase
  endfunction
  assign _051_[14] = _385_(1'h0, { _121_, _126_ }, { _106_, _105_ });
  function [0:0] _386_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _386_ = b[0:0];
      2'b1?:
        _386_ = b[1:1];
      default:
        _386_ = a;
    endcase
  endfunction
  assign _051_[13] = _386_(1'h0, { _120_, _126_ }, { _106_, _105_ });
  assign _105_ = mode_sel == 2'h1;
  assign _106_ = ! mode_sel;
  assign _052_ = _104_ ? _127_ : 1'h0;
  assign _104_ = mode_sel == 2'h2;
  assign fp16_imbitA0 = | { A[10], A[11], A[12], A[13], A[14] };
  assign fp16_imbitA1 = | { A[26], A[27], A[28], A[29], A[30] };
  assign fp16_imbitA2 = | { A[42], A[43], A[44], A[45], A[46] };
  assign fp16_imbitA3 = | { A[58], A[59], A[60], A[61], A[62] };
  assign fp16_imbitA4 = | { A[74], A[75], A[76], A[77], A[78] };
  assign fp16_imbitA5 = | { A[90], A[91], A[92], A[93], A[94] };
  assign fp16_imbitA6 = | { A[106], A[107], A[108], A[109], A[110] };
  assign fp16_imbitA7 = | { A[122], A[123], A[124], A[125], A[126] };
  assign fp16_imbitA8 = | { A[138], A[139], A[140], A[141], A[142] };
  assign fp16_imbitA9 = | { A[154], A[155], A[156], A[157], A[158] };
  assign fp16_imbitAA = | { A[170], A[171], A[172], A[173], A[174] };
  assign fp16_imbitAB = | { A[186], A[187], A[188], A[189], A[190] };
  assign fp16_imbitAC = | { A[202], A[203], A[204], A[205], A[206] };
  assign fp16_imbitAD = | { A[218], A[219], A[220], A[221], A[222] };
  assign fp16_imbitAE = | { A[234], A[235], A[236], A[237], A[238] };
  assign fp16_imbitAF = | { A[250], A[251], A[252], A[253], A[254] };
  assign fp16_imbitB0 = | { B[10], B[11], B[12], B[13], B[14] };
  assign fp16_imbitB1 = | { B[26], B[27], B[28], B[29], B[30] };
  assign fp16_imbitB2 = | { B[42], B[43], B[44], B[45], B[46] };
  assign fp16_imbitB3 = | { B[58], B[59], B[60], B[61], B[62] };
  assign fp16_imbitB4 = | { B[74], B[75], B[76], B[77], B[78] };
  assign fp16_imbitB5 = | { B[90], B[91], B[92], B[93], B[94] };
  assign fp16_imbitB6 = | { B[106], B[107], B[108], B[109], B[110] };
  assign fp16_imbitB7 = | { B[122], B[123], B[124], B[125], B[126] };
  assign fp16_imbitB8 = | { B[138], B[139], B[140], B[141], B[142] };
  assign fp16_imbitB9 = | { B[154], B[155], B[156], B[157], B[158] };
  assign fp16_imbitBA = | { B[170], B[171], B[172], B[173], B[174] };
  assign fp16_imbitBB = | { B[186], B[187], B[188], B[189], B[190] };
  assign fp16_imbitBC = | { B[202], B[203], B[204], B[205], B[206] };
  assign fp16_imbitBD = | { B[218], B[219], B[220], B[221], B[222] };
  assign fp16_imbitBE = | { B[234], B[235], B[236], B[237], B[238] };
  assign fp16_imbitBF = | { B[250], B[251], B[252], B[253], B[254] };
  assign fp32_imbitA0 = | { A[23], A[24], A[25], A[26], A[27], A[28], A[29], A[30] };
  assign fp32_imbitA1 = | { A[55], A[56], A[57], A[58], A[59], A[60], A[61], A[62] };
  assign fp32_imbitA2 = | { A[87], A[88], A[89], A[90], A[91], A[92], A[93], A[94] };
  assign fp32_imbitA3 = | { A[119], A[120], A[121], A[122], A[123], A[124], A[125], A[126] };
  assign fp32_imbitB0 = | { B[23], B[24], B[25], B[26], B[27], B[28], B[29], B[30] };
  assign fp32_imbitB1 = | { B[55], B[56], B[57], B[58], B[59], B[60], B[61], B[62] };
  assign fp32_imbitB2 = | { B[87], B[88], B[89], B[90], B[91], B[92], B[93], B[94] };
  assign fp32_imbitB3 = | { B[119], B[120], B[121], B[122], B[123], B[124], B[125], B[126] };
  assign fp64_imbitA = | { A[52], A[53], A[54], A[55], A[56], A[57], A[58], A[59], A[60], A[61], A[62] };
  assign fp64_imbitB = | { B[52], B[53], B[54], B[55], B[56], B[57], B[58], B[59], B[60], B[61], B[62] };
  assign _107_ = _083_ ? 1'h0 : _157_;
  assign _108_ = _084_ ? 1'h0 : _158_;
  assign _109_ = _085_ ? 1'h0 : _159_;
  assign _110_ = _086_ ? 1'h0 : _160_;
  assign _111_ = _087_ ? 1'h0 : _161_;
  assign _112_ = _088_ ? 1'h0 : _162_;
  assign _113_ = _089_ ? 1'h0 : _163_;
  assign _114_ = _090_ ? 1'h0 : _164_;
  assign _115_ = _091_ ? 1'h0 : _165_;
  assign _116_ = _092_ ? 1'h0 : _166_;
  assign _117_ = _093_ ? 1'h0 : _167_;
  assign _118_ = _094_ ? 1'h0 : _168_;
  assign _119_ = _095_ ? 1'h0 : _169_;
  assign _120_ = _096_ ? 1'h0 : _170_;
  assign _121_ = _097_ ? 1'h0 : _171_;
  assign _122_ = _098_ ? 1'h0 : _172_;
  assign _123_ = _099_ ? 1'h0 : _158_;
  assign _124_ = _100_ ? 1'h0 : _160_;
  assign _125_ = _101_ ? 1'h0 : _162_;
  assign _126_ = _102_ ? 1'h0 : _164_;
  assign _127_ = _103_ ? 1'h0 : _160_;
  assign _128_ = _083_ ? 10'h000 : _053_;
  assign _129_ = _084_ ? 10'h000 : _054_;
  assign _130_ = _085_ ? 10'h000 : _055_;
  assign _131_ = _086_ ? 10'h000 : _056_;
  assign _132_ = _087_ ? 10'h000 : _057_;
  assign _133_ = _088_ ? 10'h000 : _058_;
  assign _134_ = _089_ ? 10'h000 : _059_;
  assign _135_ = _090_ ? 10'h000 : _060_;
  assign _136_ = _091_ ? 10'h000 : _061_;
  assign _137_ = _092_ ? 10'h000 : _062_;
  assign _138_ = _093_ ? 10'h000 : _063_;
  assign _139_ = _094_ ? 10'h000 : _064_;
  assign _140_ = _095_ ? 10'h000 : _065_;
  assign _141_ = _096_ ? 10'h000 : _066_;
  assign _142_ = _097_ ? 10'h000 : _067_;
  assign _143_ = _098_ ? 10'h000 : _068_;
  assign _144_ = _099_ ? 32'd0 : _070_;
  assign _145_ = _099_ ? 32'd0 : _071_;
  assign _146_ = _099_ ? 32'd0 : _069_;
  assign _147_ = _100_ ? 32'd0 : _073_;
  assign _148_ = _100_ ? 32'd0 : _074_;
  assign _149_ = _100_ ? 32'd0 : _072_;
  assign _150_ = _101_ ? 32'd0 : _076_;
  assign _151_ = _101_ ? 32'd0 : _077_;
  assign _152_ = _101_ ? 32'd0 : _075_;
  assign _153_ = _102_ ? 32'd0 : _079_;
  assign _154_ = _102_ ? 32'd0 : _080_;
  assign _155_ = _102_ ? 32'd0 : _078_;
  assign _156_ = _103_ ? 12'h000 : _081_;
  assign _157_ = A[15] ^ B[15];
  assign _159_ = A[47] ^ B[47];
  assign _161_ = A[79] ^ B[79];
  assign _163_ = A[111] ^ B[111];
  assign _165_ = A[143] ^ B[143];
  assign _166_ = A[159] ^ B[159];
  assign _167_ = A[175] ^ B[175];
  assign _168_ = A[191] ^ B[191];
  assign _169_ = A[207] ^ B[207];
  assign _170_ = A[223] ^ B[223];
  assign _171_ = A[239] ^ B[239];
  assign _172_ = A[255] ^ B[255];
  assign _158_ = A[31] ^ B[31];
  assign _162_ = A[95] ^ B[95];
  assign _164_ = A[127] ^ B[127];
  assign _160_ = A[63] ^ B[63];
endmodule

module pe_Fadd(x, y, Cin, Cout, Sum);
  input Cin;
  output Cout;
  output Sum;
  wire a;
  wire b;
  wire c;
  input x;
  input y;
  assign b = x & y;
  assign c = Cin & a;
  assign Cout = b | c;
  assign a = x ^ y;
  assign Sum = a ^ Cin;
endmodule

module pe_Hadd(a, b, sum, carry);
  input a;
  input b;
  output carry;
  output sum;
  assign carry = a & b;
  assign sum = a ^ b;
endmodule

module pip1_processing(clk, rstn, mode_sel_pip0, i_sign_AB, i_sign_AB_fp64, i_exp_AB_fp64, i_exp_AB0, i_exp_AB1, i_exp_AB2, i_exp_AB3, i_exp_AB4, i_exp_AB5, i_exp_AB6, i_exp_AB7, i_exp_AB8, i_exp_AB9, i_exp_ABA, i_exp_ABB, i_exp_ABC, i_exp_ABD, i_exp_ABE, i_exp_ABF, i_man_A0, i_man_A1, i_man_A2, i_man_A3, i_man_A4, i_man_A5, i_man_A6, i_man_A7, i_man_A8, i_man_A9, i_man_AA, i_man_AB, i_man_AC, i_man_AD, i_man_AE, i_man_AF, i_fp64_imbitA, i_man_B0, i_man_B1, i_man_B2, i_man_B3, i_man_B4, i_man_B5, i_man_B6, i_man_B7, i_man_B8, i_man_B9, i_man_BA, i_man_BB, i_man_BC, i_man_BD, i_man_BE, i_man_BF, i_fp64_imbitB, mode_sel_pip1, o_sign_AB, o_sign_AB_fp64, o_exp_AB_fp64, o_exp_max, o_shift0, o_shift1, o_shift2, o_shift3, o_shift4, o_shift5, o_shift6, o_shift7, o_shift8, o_shift9, o_shiftA, o_shiftB, o_shiftC, o_shiftD, o_shiftE, o_shiftF, o_man_AB0, o_man_AB1, o_man_AB2, o_man_AB3, o_man_AB4, o_man_AB5, o_man_AB6, o_man_AB7, o_man_AB8, o_man_AB9, o_man_ABA, o_man_ABB, o_man_ABC, o_man_ABD, o_man_ABE, o_man_ABF, o_man_A_53b, o_man_B_53b);
  wire [25:0] _000_;
  wire [25:0] _001_;
  wire [25:0] _002_;
  wire [25:0] _003_;
  wire [25:0] _004_;
  wire [25:0] _005_;
  wire [25:0] _006_;
  wire [25:0] _007_;
  wire [25:0] _008_;
  wire [25:0] _009_;
  wire [25:0] _010_;
  wire [25:0] _011_;
  wire [25:0] _012_;
  wire [25:0] _013_;
  wire [25:0] _014_;
  wire [25:0] _015_;
  wire [25:0] _016_;
  wire [25:0] _017_;
  wire [25:0] _018_;
  wire [25:0] _019_;
  wire [25:0] _020_;
  wire [25:0] _021_;
  wire [25:0] _022_;
  wire [25:0] _023_;
  wire [25:0] _024_;
  wire [25:0] _025_;
  wire [25:0] _026_;
  wire [25:0] _027_;
  wire [25:0] _028_;
  wire [25:0] _029_;
  wire [25:0] _030_;
  wire [25:0] _031_;
  input clk;
  input [9:0] i_exp_AB0;
  input [9:0] i_exp_AB1;
  input [9:0] i_exp_AB2;
  input [9:0] i_exp_AB3;
  input [9:0] i_exp_AB4;
  input [9:0] i_exp_AB5;
  input [9:0] i_exp_AB6;
  input [9:0] i_exp_AB7;
  input [9:0] i_exp_AB8;
  input [9:0] i_exp_AB9;
  input [9:0] i_exp_ABA;
  input [9:0] i_exp_ABB;
  input [9:0] i_exp_ABC;
  input [9:0] i_exp_ABD;
  input [9:0] i_exp_ABE;
  input [9:0] i_exp_ABF;
  input [11:0] i_exp_AB_fp64;
  input i_fp64_imbitA;
  input i_fp64_imbitB;
  input [12:0] i_man_A0;
  input [12:0] i_man_A1;
  input [12:0] i_man_A2;
  input [12:0] i_man_A3;
  input [12:0] i_man_A4;
  input [12:0] i_man_A5;
  input [12:0] i_man_A6;
  input [12:0] i_man_A7;
  input [12:0] i_man_A8;
  input [12:0] i_man_A9;
  input [12:0] i_man_AA;
  input [12:0] i_man_AB;
  input [12:0] i_man_AC;
  input [12:0] i_man_AD;
  input [12:0] i_man_AE;
  input [12:0] i_man_AF;
  input [12:0] i_man_B0;
  input [12:0] i_man_B1;
  input [12:0] i_man_B2;
  input [12:0] i_man_B3;
  input [12:0] i_man_B4;
  input [12:0] i_man_B5;
  input [12:0] i_man_B6;
  input [12:0] i_man_B7;
  input [12:0] i_man_B8;
  input [12:0] i_man_B9;
  input [12:0] i_man_BA;
  input [12:0] i_man_BB;
  input [12:0] i_man_BC;
  input [12:0] i_man_BD;
  input [12:0] i_man_BE;
  input [12:0] i_man_BF;
  input [15:0] i_sign_AB;
  input i_sign_AB_fp64;
  wire [26:0] inv_man_AB0;
  wire [26:0] inv_man_AB1;
  wire [26:0] inv_man_AB2;
  wire [26:0] inv_man_AB3;
  wire [26:0] inv_man_AB4;
  wire [26:0] inv_man_AB5;
  wire [26:0] inv_man_AB6;
  wire [26:0] inv_man_AB7;
  wire [26:0] inv_man_AB8;
  wire [26:0] inv_man_AB9;
  wire [26:0] inv_man_ABA;
  wire [26:0] inv_man_ABB;
  wire [26:0] inv_man_ABC;
  wire [26:0] inv_man_ABD;
  wire [26:0] inv_man_ABE;
  wire [26:0] inv_man_ABF;
  input [1:0] mode_sel_pip0;
  output [1:0] mode_sel_pip1;
  reg [1:0] mode_sel_pip1;
  output [11:0] o_exp_AB_fp64;
  reg [11:0] o_exp_AB_fp64;
  output [9:0] o_exp_max;
  reg [9:0] o_exp_max;
  output [25:0] o_man_AB0;
  reg [25:0] o_man_AB0;
  output [25:0] o_man_AB1;
  reg [25:0] o_man_AB1;
  output [25:0] o_man_AB2;
  reg [25:0] o_man_AB2;
  output [25:0] o_man_AB3;
  reg [25:0] o_man_AB3;
  output [25:0] o_man_AB4;
  reg [25:0] o_man_AB4;
  output [25:0] o_man_AB5;
  reg [25:0] o_man_AB5;
  output [25:0] o_man_AB6;
  reg [25:0] o_man_AB6;
  output [25:0] o_man_AB7;
  reg [25:0] o_man_AB7;
  output [25:0] o_man_AB8;
  reg [25:0] o_man_AB8;
  output [25:0] o_man_AB9;
  reg [25:0] o_man_AB9;
  output [25:0] o_man_ABA;
  reg [25:0] o_man_ABA;
  output [25:0] o_man_ABB;
  reg [25:0] o_man_ABB;
  output [25:0] o_man_ABC;
  reg [25:0] o_man_ABC;
  output [25:0] o_man_ABD;
  reg [25:0] o_man_ABD;
  output [25:0] o_man_ABE;
  reg [25:0] o_man_ABE;
  output [25:0] o_man_ABF;
  reg [25:0] o_man_ABF;
  output [52:0] o_man_A_53b;
  reg [52:0] o_man_A_53b;
  output [52:0] o_man_B_53b;
  reg [52:0] o_man_B_53b;
  output [9:0] o_shift0;
  reg [9:0] o_shift0;
  output [9:0] o_shift1;
  reg [9:0] o_shift1;
  output [9:0] o_shift2;
  reg [9:0] o_shift2;
  output [9:0] o_shift3;
  reg [9:0] o_shift3;
  output [9:0] o_shift4;
  reg [9:0] o_shift4;
  output [9:0] o_shift5;
  reg [9:0] o_shift5;
  output [9:0] o_shift6;
  reg [9:0] o_shift6;
  output [9:0] o_shift7;
  reg [9:0] o_shift7;
  output [9:0] o_shift8;
  reg [9:0] o_shift8;
  output [9:0] o_shift9;
  reg [9:0] o_shift9;
  output [9:0] o_shiftA;
  reg [9:0] o_shiftA;
  output [9:0] o_shiftB;
  reg [9:0] o_shiftB;
  output [9:0] o_shiftC;
  reg [9:0] o_shiftC;
  output [9:0] o_shiftD;
  reg [9:0] o_shiftD;
  output [9:0] o_shiftE;
  reg [9:0] o_shiftE;
  output [9:0] o_shiftF;
  reg [9:0] o_shiftF;
  output [15:0] o_sign_AB;
  reg [15:0] o_sign_AB;
  output o_sign_AB_fp64;
  reg o_sign_AB_fp64;
  wire [9:0] oexp_max;
  wire [25:0] oman_AB0;
  wire [25:0] oman_AB1;
  wire [25:0] oman_AB2;
  wire [25:0] oman_AB3;
  wire [25:0] oman_AB4;
  wire [25:0] oman_AB5;
  wire [25:0] oman_AB6;
  wire [25:0] oman_AB7;
  wire [25:0] oman_AB8;
  wire [25:0] oman_AB9;
  wire [25:0] oman_ABA;
  wire [25:0] oman_ABB;
  wire [25:0] oman_ABC;
  wire [25:0] oman_ABD;
  wire [25:0] oman_ABE;
  wire [25:0] oman_ABF;
  wire [9:0] oshift_00;
  wire [9:0] oshift_01;
  wire [9:0] oshift_02;
  wire [9:0] oshift_03;
  wire [9:0] oshift_04;
  wire [9:0] oshift_05;
  wire [9:0] oshift_06;
  wire [9:0] oshift_07;
  wire [9:0] oshift_08;
  wire [9:0] oshift_09;
  wire [9:0] oshift_10;
  wire [9:0] oshift_11;
  wire [9:0] oshift_12;
  wire [9:0] oshift_13;
  wire [9:0] oshift_14;
  wire [9:0] oshift_15;
  input rstn;
  assign _016_ = ~ oman_AB0;
  assign _017_ = ~ oman_AB1;
  assign _018_ = ~ oman_AB2;
  assign _019_ = ~ oman_AB3;
  assign _020_ = ~ oman_AB4;
  assign _021_ = ~ oman_AB5;
  assign _022_ = ~ oman_AB6;
  assign _023_ = ~ oman_AB7;
  assign _024_ = ~ oman_AB8;
  assign _025_ = ~ oman_AB9;
  assign _026_ = ~ oman_ABA;
  assign _027_ = ~ oman_ABB;
  assign _028_ = ~ oman_ABC;
  assign _029_ = ~ oman_ABD;
  assign _030_ = ~ oman_ABE;
  assign _031_ = ~ oman_ABF;
  always @(posedge clk)
      o_man_AB0 <= _000_;
  always @(posedge clk)
      o_man_AB1 <= _001_;
  always @(posedge clk)
      o_man_AB2 <= _002_;
  always @(posedge clk)
      o_man_AB3 <= _003_;
  always @(posedge clk)
      o_man_AB4 <= _004_;
  always @(posedge clk)
      o_man_AB5 <= _005_;
  always @(posedge clk)
      o_man_AB6 <= _006_;
  always @(posedge clk)
      o_man_AB7 <= _007_;
  always @(posedge clk)
      o_man_AB8 <= _008_;
  always @(posedge clk)
      o_man_AB9 <= _009_;
  always @(posedge clk)
      o_man_ABA <= _010_;
  always @(posedge clk)
      o_man_ABB <= _011_;
  always @(posedge clk)
      o_man_ABC <= _012_;
  always @(posedge clk)
      o_man_ABD <= _013_;
  always @(posedge clk)
      o_man_ABE <= _014_;
  always @(posedge clk)
      o_man_ABF <= _015_;
  always @(posedge clk)
      o_man_A_53b <= { i_fp64_imbitA, i_man_A1, i_man_A2, i_man_AE, i_man_AF };
  always @(posedge clk)
      o_man_B_53b <= { i_fp64_imbitB, i_man_B9, i_man_BA, i_man_B6, i_man_B7 };
  always @(posedge clk)
      o_exp_AB_fp64 <= i_exp_AB_fp64;
  always @(posedge clk)
      o_exp_max <= oexp_max;
  always @(posedge clk)
      o_shift0 <= oshift_00;
  always @(posedge clk)
      o_shift1 <= oshift_01;
  always @(posedge clk)
      o_shift2 <= oshift_02;
  always @(posedge clk)
      o_shift3 <= oshift_03;
  always @(posedge clk)
      o_shift4 <= oshift_04;
  always @(posedge clk)
      o_shift5 <= oshift_05;
  always @(posedge clk)
      o_shift6 <= oshift_06;
  always @(posedge clk)
      o_shift7 <= oshift_07;
  always @(posedge clk)
      o_shift8 <= oshift_08;
  always @(posedge clk)
      o_shift9 <= oshift_09;
  always @(posedge clk)
      o_shiftA <= oshift_10;
  always @(posedge clk)
      o_shiftB <= oshift_11;
  always @(posedge clk)
      o_shiftC <= oshift_12;
  always @(posedge clk)
      o_shiftD <= oshift_13;
  always @(posedge clk)
      o_shiftE <= oshift_14;
  always @(posedge clk)
      o_shiftF <= oshift_15;
  always @(posedge clk)
      o_sign_AB <= i_sign_AB;
  always @(posedge clk)
      o_sign_AB_fp64 <= i_sign_AB_fp64;
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mode_sel_pip1 <= 2'h3;
    else
      mode_sel_pip1 <= mode_sel_pip0;
  assign _000_ = i_sign_AB[0] ? inv_man_AB0[25:0] : oman_AB0;
  assign _001_ = i_sign_AB[1] ? inv_man_AB1[25:0] : oman_AB1;
  assign _002_ = i_sign_AB[2] ? inv_man_AB2[25:0] : oman_AB2;
  assign _003_ = i_sign_AB[3] ? inv_man_AB3[25:0] : oman_AB3;
  assign _004_ = i_sign_AB[4] ? inv_man_AB4[25:0] : oman_AB4;
  assign _005_ = i_sign_AB[5] ? inv_man_AB5[25:0] : oman_AB5;
  assign _006_ = i_sign_AB[6] ? inv_man_AB6[25:0] : oman_AB6;
  assign _007_ = i_sign_AB[7] ? inv_man_AB7[25:0] : oman_AB7;
  assign _008_ = i_sign_AB[8] ? inv_man_AB8[25:0] : oman_AB8;
  assign _009_ = i_sign_AB[9] ? inv_man_AB9[25:0] : oman_AB9;
  assign _010_ = i_sign_AB[10] ? inv_man_ABA[25:0] : oman_ABA;
  assign _011_ = i_sign_AB[11] ? inv_man_ABB[25:0] : oman_ABB;
  assign _012_ = i_sign_AB[12] ? inv_man_ABC[25:0] : oman_ABC;
  assign _013_ = i_sign_AB[13] ? inv_man_ABD[25:0] : oman_ABD;
  assign _014_ = i_sign_AB[14] ? inv_man_ABE[25:0] : oman_ABE;
  assign _015_ = i_sign_AB[15] ? inv_man_ABF[25:0] : oman_ABF;
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_0 (
    .in_01(_016_),
    .in_02(26'h0000001),
    .out(inv_man_AB0)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_1 (
    .in_01(_017_),
    .in_02(26'h0000001),
    .out(inv_man_AB1)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_2 (
    .in_01(_018_),
    .in_02(26'h0000001),
    .out(inv_man_AB2)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_3 (
    .in_01(_019_),
    .in_02(26'h0000001),
    .out(inv_man_AB3)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_4 (
    .in_01(_020_),
    .in_02(26'h0000001),
    .out(inv_man_AB4)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_5 (
    .in_01(_021_),
    .in_02(26'h0000001),
    .out(inv_man_AB5)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_6 (
    .in_01(_022_),
    .in_02(26'h0000001),
    .out(inv_man_AB6)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_7 (
    .in_01(_023_),
    .in_02(26'h0000001),
    .out(inv_man_AB7)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_8 (
    .in_01(_024_),
    .in_02(26'h0000001),
    .out(inv_man_AB8)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_9 (
    .in_01(_025_),
    .in_02(26'h0000001),
    .out(inv_man_AB9)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_A (
    .in_01(_026_),
    .in_02(26'h0000001),
    .out(inv_man_ABA)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_B (
    .in_01(_027_),
    .in_02(26'h0000001),
    .out(inv_man_ABB)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_C (
    .in_01(_028_),
    .in_02(26'h0000001),
    .out(inv_man_ABC)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_D (
    .in_01(_029_),
    .in_02(26'h0000001),
    .out(inv_man_ABD)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_E (
    .in_01(_030_),
    .in_02(26'h0000001),
    .out(inv_man_ABE)
  );
  \$paramod\csla\WIDTH=26\PRE_WIDTH=5\PRE_UNIT_NUM=5\RCA_WIDTH=1  csla_F (
    .in_01(_031_),
    .in_02(26'h0000001),
    .out(inv_man_ABF)
  );
  \$paramod\exp_compare_16in\WIDTH=10  u_exp_compare (
    .iexp_00(i_exp_AB0),
    .iexp_01(i_exp_AB1),
    .iexp_02(i_exp_AB2),
    .iexp_03(i_exp_AB3),
    .iexp_04(i_exp_AB4),
    .iexp_05(i_exp_AB5),
    .iexp_06(i_exp_AB6),
    .iexp_07(i_exp_AB7),
    .iexp_08(i_exp_AB8),
    .iexp_09(i_exp_AB9),
    .iexp_10(i_exp_ABA),
    .iexp_11(i_exp_ABB),
    .iexp_12(i_exp_ABC),
    .iexp_13(i_exp_ABD),
    .iexp_14(i_exp_ABE),
    .iexp_15(i_exp_ABF),
    .oexp_max(oexp_max),
    .oshift_00(oshift_00),
    .oshift_01(oshift_01),
    .oshift_02(oshift_02),
    .oshift_03(oshift_03),
    .oshift_04(oshift_04),
    .oshift_05(oshift_05),
    .oshift_06(oshift_06),
    .oshift_07(oshift_07),
    .oshift_08(oshift_08),
    .oshift_09(oshift_09),
    .oshift_10(oshift_10),
    .oshift_11(oshift_11),
    .oshift_12(oshift_12),
    .oshift_13(oshift_13),
    .oshift_14(oshift_14),
    .oshift_15(oshift_15)
  );
  \$paramod\mul_array\WIDTH=13  u_mul_array (
    .i_man_A00(i_man_A0),
    .i_man_A01(i_man_A1),
    .i_man_A02(i_man_A2),
    .i_man_A03(i_man_A3),
    .i_man_A04(i_man_A4),
    .i_man_A05(i_man_A5),
    .i_man_A06(i_man_A6),
    .i_man_A07(i_man_A7),
    .i_man_A08(i_man_A8),
    .i_man_A09(i_man_A9),
    .i_man_A10(i_man_AA),
    .i_man_A11(i_man_AB),
    .i_man_A12(i_man_AC),
    .i_man_A13(i_man_AD),
    .i_man_A14(i_man_AE),
    .i_man_A15(i_man_AF),
    .i_man_B00(i_man_B0),
    .i_man_B01(i_man_B1),
    .i_man_B02(i_man_B2),
    .i_man_B03(i_man_B3),
    .i_man_B04(i_man_B4),
    .i_man_B05(i_man_B5),
    .i_man_B06(i_man_B6),
    .i_man_B07(i_man_B7),
    .i_man_B08(i_man_B8),
    .i_man_B09(i_man_B9),
    .i_man_B10(i_man_BA),
    .i_man_B11(i_man_BB),
    .i_man_B12(i_man_BC),
    .i_man_B13(i_man_BD),
    .i_man_B14(i_man_BE),
    .i_man_B15(i_man_BF),
    .oman_AB00(oman_AB0),
    .oman_AB01(oman_AB1),
    .oman_AB02(oman_AB2),
    .oman_AB03(oman_AB3),
    .oman_AB04(oman_AB4),
    .oman_AB05(oman_AB5),
    .oman_AB06(oman_AB6),
    .oman_AB07(oman_AB7),
    .oman_AB08(oman_AB8),
    .oman_AB09(oman_AB9),
    .oman_AB10(oman_ABA),
    .oman_AB11(oman_ABB),
    .oman_AB12(oman_ABC),
    .oman_AB13(oman_ABD),
    .oman_AB14(oman_ABE),
    .oman_AB15(oman_ABF)
  );
endmodule

module pip2_processing(clk, rstn, mode_sel_pip1, i_sign_AB_pip1, i_sign_AB_fp64_pip1, i_exp_AB_fp64_pip1, i_exp_max, i_shift0, i_shift1, i_shift2, i_shift3, i_shift4, i_shift5, i_shift6, i_shift7, i_shift8, i_shift9, i_shiftA, i_shiftB, i_shiftC, i_shiftD, i_shiftE, i_shiftF, i_man_AB0, i_man_AB1, i_man_AB2, i_man_AB3, i_man_AB4, i_man_AB5, i_man_AB6, i_man_AB7, i_man_AB8, i_man_AB9, i_man_ABA, i_man_ABB, i_man_ABC, i_man_ABD, i_man_ABE, i_man_ABF, i_man_A_53b, i_man_B_53b, mode_sel_pip2, o_sign_pip2, o_sign_AB_fp64_pip2, o_exp_AB_fp64_pip2, o_exp_max_pip2, o_result_pip2, o_lza_cnt, o_lza_invalid);
  wire [106:0] _00_;
  wire _01_;
  wire _02_;
  wire [108:0] add_result;
  wire [108:0] carry_out;
  input clk;
  input [11:0] i_exp_AB_fp64_pip1;
  input [9:0] i_exp_max;
  wire [106:0] i_lza0;
  wire [106:0] i_lza1;
  input [25:0] i_man_AB0;
  input [25:0] i_man_AB1;
  input [25:0] i_man_AB2;
  input [25:0] i_man_AB3;
  input [25:0] i_man_AB4;
  input [25:0] i_man_AB5;
  input [25:0] i_man_AB6;
  input [25:0] i_man_AB7;
  input [25:0] i_man_AB8;
  input [25:0] i_man_AB9;
  input [25:0] i_man_ABA;
  input [25:0] i_man_ABB;
  input [25:0] i_man_ABC;
  input [25:0] i_man_ABD;
  input [25:0] i_man_ABE;
  input [25:0] i_man_ABF;
  input [52:0] i_man_A_53b;
  input [52:0] i_man_B_53b;
  input [9:0] i_shift0;
  input [9:0] i_shift1;
  input [9:0] i_shift2;
  input [9:0] i_shift3;
  input [9:0] i_shift4;
  input [9:0] i_shift5;
  input [9:0] i_shift6;
  input [9:0] i_shift7;
  input [9:0] i_shift8;
  input [9:0] i_shift9;
  input [9:0] i_shiftA;
  input [9:0] i_shiftB;
  input [9:0] i_shiftC;
  input [9:0] i_shiftD;
  input [9:0] i_shiftE;
  input [9:0] i_shiftF;
  input i_sign_AB_fp64_pip1;
  input [15:0] i_sign_AB_pip1;
  wire [52:0] idata0;
  wire [52:0] idata1;
  wire [52:0] idata2;
  wire [52:0] idata3;
  wire [52:0] idata4;
  wire [52:0] idata5;
  wire [52:0] idata6;
  wire [52:0] idata7;
  wire [52:0] idata8;
  wire [52:0] idata9;
  wire [52:0] idataA;
  wire [52:0] idataB;
  wire [52:0] idataC;
  wire [52:0] idataD;
  wire [52:0] idataE;
  wire [52:0] idataF;
  wire invalid;
  input [1:0] mode_sel_pip1;
  output [1:0] mode_sel_pip2;
  reg [1:0] mode_sel_pip2;
  output [11:0] o_exp_AB_fp64_pip2;
  reg [11:0] o_exp_AB_fp64_pip2;
  output [9:0] o_exp_max_pip2;
  reg [9:0] o_exp_max_pip2;
  output [6:0] o_lza_cnt;
  reg [6:0] o_lza_cnt;
  output o_lza_invalid;
  reg o_lza_invalid;
  output [106:0] o_result_pip2;
  reg [106:0] o_result_pip2;
  output o_sign_AB_fp64_pip2;
  reg o_sign_AB_fp64_pip2;
  output o_sign_pip2;
  reg o_sign_pip2;
  wire [52:0] odata0;
  wire [52:0] odata1;
  wire [52:0] odata2;
  wire [52:0] odata3;
  wire [52:0] odata4;
  wire [52:0] odata5;
  wire [52:0] odata6;
  wire [52:0] odata7;
  wire [52:0] odata8;
  wire [52:0] odata9;
  wire [52:0] odataA;
  wire [52:0] odataB;
  wire [52:0] odataC;
  wire [52:0] odataD;
  wire [52:0] odataE;
  wire [52:0] odataF;
  input rstn;
  wire [108:0] sum_out;
  wire [6:0] zero_cnt;
  always @(posedge clk)
      o_sign_pip2 <= _01_;
  always @(posedge clk)
      o_result_pip2 <= _00_;
  always @(posedge clk)
      o_lza_cnt <= zero_cnt;
  always @(posedge clk)
      o_lza_invalid <= invalid;
  always @(posedge clk)
      o_sign_AB_fp64_pip2 <= i_sign_AB_fp64_pip1;
  always @(posedge clk)
      o_exp_AB_fp64_pip2 <= i_exp_AB_fp64_pip1;
  always @(posedge clk)
      o_exp_max_pip2 <= i_exp_max;
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mode_sel_pip2 <= 2'h3;
    else
      mode_sel_pip2 <= mode_sel_pip1;
  assign _00_ = _02_ ? add_result[106:0] : { add_result[108:52], 50'h0000000000000 };
  assign _01_ = _02_ ? 1'h0 : add_result[108];
  assign _02_ = mode_sel_pip1 == 2'h2;
  assign i_lza0 = mode_sel_pip1[1] ? sum_out[106:0] : { sum_out[108:52], 50'h0000000000000 };
  assign i_lza1 = mode_sel_pip1[1] ? carry_out[106:0] : { carry_out[108:52], 50'h0000000000000 };
  \$paramod\add_tree_16in\WIDTH=53  u_add_tree_16in (
    .add_result(add_result),
    .carry_out(carry_out),
    .data_in0(odata0),
    .data_in1(odata1),
    .data_in2(odata2),
    .data_in3(odata3),
    .data_in4(odata4),
    .data_in5(odata5),
    .data_in6(odata6),
    .data_in7(odata7),
    .data_in8(odata8),
    .data_in9(odata9),
    .data_inA(odataA),
    .data_inB(odataB),
    .data_inC(odataC),
    .data_inD(odataD),
    .data_inE(odataE),
    .data_inF(odataF),
    .i_man_A_53b(i_man_A_53b),
    .i_man_B_53b(i_man_B_53b),
    .mode_sel_pip1(mode_sel_pip1),
    .sum_out(sum_out)
  );
  \$paramod\pe_alignment\WIDTH=52\EXP_W=10  u_alignment (
    .idata0({ i_sign_AB_pip1[0], i_man_AB0, 26'h0000000 }),
    .idata1({ i_sign_AB_pip1[1], i_man_AB1, 26'h0000000 }),
    .idata2({ i_sign_AB_pip1[2], i_man_AB2, 26'h0000000 }),
    .idata3({ i_sign_AB_pip1[3], i_man_AB3, 26'h0000000 }),
    .idata4({ i_sign_AB_pip1[4], i_man_AB4, 26'h0000000 }),
    .idata5({ i_sign_AB_pip1[5], i_man_AB5, 26'h0000000 }),
    .idata6({ i_sign_AB_pip1[6], i_man_AB6, 26'h0000000 }),
    .idata7({ i_sign_AB_pip1[7], i_man_AB7, 26'h0000000 }),
    .idata8({ i_sign_AB_pip1[8], i_man_AB8, 26'h0000000 }),
    .idata9({ i_sign_AB_pip1[9], i_man_AB9, 26'h0000000 }),
    .idataA({ i_sign_AB_pip1[10], i_man_ABA, 26'h0000000 }),
    .idataB({ i_sign_AB_pip1[11], i_man_ABB, 26'h0000000 }),
    .idataC({ i_sign_AB_pip1[12], i_man_ABC, 26'h0000000 }),
    .idataD({ i_sign_AB_pip1[13], i_man_ABD, 26'h0000000 }),
    .idataE({ i_sign_AB_pip1[14], i_man_ABE, 26'h0000000 }),
    .idataF({ i_sign_AB_pip1[15], i_man_ABF, 26'h0000000 }),
    .ishift0(i_shift0),
    .ishift1(i_shift1),
    .ishift2(i_shift2),
    .ishift3(i_shift3),
    .ishift4(i_shift4),
    .ishift5(i_shift5),
    .ishift6(i_shift6),
    .ishift7(i_shift7),
    .ishift8(i_shift8),
    .ishift9(i_shift9),
    .ishiftA(i_shiftA),
    .ishiftB(i_shiftB),
    .ishiftC(i_shiftC),
    .ishiftD(i_shiftD),
    .ishiftE(i_shiftE),
    .ishiftF(i_shiftF),
    .odata0(odata0),
    .odata1(odata1),
    .odata2(odata2),
    .odata3(odata3),
    .odata4(odata4),
    .odata5(odata5),
    .odata6(odata6),
    .odata7(odata7),
    .odata8(odata8),
    .odata9(odata9),
    .odataA(odataA),
    .odataB(odataB),
    .odataC(odataC),
    .odataD(odataD),
    .odataE(odataE),
    .odataF(odataF)
  );
  \$paramod\lza\WIDTH=107  u_lza (
    .in_01(i_lza0),
    .in_02(i_lza1),
    .invalid(invalid),
    .zero_cnt(zero_cnt)
  );
  assign idata0 = { i_sign_AB_pip1[0], i_man_AB0, 26'h0000000 };
  assign idata1 = { i_sign_AB_pip1[1], i_man_AB1, 26'h0000000 };
  assign idata2 = { i_sign_AB_pip1[2], i_man_AB2, 26'h0000000 };
  assign idata3 = { i_sign_AB_pip1[3], i_man_AB3, 26'h0000000 };
  assign idata4 = { i_sign_AB_pip1[4], i_man_AB4, 26'h0000000 };
  assign idata5 = { i_sign_AB_pip1[5], i_man_AB5, 26'h0000000 };
  assign idata6 = { i_sign_AB_pip1[6], i_man_AB6, 26'h0000000 };
  assign idata7 = { i_sign_AB_pip1[7], i_man_AB7, 26'h0000000 };
  assign idata8 = { i_sign_AB_pip1[8], i_man_AB8, 26'h0000000 };
  assign idata9 = { i_sign_AB_pip1[9], i_man_AB9, 26'h0000000 };
  assign idataA = { i_sign_AB_pip1[10], i_man_ABA, 26'h0000000 };
  assign idataB = { i_sign_AB_pip1[11], i_man_ABB, 26'h0000000 };
  assign idataC = { i_sign_AB_pip1[12], i_man_ABC, 26'h0000000 };
  assign idataD = { i_sign_AB_pip1[13], i_man_ABD, 26'h0000000 };
  assign idataE = { i_sign_AB_pip1[14], i_man_ABE, 26'h0000000 };
  assign idataF = { i_sign_AB_pip1[15], i_man_ABF, 26'h0000000 };
endmodule

module pip3_processing(clk, rstn, mode_sel_pip2, i_sign_pip2, i_sign_AB_fp64_pip2, i_exp_AB_fp64_pip2, i_exp_max_pip2, i_result_pip2, i_lza_cnt, mode_sel_pip3, o_norm_result);
  wire [9:0] _00_;
  wire [9:0] _01_;
  wire [9:0] _02_;
  wire [9:0] _03_;
  wire [56:0] _04_;
  wire [31:0] _05_;
  wire [31:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [56:0] _25_;
  wire _26_;
  wire [31:0] _27_;
  wire [31:0] _28_;
  wire [31:0] _29_;
  wire [31:0] _30_;
  wire [31:0] _31_;
  wire [31:0] _32_;
  wire [31:0] _33_;
  wire [31:0] _34_;
  wire [31:0] _35_;
  wire [31:0] _36_;
  wire [4:0] _37_;
  wire [7:0] _38_;
  wire [10:0] _39_;
  input clk;
  wire [9:0] cort_exp;
  wire [11:0] cort_exp_fp64;
  wire [1:0] exp_delta;
  input [11:0] i_exp_AB_fp64_pip2;
  input [9:0] i_exp_max_pip2;
  input [6:0] i_lza_cnt;
  input [106:0] i_result_pip2;
  input i_sign_AB_fp64_pip2;
  input i_sign_pip2;
  input [1:0] mode_sel_pip2;
  output [1:0] mode_sel_pip3;
  reg [1:0] mode_sel_pip3;
  wire [56:0] neg_result;
  reg [9:0] norm_exp_fp16;
  reg [9:0] norm_exp_fp32;
  wire [11:0] norm_exp_fp64;
  wire [51:0] norm_out;
  wire [63:0] norm_result;
  wire [106:0] norm_shift;
  output [63:0] o_norm_result;
  reg [63:0] o_norm_result;
  wire [106:0] pre_shift;
  input rstn;
  wire [9:0] shift_exp;
  wire [11:0] shift_exp_fp64;
  assign _04_ = _25_ + 32'd1;
  assign _05_ = i_exp_max_pip2 + 32'd9;
  assign _06_ = i_exp_AB_fp64_pip2 + 32'd1;
  assign cort_exp = shift_exp + exp_delta;
  assign cort_exp_fp64 = shift_exp_fp64 + exp_delta;
  assign _07_ = ~ _16_;
  assign _08_ = ~ _13_;
  assign _11_ = _07_ & _08_;
  assign _12_ = _07_ & _11_;
  assign _14_ = _07_ & _13_;
  assign _15_ = _07_ & _14_;
  assign _09_ = ~ _12_;
  always @*
    if (_09_)
      norm_exp_fp16 = _00_;
  assign _10_ = ~ _15_;
  always @*
    if (_10_)
      norm_exp_fp32 = _01_;
  assign _16_ = ! i_exp_max_pip2;
  assign _17_ = ! i_exp_AB_fp64_pip2;
  assign _18_ = ! norm_exp_fp16[9:5];
  assign _19_ = ! norm_exp_fp32[9:8];
  assign _20_ = _05_ > i_lza_cnt;
  assign _21_ = _06_ > i_lza_cnt;
  assign _22_ = cort_exp > 32'd15;
  assign _23_ = cort_exp > 32'd153;
  assign _24_ = cort_exp_fp64 > 32'd1023;
  assign _25_ = ~ i_result_pip2[106:50];
  always @(posedge clk or negedge rstn)
    if (!rstn)
      o_norm_result <= 64'h0000000000000000;
    else
      o_norm_result <= norm_result;
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mode_sel_pip3 <= 2'h3;
    else
      mode_sel_pip3 <= mode_sel_pip2;
  function [63:0] _67_;
    input [63:0] a;
    input [127:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _67_ = b[63:0];
      2'b1?:
        _67_ = b[127:64];
      default:
        _67_ = a;
    endcase
  endfunction
  assign norm_result = _67_({ i_sign_AB_fp64_pip2, _39_, norm_out }, { 48'h000000000000, i_sign_pip2, _37_, norm_out[9:0], 32'h00000000, i_sign_pip2, _38_, norm_out[22:0] }, { _13_, _26_ });
  assign norm_exp_fp64 = _17_ ? 12'h000 : _36_[11:0];
  assign _26_ = mode_sel_pip2 == 2'h1;
  assign _13_ = ! mode_sel_pip2;
  assign _01_ = _16_ ? 10'h000 : _03_;
  assign _00_ = _16_ ? 10'h000 : _02_;
  assign norm_shift = { neg_result, i_result_pip2[49:0] } << i_lza_cnt;
  assign _27_ = _05_ - i_lza_cnt;
  assign _28_ = _06_ - i_lza_cnt;
  assign _29_ = cort_exp - 32'd15;
  assign _30_ = cort_exp - 32'd153;
  assign _31_ = cort_exp_fp64 - 32'd1023;
  assign neg_result = i_result_pip2[106] ? _04_ : { 1'h0, i_result_pip2[105:50] };
  assign { _32_[31:10], shift_exp } = _20_ ? _27_ : 32'd1023;
  assign { _33_[31:12], shift_exp_fp64 } = _21_ ? _28_ : 32'd4095;
  assign { _34_[31:10], _02_ } = _22_ ? _29_ : 32'd1023;
  assign { _35_[31:10], _03_ } = _23_ ? _30_ : 32'd1023;
  assign _36_ = _24_ ? _31_ : 32'd4095;
  assign _37_ = _18_ ? norm_exp_fp16[4:0] : 5'h1f;
  assign _38_ = _19_ ? norm_exp_fp32[7:0] : 8'hff;
  assign _39_ = norm_exp_fp64[11] ? 11'h7ff : norm_exp_fp64[10:0];
  \$paramod\pe_round\WIDTH=106  u_round (
    .data_in(norm_shift[106:1]),
    .exp_delta(exp_delta),
    .norm_out(norm_out),
    .precision(mode_sel_pip2)
  );
  assign pre_shift = { neg_result, i_result_pip2[49:0] };
endmodule
